[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biologische Modellen en Statistiek",
    "section": "",
    "text": "Inleiding\nBiologie is een complexe wetenschap. Biologische systemen bestaan uit vele componenten, die elk op hun eigen schaal unieke regels en processen volgen. We bestuderen nucleotiden, eiwitten, organellen, cellen, weefsels, organen, organismen, en ecosystemen, waarbij de schaal over meerdere biljoenen ordegroottes varieert. Bovendien hebben deze schalen allemaal invloed op elkaar: een ecosysteem vormt het toneel waarop dieren, planten, microben en hun mutaties zich verspreiden, maar al deze spelers beïnvloeden op hun beurt ook het ecosysteem! Misschien is het dus ook geen wonder dat er zoveel variatie zit in biologische metingen, want de allerkleinste details doen ertoe. Wat kunnen we doen om deze complexe systemen, met al deze ingewikkelde details, toch te begrijpen?\n\n\n\n\n\n\nFiguur 1: Modellen en statistiek zijn twee verschillende strategieën om met biologische complexiteit om te gaan\n\n\n\nIn deze cursus leer je over twee strategieën om complexe biologische systemen te bestuderen. De eerste strategie is het vereenvoudigen van complexe systemen met simpele modellen (links in Figuur 1) . Bijvoorbeeld, met een eenvoudige computersimulatie van een ziekte-uitbraak kun je zelf aan de knoppen draaien om te zien wanneer de uitbraak erger of milder wordt. Op een vergelijkbare manier wordt in alle vakgebieden binnen de biologie – van microbiologie tot gedrag – onderzoek gedaan. Dit vakgebied wordt ook wel Theoretische Biologie of Systeembiologie genoemd.\nDe tweede strategie is om te leren omgaan met de enorme variatie in biologische data (rechts in Figuur 1) door deze zorgvuldig te organiseren, omschrijven en te onderzoeken. Op deze manier kunnen we onderscheid maken tussen verschillen die berusten op toeval en daadwerkelijk biologisch relevante inzichten. Dit vakgebied wordt statistiek genoemd, en is ook voor álle biologische gebieden relevant; een goede bioloog kan betrouwbare conclusies trekken.\nVoor zowel modellen als statistiek is het van belang dat je een beetje comfortabel wordt met wiskunde en computers. Beide onderdelen zul je later in de opleiding en tijdens je carrière nog regelmatig tegenkomen. Daarom begint deze cursus met deze basisvaardigheden. Maar vergis je niet: deze cursus is door en voor biologen, en we gaan dus meer doen dan alleen maar rekenen. Van foeragerende mieren tot de vacht van een zebra; er zullen een groot aantal hele interessante biologische systemen voorbij komen!",
    "crumbs": [
      "Cursusinformatie",
      "Inleiding"
    ]
  },
  {
    "objectID": "cursusinformatie.html",
    "href": "cursusinformatie.html",
    "title": "Algemene cursusinformatie",
    "section": "",
    "text": "Docenten\nCursuscoördinator\ndr. Bram van Dijk, b.vandijk@uu.nl Onderzoeksgroep Theoretische Biologie H.R. Kruytgebouw, Padualaan 8, kamer N605\nEerstejaarscoördinator\nChrista Eekhuis MSc., c.a.eekhuis@uu.nl (organisatie, blackboard en niet-inhoudelijke vragen)\nDocenten",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#docenten",
    "href": "cursusinformatie.html#docenten",
    "title": "Algemene cursusinformatie",
    "section": "",
    "text": "dr. Bram van Dijk, b.vandijk@uu.nl  Basisprincipes van R, Basiswiskunde, en Biologische Modellen\ndr. Rutger Hermsen, r.hermsen@uu.nl  Statistiek",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#sec-onderdelen",
    "href": "cursusinformatie.html#sec-onderdelen",
    "title": "Algemene cursusinformatie",
    "section": "Cursusonderdelen",
    "text": "Cursusonderdelen\nDe cursus bestaat uit vier onderdelen:\n\nBasisprincipes van R (twee lesdagen): Gedurende de cursus leer je programmeren met ‘R’. Je leert hoe je R kan gebruiken om berekeningen uit te voeren, grafieken te plotten, data te analyseren, en daar statistiek op toe te passen. Omdat je met R een enorme reeks statistische procedures kan uitvoeren, is het uitgegroeid tot een standaard binnen de biologie. Tijdens de eerste week leer je alleen de basiskennis, en gedurende de cursus kom je in aanraking met concrete voorbeelden van hoe je R kunt gebruiken voor biologisch onderzoek. Later kom je R bovendien weer tegen in vele andere cursussen binnen de opleiding.\nBasiswiskunde (twee lesdagen): Iedere bioloog heeft wiskunde nodig. Tijdens het eerste deel van de cursus frissen we deze basiskennis op. Net als bij het onderdeel ‘R’, bouwen we in kleine stapjes door op de kennis die je in deze week opdoet.\nBiologische Modellen (vier weken): Dit deel van de cursus gaat over het modelleren van biologische systemen. Je leert waarom biologie modellen nodig heeft, wat een model is, en hoe je met simpele wiskunde of computersimulaties inzicht kan krijgen in biologische processen. Tijdens dit onderdeel van de cursus voer je in een groepje een kort project uit, en schrijf je hierover een kort verslag.\nStatistiek (vier weken): In dit onderdeel leer je methoden en technieken voor het verzamelen, bewerken, interpreteren, en presenteren van gegevens.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#leerdoelen",
    "href": "cursusinformatie.html#leerdoelen",
    "title": "Algemene cursusinformatie",
    "section": "Leerdoelen",
    "text": "Leerdoelen\nAlgemene leerdoelen:\n\nDe student kent de grondbeginselen van programmeren met R\nDe student kan creatief, kritisch, en procesmatig denken en werken\nDe student is in staat om goede afspraken te maken bij het starten van een samenwerking\nDe student kan wiskunde en computersimulaties gebruiken om biologische vragen te beantwoorden\nDe student kan data kritisch analyseren en betrouwbare conclusies trekken\n\nBasisprincipes van R:\n\nVoorbeelden van verschillende variabelen in R benoemen\nVoorbeelden van verschillende datastructuren in R benoemen\nR-scripts kunnen lezen en de uitkomst interpreteren\nZelf scripts schrijven om eenvoudige berekeningen uit te voeren\n\nBasiswiskunde:\n\nVergelijkingen oplossen (algebra)\nRekenen met breuken\nRekenen met exponenten en logaritmen\nAfgeleiden bepalen van eenvoudige functies\nAsymptoten en limieten bepalen\nFuncties schetsen\n\nBiologische modellen:\n\nUitleggen waarom modellen essentieel zijn binnen de biologie\nVoorbeelden geven van verschillende typen modellen\nAannames benoemen die bij een bepaald model komen kijken\nBiologische vraagstukken koppelen aan een geschikt type model\nWiskundige modellen van biologische systemen lezen, begrijpen, en interpreteren in termen van biologische inzichten\nUitleggen hoe een verandering van parameters kan leiden tot fundamenteel ander gedrag van een systeem\nUitleggen wat emergente eigenschappen zijn, en voorbeelden geven van modellen met emergente eigenschappen\n\nStatistiek:\n\nAan het onderdeel Statistiek wordt momenteel nog gewerkt. De leerdoelen kun je binnenkort hier zien.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#vaardigheden",
    "href": "cursusinformatie.html#vaardigheden",
    "title": "Algemene cursusinformatie",
    "section": "Vaardigheden",
    "text": "Vaardigheden\nJe werkt in deze cursus aan de volgende vaardigheden:\n\nCreatief, kritisch, en probleemoplossend denken en werken\nProgrammeren met R in de programmeeromgeving Rstudio\nData analyseren en beschrijven\nSamenwerken aan een kort (theoretisch) onderzoeksproject\nInzichten uit een model kort en bondig omschrijven in een verslag\n\n\n   \nSymbolen voor (van links naar rechts) de vaardigheden “kritisch denken”, “omgaan met data”, “samenwerken” en “schrijven” zoals vastgesteld door de Bachelor opleiding Biologie aan de Universiteit Utrecht.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#de-belangrijkste-tip",
    "href": "cursusinformatie.html#de-belangrijkste-tip",
    "title": "Algemene cursusinformatie",
    "section": "De belangrijkste tip",
    "text": "De belangrijkste tip\nHet is van groot belang dat je dit vak vanaf het begin bijhoudt. De eerste twee weken zijn zo voorbij, en dan is al de eerste deeltoets. Daarna bouwen we voort op deze kennis in ‘Biologische Modellen’, en is er geen tijd voor een inhaalslag! Ieder hoorcollege bouwt voort op het vorige, dus als je deze niet bijhoudt is het al snel lastig te volgen. Het is onze ervaring dat studenten die de stof goed bijhouden deze cursus goed af kunnen ronden, zelfs als de stof door hen als pittig wordt ervaren.\nMocht je problemen ondervinden, neem dan vooral contact op met Christa en/of de studieadviseurs.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#toetsing",
    "href": "cursusinformatie.html#toetsing",
    "title": "Algemene cursusinformatie",
    "section": "Toetsing",
    "text": "Toetsing\nZoals bovengenoemd bestaat deze cursus uit vier onderdelen (zie Cursusonderdelen). De beoordeling is verdeeld over drie toetsen en een verslag:\n\n\n\nEvaluatie\nBeschrijving\nWeging\n\n\n\n\nDeeltoets I\nBasisprincipes van R en Basiswiskunde\n20%\n\n\nDeeltoets II\nBiologische Modellen\n35%\n\n\nVerslag\nMini-project tijdens ‘Biologische Modellen’\n10%\n\n\nDeeltoets III\nStatistiek\n35%\n\n\n\nVoor de drie deeltoetsen moet minimaal een 5 gehaald worden. Het eindcijfer moet minimaal een 5,5 zijn. Om een eindcijfer te krijgen moet het verslag ingeleverd zijn, en mag niet meer dan 25% van de werkcolleges zijn gemist. Voldoe je hier niet aan, dan mag je niet herkansen en zul je volgend jaar het vak volledig opnieuw moeten volgen.\nVoor studenten die mogen herkansen wordt in één zitting een herkansingsmoment aangeboden. Tijdens dit herkansingsmoment kunnen alle deeltoetsen waarvan het cijfer lager is dan een 5,5 worden herkanst. Het verslag kan niet worden herkanst. Van de onderdelen die niet herkanst hoeven of kunnen worden blijft het cijfer staan.\nIn lijn met de OER mag er alleen worden herkanst als het eindcijfer tussen de 4,0 en 5,5 is. Cijfers worden ten allen tijden op 1 decimaal afgerond.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#werkvormen",
    "href": "cursusinformatie.html#werkvormen",
    "title": "Algemene cursusinformatie",
    "section": "Werkvormen",
    "text": "Werkvormen\nIedere week zijn er meerdere fysieke hoorcolleges. Hoorcolleges worden zoveel mogelijk opgenomen, maar technische storing zijn altijd mogelijk. Als je zeker wilt weten dat je niets mist, kun je het best ervoor zorgen dat je er bent!\nWerkcolleges vinden plaats na de hoorcolleges. Tijdens deze werkcolleges werk je met de computer en met pen en papier om te oefenen met de stof. De werkcolleges gaan over de stof van het hoorcollege; we gaan ervan uit dat je de hoorcolleges hebt bijgewoond.\nTijdens het onderdeel ‘Biologische Modellen’ voer je in groepen van 3 of 4 studenten een mini-project uit met behulp van het Rscript Grind.R en een online computer-simulatie. Over dit mini-project schrijf je gezamenlijk een kort verslag. De werkcolleges tijdens deze week hebben doelbewust minder vragen, zodat je ook tijdens deze werkcolleges met je studiegenoten aan het mini-project en het verslag kan werken, en hulp van assistenten kan vragen. Aan het eind van week 5 lever je dit verslag via Blackboard in.\nTot slot is er een aanzienlijk deel zelfstudie. De hoor- en werkcolleges nemen samen steeds een dagdeel in beslag, wat betekent dat je dinsdag- en donderdag middag zelf in kan richten. Dat wil niet zeggen dat je deze middagen helemaal vol hoeft te plannen (af en toe willen we ook wat “rust en ruimte”), maar probeer deze tijd te gebruiken om bij te blijven met de stof! Als je dit niet doet, moet je wellicht vlak voor de toets veel te hard werken, en dat is zeker niet nodig.\nJe vindt hier een studieplanning.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#groepsindeling",
    "href": "cursusinformatie.html#groepsindeling",
    "title": "Algemene cursusinformatie",
    "section": "Groepsindeling",
    "text": "Groepsindeling\nDe deelnemers aan deze cursus zijn onderverdeeld in groepen. In MyTimetable zie je in welke groep jij bent ingedeeld en wanneer en waar jouw werkcolleges plaatsvinden.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#teams",
    "href": "cursusinformatie.html#teams",
    "title": "Algemene cursusinformatie",
    "section": "Teams",
    "text": "Teams\nVoor Kwantitatieve Biologie is een team aangemaakt in Microsoft Teams. Je kunt je als volgt aanmelden:\n\nOpen MS. Teams\nKies in het menu aan de linkerkant het icoon “Teams”\nKlik linksonder op het scherm (of, afhankelijk van de versie van Teams, rechtsboven), op de knop “Join or create a team”\nZoek de tegel met de tekst “Join a team with a code”\nVul in dit veld de volgende code in: wv540vy\nKies “Join team”\n\nTeams wordt niet gebruikt om de hoorcolleges te live-streamen. Als je echter vragen hebt aan de docenten, student-assistenten, of aan je mede-studenten, dan is het zeer nuttig om dit op Teams (kanaal Praktische vragen) te delen, zodat iedereen ervan kan profiteren.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#blackboard",
    "href": "cursusinformatie.html#blackboard",
    "title": "Algemene cursusinformatie",
    "section": "Blackboard",
    "text": "Blackboard\nNaast Microsoft Teams maken we gebruik van Blackboard. Bestanden, (deel)cijfers, en aankondigen, worden via Blackboard gedeeld.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#studiematerialen",
    "href": "cursusinformatie.html#studiematerialen",
    "title": "Algemene cursusinformatie",
    "section": "Studiematerialen",
    "text": "Studiematerialen\nTijdens de cursus gebruiken we alleen de inhoud van dit (online) cursusboek, wat is voortgekomen met ondersteuning van het Facultair Utrechts Stimuleringsfonds Onderwijs (fUSO, 2e call 2024). Dankzij dit nieuwe cursusboek kunnen we meer interactief materiaal gebruiken en eenvoudiger R-code met jullie delen. Ook is het mogelijk dit boek printer-vriendelijk af te drukken voor eigen gebruik, of op te slaan als PDF.\nHoewel het interactieve boek heel handig is, raden we alsnog sterk aan om altijd pen en papier bij de hand te hebben bij deze cursus. Het is namelijk onze ervaring dat, als studenten meeschrijven en overzichten van het materiaal schetsen voor henzelf, dit hun cijfer zeker ten goede komt. Bovendien mag je naar iedere toets één volgeschreven A4tje meenemen (voor en achterkant, maar niet geprint!). Als je dus goed meedoet, kun je alvast nadenken wat je op je eigen spiekbriefje gaat zetten ;)",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#aanwezigheidsplicht",
    "href": "cursusinformatie.html#aanwezigheidsplicht",
    "title": "Algemene cursusinformatie",
    "section": "Aanwezigheidsplicht",
    "text": "Aanwezigheidsplicht\nDe docenten uit het eerste jaar Biologie weten uit ervaring dat het bijwonen van werkcolleges essentieel is om de vakken te halen. Deze cursus is geen uitzondering: het volgen van de werkcolleges is onontbeerlijk voor voldoende begrip van de stof. Daarom is er een aanwezigheidsplicht voor de werkcolleges.\nWe begrijpen tegelijkertijd dat er situaties zijn waardoor je een werkcollege moet missen (ziekte of andere overmacht). Conform de afgesproken norm voor de eerstejaars Biologie vakken, mag je (indien afgemeld) 25% van de werkcolleges missen, wat met de huidige studieplanning neerkomt op hoogstens 7 werkcolleges. Je moet je dan wel even afmelden via dit formulier. Er is voor het missen van een enkel werkcollege geen vervangende opdracht: het is veel belangrijker dat je de stof zo snel mogelijk inhaalt!\nAls je meer dan 25% van de werkcolleges mist, kun je niet herkansen. Als je dan één van de toetsen niet haalt, of niet gemiddeld hoger dan een 5,5 hebt, zul je het volledige vak volgend jaar opnieuw moeten volgen. Als je gedurende de cursus merkt dat je om een goede reden wellicht teveel werkcolleges gaat missen, neem dan contact op met de studieadviseurs (als het bijvoorbeeld door ziekteverzuim komt) of met ons (als je denkt een andere geldige reden hebt om een uitzondering te verdienen).",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "cursusinformatie.html#feedback-en-evaluatie",
    "href": "cursusinformatie.html#feedback-en-evaluatie",
    "title": "Algemene cursusinformatie",
    "section": "Feedback en evaluatie",
    "text": "Feedback en evaluatie\nDe docenten en student-assistenten doen natuurlijk hun uiterste best om een uitstekende cursus voor je te verzorgen. Heb je toch opmerkingen, aanmerkingen, kritiek of suggesties, dan horen we die heel graag. Als iedereen een kritische maar constructieve houding aanneemt, dan kunnen we de cursus jaar op jaar in goede sfeer verbeteren. Daarom stellen we het zeer op prijs als je na afloop van de cursus de Caracal-enquête invult.",
    "crumbs": [
      "Cursusinformatie",
      "Algemene cursusinformatie"
    ]
  },
  {
    "objectID": "planning.html",
    "href": "planning.html",
    "title": "Studieplanning",
    "section": "",
    "text": "Hieronder staat de (voorlopige) studieplanning voor de cursus. Probeer zo goed mogelijk bij te blijven! De data voor de onderstaande tabel vind je hier. Je kan dit eventueel ook zelf als een spreadsheet in Excel importeren, of als een data frame in R!",
    "crumbs": [
      "Cursusinformatie",
      "Studieplanning"
    ]
  },
  {
    "objectID": "links.html",
    "href": "links.html",
    "title": "Handige links",
    "section": "",
    "text": "Rooster\nAls je wil weten welke stof behandeld gaat worden, bekijk dan de studieplanner op deze website. Als je wil weten waar je moet zijn, kijk dan op MyTimeTable.",
    "crumbs": [
      "Cursusinformatie",
      "Handige links"
    ]
  },
  {
    "objectID": "links.html#materiaal",
    "href": "links.html#materiaal",
    "title": "Handige links",
    "section": "Materiaal",
    "text": "Materiaal\nDe opgenomen colleges vind je hier. Als er geen technische storingen zijn, worden alle colleges opgenomen.\nDe PDFs van de slides staan hier. We proberen deze vóór het college online te zetten. Tijdens de colleges schrijven we vaak ook op de slides (met een tablet). De PDF met deze extra aantekeningen staan spoedig na het college in dezelfde map.",
    "crumbs": [
      "Cursusinformatie",
      "Handige links"
    ]
  },
  {
    "objectID": "links.html#werkcolleges",
    "href": "links.html#werkcolleges",
    "title": "Handige links",
    "section": "Werkcolleges",
    "text": "Werkcolleges\nZorg dat je hier afmeldt als je een werkcollege moet missen. Je mag op deze manier 7 werkcolleges missen. Mis je er (zonder geldige reden) meer, dan krijg je geen eindcijfer, en zul je het volledige vak volgend jaar opnieuw moeten volgen.",
    "crumbs": [
      "Cursusinformatie",
      "Handige links"
    ]
  },
  {
    "objectID": "links.html#andere-links",
    "href": "links.html#andere-links",
    "title": "Handige links",
    "section": "Andere links",
    "text": "Andere links\nLog in op Caracal op toegang te krijgen tot de beschikbare evaluaties. We stellen je mening zeer op prijs!\nCursusplanner pagina van deze cursus",
    "crumbs": [
      "Cursusinformatie",
      "Handige links"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html",
    "href": "Programmeren/introductie_R.html",
    "title": "1  Introductie en installatie",
    "section": "",
    "text": "1.1 Beginnen met Rstudio\nEr bestaan heel veel verschillende programmeertalen. Misschien heb je weleens gehoord van Python, C, of Javascript. Het analyseren van grote datasets wordt door biologen echter veelal in de programmeertaal R gedaan, omdat deze makkelijk te installeren is en door het grote aantal gebruikers er op internet veel hulp te vinden is. Hiervoor gebruiken we het programma Rstudio, waarin we op een georganiseerde manier met R-code kunnen werken. Maar eerst moeten we wel nog even R zelf installeren.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#r-zelf-installeren",
    "href": "Programmeren/introductie_R.html#r-zelf-installeren",
    "title": "1  Introductie en installatie",
    "section": "1.2 R zelf installeren",
    "text": "1.2 R zelf installeren\nR kun je eenvoudig installeren. Het is te vinden op de CRAN website, en de instructies voor Mac en Windows gebruikers zijn daar ook te vinden:\n\nWindows-gebruikers: ga naar “Download R for Windows”, klik op de link “base” en vervolgens op de link “Download R x.x.x for Windows” om het installatiebestand te downloaden. Open het gedownloade .exe bestand en volg de instructies om R te installeren.\nMac-gebruikers: “Download R for (Mac) OS X”. Download het juiste installatiebestand voor jouw macOS-versie (let op: als je een oudere Mac gebruikt moet je de “Intel Mac” versie downloaden). Open het .pkg bestand en volg de instructies.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#r-studio-installeren",
    "href": "Programmeren/introductie_R.html#r-studio-installeren",
    "title": "1  Introductie en installatie",
    "section": "1.3 R-studio installeren",
    "text": "1.3 R-studio installeren\nNadat je R geïnstalleerd hebt, kun je Rstudio installeren. Deze downloaden we vanaf de website van Rstudio. Deze website legt ook uit dat je wel eerst R moet installeren, maar dat hebben we al gedaan. We kunnen dus meteen naar stap 2: Install Rstudio. De website herkent vanzelf welk besturingssysteem je gebruikt, dus hoef je het alleen nog maar te installeren:\n\nWindows-gebruikers: volg de instructies van de installatie-wizard\nMac-gebruiker: open de .dmg en sleep “Rstudio” naar je Applications folder\n\nNu kun je Rstudio opstarten, en zou alles moeten werken1",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#je-eerste-script",
    "href": "Programmeren/introductie_R.html#je-eerste-script",
    "title": "1  Introductie en installatie",
    "section": "1.4 Je eerste script",
    "text": "1.4 Je eerste script\nNu je Rstudio hebt opgestart, gaan we eerst een nieuw script aanmaken. Ga hiervoor naar File -&gt; New file -&gt; R script (Ctrl/Cmd+Shift+N). Nu opent zich een nieuw venster, met daar in een script zonder naam. Sla dit lege script op en geef het script een logische naam (in plaats van de standaardnaam ‘Untitled1’). Zo kan je het later makkelijk terug vinden en overschrijf je minder makkelijk per ongeluk je scripts. Maar wat is een script eigenlijk?\nEen script is vergelijkbaar met een recept: het bevat de instructies om een gerecht te koken, maar niet de ingrediënten of het gerecht zelf. De instructies om het gerecht te produceren staan in het zogeheten “plain text” bestandsformaat. Dit betekent dat de tekst geen vetgedrukte woorden, cursief, onderstrepingen, kleuren of speciale lettertypes bevat. Naast een R-script met een set instructies, kan plain tekst ook data beschrijven, bijvoorbeeld met elke regel een observatie. In het geval van een script, bevat elke regel hoogstens één instructie. De code kan regel-per-regel worden uitgevoerd, of in één keer.\nKopieer voor het volgende onderdeel de volgende code naar je eigen script:\n\n1+2\n1+2-3\n1+2-3*4/5",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#script-en-console",
    "href": "Programmeren/introductie_R.html#script-en-console",
    "title": "1  Introductie en installatie",
    "section": "1.5 Script en console",
    "text": "1.5 Script en console\nRstudio is standaard opgedeeld in verschillende vensters (zie Figuur 1.2). Om een regel code uit te voeren, klik je in het script-venster (linksboven) op de desbetreffende regel (niet selecteren, maar gewoon ergens in de regel klikken), en gebruik je de knop Run (de sneltoets hiervoor is Ctrl/Cmd+Enter, wat heel handig is om in je vingers te krijgen!). Als je dit met de eerste regel doet, springt Rstudio door naar de tweede regel. Als je dus nog een keer Ctrl/Cmd+Enter drukt, voert deze de tweede regel code uit, dan de derde regel, etc..\nAls je de eerste regel code uitvoert, zie je in de console (onder het script) het “antwoord” staan: [1] 3. Dit antwoord noemen we in de programmeerwereld meestal de return-value: wat geeft de berekening terug? De [1] geeft aan dat dit de eerste waarde is die de berekening heeft gegeven. Omdat je maar 1 berekening hebt (1+2) gevraagd, is dit dus ook het enige waarde. Later zul je zien dat een berekening ook meerdere waarden terug kan geven. Je kan ook het hele script in één keer uitvoeren door op Source te klikken (of Ctrl/Cmd+Shift+Enter). Als je dit doet, zul je zien dat er regel voor regel antwoord wordt gegeven op de sommetjes.\n\n\n\n\n\n\nFiguur 1.2: Een overzicht van de verschillende vensters in Rstudio\n\n\n\nDe bovenstaande uitleg geeft aan hoe je het script (het “recept”) uit kan voeren, maar vaak wil je even snel iets uitproberen of uitrekenen voordat je het recept helemaal overhoop gooit. Hiervoor kun je direct in de console typen (linksonderin in Figuur 1.2). Als je bijvoorbeeld de berekening 81/250 in de console typt, heb je gauw een antwoord op je vraag maar is je script niet aangepast. De console is dus handig om even gauw wat uit te rekenen, maar let op: dit wordt natuurlijk niet opgeslagen als je het script opslaat!",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#rekenen-met-r",
    "href": "Programmeren/introductie_R.html#rekenen-met-r",
    "title": "1  Introductie en installatie",
    "section": "1.6 Rekenen met R",
    "text": "1.6 Rekenen met R\nZoals je nu misschien begrijpt, is R een geweldig krachtige rekenmachine! In plaats van alles handmatig uit te rekenen of in je grafische rekenmachine in te typen, kunnen we onze eigen R-scripts maken die berekeningen eenvoudig en reproduceerbaar maken. Om dit nog makkelijker te maken, kunnen we gebruik maken van variabelen. Variabelen zijn waarden die we opslaan onder een bepaalde noemer, bijvoorbeeld ‘a’, ‘b’, of ‘c’:\n\n# a, b, en c waardes toekennen (assigning variables)\na &lt;- 1\nb &lt;- 3\nc &lt;- 2.5\n\n# rekenen met a, b, en c\na+b-c # a plus b min c\na*b  # a keer b\na/b  # a gedeeld door b\nb*b  # b keer b\nb^3  # b tot de macht 3 \nsqrt(b) # wortel (square root) van b\n\n# andere manieren om variabelen te definieren\n3 -&gt; d\ne = 2.5\n\n# een uitgebreider sommetje uitrekenen\nd/e+d*(c+d)\n\n# deze som kunnen we ook weer opslaan in een variabele\nuitkomst &lt;- d/e+d*(c+d)",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#sec-environment",
    "href": "Programmeren/introductie_R.html#sec-environment",
    "title": "1  Introductie en installatie",
    "section": "1.7 Comments",
    "text": "1.7 Comments\nIn de bovenstaande code zie je meerdere regels met een hekje (#) ervoor. Alle tekst na een hekje wordt door R genegeerd, zodat we in onze code opmerkingen kunnen plaatsen. Deze opmerkingen heten in het Engels comments. In de code die je te zien krijgt in deze cursus, proberen we zoveel mogelijk comments te plaatsen om uit te leggen hoe de code werkt.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#de-environment",
    "href": "Programmeren/introductie_R.html#de-environment",
    "title": "1  Introductie en installatie",
    "section": "1.8 De “Environment”",
    "text": "1.8 De “Environment”\nVariabelen die je definieert worden opgeslagen in de Environment (rechtsboven in Figuur 1.2). Op dezelfde manier dat een script een soort “recept” is, is de Environment een soort “keukentafel”: hier komen al je ingrediënten te liggen. Alle ingeladen gegevens, berekeningen, en grafieken blijven opgeslagen totdat je Rstudio afsluit. Let op: ook de stapjes die je met de console hebt gedaan komen op deze keukentafel terecht, maar als je wil dat iemand anders het gerecht kan maken moet je zorgen dat deze stapjes ook in het recept (dus het script) staan! Het script is namelijk in veel gevallen het enige wat we zullen opslaan. Zo kunnen we de volgende keer ons script opnieuw uitvoeren, of ons script met andere onderzoekers delen. Nogmaals: als je de volgende keer Rstudio opstart, begin je met een lege Environment. In de kook-analogie begin je dus opnieuw met koken, en begint de keukentafel weer helemaal leeg! Bij het afsluiten van Rstudio krijg je echter de vraag of je de ‘R sessie’ wil opslaan. Als je dit doet, dan laad Rstudio bij het opstarten wél weer de environment in, en wordt je keukentafel dus precies zoals je hem had achtergelaten.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#plotshelp-en-meer",
    "href": "Programmeren/introductie_R.html#plotshelp-en-meer",
    "title": "1  Introductie en installatie",
    "section": "1.9 Plots/Help en meer",
    "text": "1.9 Plots/Help en meer\nHet laatste window in Rstudie (rechtsonderin) wordt voornamelijk gebruikt om grafieken (plots) weer te geven en voor de hulp-functie binnen Rstudio. Er zijn ook nog vele andere tabbladen, maar daar zullen we in deze cursus geen aandacht aan besteden.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#weergave-van-code-en-resultaten",
    "href": "Programmeren/introductie_R.html#weergave-van-code-en-resultaten",
    "title": "1  Introductie en installatie",
    "section": "1.10 Weergave van code en resultaten",
    "text": "1.10 Weergave van code en resultaten\nMet programmeren produceren we code en resultaten. Om dat onderscheid duidelijk te maken, gebruikt dit cursusboek twee verschillende stijlen voor deze onderdelen. R-code ziet er zo uit:\n\n# definieer een waarde voor x en y\nx &lt;- 10\ny &lt;- 9\n# Met 'cat' kunnen we tekst en berekeningen aan elkaar plakken\ncat(\"De som van x en y is:\", x+y, \"en x min y is:\", x-y, \"\\n... einde berekening!\")\n\nDe resultaten van code worden zo weergegeven:\n\n\nDe som van x en y is: 19 en x min y is: 1 \n... einde berekening!\n\n\nSoms staat er ook een stukje code midden in een regel. Dat ziet er zo uit.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#opgaven",
    "href": "Programmeren/introductie_R.html#opgaven",
    "title": "1  Introductie en installatie",
    "section": "1.11 Opgaven",
    "text": "1.11 Opgaven\nOm deze opgaven te maken, moet je eerst Rstudio installeren. Nadat je dat gedaan hebt, en de rest van de informatie op deze pagina hebt begrepen, kun je aan de slag!\n\nOefening 1.1 (Rekenen met R) \nMaak een nieuw (leeg) Rscript in Rstudio, en voer de volgende berekeningen uit:\n\nDefinieer a=2, en reken uit wat \\(a \\cdot a \\cdot a = a^3\\) is.\nDefinieer nu b=9.5 en reken uit wat \\(b^{19}\\) is (let op: je hoeft niet 19 keer b te typen)\nStel je zet eerst 3 stappen naar links (laten we deze afstand \\(a\\) noemen), dan 4 stappen naar voren (laten we deze \\(b\\) noemen), en loopt vervolgens in een rechte lijn terug naar je beginpositie. Schrijf een script met R die uitrekent hoe ver je in totaal hebt gelopen. Zorg dat de uitkomst van je berekening niet in de environment staat, maar slechts in de console wordt weergegeven (met andere woorden, definieer geen nieuwe variabele!).\nBereken nu uit hoever je gelopen zou hebben als je in plaats hiervan 5 stappen naar links en 6 stappen naar boven had gezet. Zorg dit keer dat de uitkomst wel in de environment staat onder de naam “afstand”. Voeg de onderstaande regel code toe aan het eind van je script (hint: er is een knop om de code te kopiëren!). Voer je script uit. Hoeveel stappen heb je gelopen? Sla je script op onder de naam Pythagoras.R.\n\n\nprint(paste('Je hebt', afstand, 'stappen gelopen'))\n\n\n\nOefening 1.2 (Meer rekenen met R) \nMaak deze vraag direct nadat je de vorige vraagt hebt gedaan (zonder Rstudio opnieuw op te starten). Maak wel een nieuw (leeg) Rscript aan.\n\nBereken met R wat a+10 is. Bereken ook d+10 uit. Leg het verschil in de uitkomsten uit.\nGebruik de console (niet je script!) om \\(d\\) op 0 te zetten. Bereken nu de breuk \\(a \\over d\\) in de console. In de console zal de uitkomst dan weergegeven worden na [1], wat betekent dat dit de eerste (in dit geval, de enige) uitkomst is (een breuk heeft immers maar één waarde). Wat is de uitkomst van deze breuk?\nZet nu \\(d\\) op 0.001. Bereken wederom de breuk \\(a \\over d\\), en de breuk \\(a \\over d^2\\). Leg aan de hand van deze uitkomsten je antwoord in b. uit.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R.html#footnotes",
    "href": "Programmeren/introductie_R.html#footnotes",
    "title": "1  Introductie en installatie",
    "section": "",
    "text": "In een enkel geval kan Rstudio de installatie van R niet automatisch vinden. Ga dan naar ‘Tools’ &gt; ‘Global options’, en dan naar het tabblad ‘General’. Hier kan je handmatig instellen waar R geïnstalleerd staat. Vraag waar nodig hulp van je student-assistent (of ChatGPT ;])↩︎",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introductie en installatie</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html",
    "href": "Programmeren/introductie_R2.html",
    "title": "2  Programmeren in R",
    "section": "",
    "text": "2.1 Typen variabelen\nWe hebben in het eerste onderdeel al een beetje kennis gemaakt met variabelen, door letters bepaalde numerieke waarden te geven (a &lt;- 2, b &lt;- 9.5, etc). Maar je kan in variabelen niet alleen nummers opslaan, maar ook een heleboel andere type gegevens. De meest belangrijke variabelen zijn:",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#sec-type-variabelen-R",
    "href": "Programmeren/introductie_R2.html#sec-type-variabelen-R",
    "title": "2  Programmeren in R",
    "section": "",
    "text": "Numeric - 1, 2, 3, maar ook 2.158196 zijn numeric\nLogical - TRUE en FALSE, ook wel T/F of 1/0\nCharacter (of: string) - \"a\", \"Hoi\", \"ATGCTAT\", of \"Dit is een zin\"",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#geen-appels-met-peren-vergelijken",
    "href": "Programmeren/introductie_R2.html#geen-appels-met-peren-vergelijken",
    "title": "2  Programmeren in R",
    "section": "2.2 Geen appels met peren vergelijken",
    "text": "2.2 Geen appels met peren vergelijken\nIn R kun je berekeningen uitvoeren, maar je kan natuurlijk geen appels met peren vergelijken. Bekijk bijvoorbeeld de volgende code:\n\nappels &lt;- 3\nperen &lt;- \"groen\"\nappels + peren\n\nAls je de bovenstaande code probeert uit te voeren, geeft R een foutmelding:\nError in appels + peren : non-numeric argument to binary operator1\nHet is erg prettig dat R deze foutmelding geeft. Hoewel dit een overduidelijk onzinnige som is, kan het ook zijn dat je met de beste intenties een foutje maakt!\nWe moeten dus wel dezelfde type dingen bij elkaar optellen. Echter kan je natuurlijk ook niet alles bij elkaar optellen. Als we bijvoorbeeld zowel appels als peren een kleur geven (rood en groen), krijgen we dezelfde error:\n\nappels &lt;- \"rood\"\nperen &lt;- \"groen\"\nappels + peren\n\nError in appels + peren : non-numeric argument to binary operator\nJe kunt woorden namelijk helemaal niet optellen. Wel zou je natuurlijk de totale lengte van de woorden bij elkaar op kunnen tellen (4+5=9), of de woorden aan elkaar kunnen plakken waardoor we \"rood groen\" krijgen2.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#condities",
    "href": "Programmeren/introductie_R2.html#condities",
    "title": "2  Programmeren in R",
    "section": "2.3 Condities",
    "text": "2.3 Condities\nVaak is het handig om in een script te controleren of aan een bepaalde voorwaarde wordt voldaan. Hiervoor kun je if, else, en else if gebruiken. Ook kunnen we met print() een resultaat weergeven in de console3. Als we deze dingen combineren, krijgen we:\n\nleeftijd_student &lt;- sample(16:19,1) # genereer willekeurige leeftijd tussen 16 en 19\nif(leeftijd_student &gt;= 18){\n  print(\"Student is volwassen\")\n} else{\n  print(\"Student is niet volwassen\")\n}\n\nOm voorwaarden te controleren, gebruik je zogeheten conditionals, die teruggeven of iets waar (TRUE) of niet waar (FALSE) is. De gekrulde haakjes { en } geven de zogenoemde scope aan. Alles wat tussen deze gekrulde haakjes staat wordt alleen uitgevoerd als aan de conditie wordt voldaan. In het voorbeeld hierboven gebruiken we &gt;= (groter dan of gelijk aan) om te controleren of de student minstens 18 jaar oud is. Veelgebruikte conditionals zijn:\n\na == b : TRUE als a gelijk is aan b\na != b : TRUE als a niet gelijk is aan b\na &gt; b : TRUE als a is groter is dan b\na &lt; b : TRUE als a is kleiner is dan b\na &gt;= b : TRUE als a is groter is dan of gelijk is aan b\na &lt;= b : TRUE als a is kleiner is dan of gelijk is aan b\n\nDaarnaast kun je eventueel meerdere condities combineren:\n\na==b & b!=c : TRUE als a gelijk is aan b én b niet gelijk is aan c\na&lt;b | b&gt;c : TRUE als a kleiner is dan b óf b groter is dan c\n\nAls laatste kun je nog veel meer combinaties controleren door if en else in elkaars scope terug te laten komen (dit wordt ook wel het “nesten” van condities genoemd). Zo kunnen we binnen het ene if statement weer andere condities controleren. Als we bijvoorbeeld twee dobbelsteenworpen simuleren, kunnen we precies controleren welke dobbelsteen hoger is dan 4:\n\nd1 &lt;- sample(1:6,1) # dobbelsteen 1\nd2 &lt;- sample(1:6,1) # dobbelsteen 2\n\nif (d1 &gt; 4) {\n  if (d2 &gt; 4) {\n    print(\"d1 en d2 zijn hoger dan 4\")\n  } else {\n    print(\"d1 is hoger dan 4, maar d2 niet\")\n  }\n} else if(d2 &gt; 4) {\n  print(\"d1 is niet hoger dan 4, maar d2 wel\")\n} \n\nLet op: als je de bovenstaande code goed leest, zie je dat er helemaal niets wordt geprint als geen van beide dobbelstenen groter dan 4 is.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#data-structuren",
    "href": "Programmeren/introductie_R2.html#data-structuren",
    "title": "2  Programmeren in R",
    "section": "2.4 Data structuren",
    "text": "2.4 Data structuren\nHet is vaak heel handig om je variabelen in lijsten of tabellen op te slaan. Dergelijke lijsten of tabellen worden meestal data structures genoemd. De meest belangrijke data structures in R zijn:\n\nVectors (lijst van elementen van hetzelfde type)\nMatrices (tabel van elementen van hetzelfde type)\nDataframes (tabel waarin elke kolom een ander type data kan zijn)\n\n\n\n\n\n\n\nFiguur 2.1: Belangrijkste data structuren in R\n\n\n\n\nVectoren\nOm een vector te maken, kunnen we deze handmatig intypen:\n\nmijnvector &lt;- c(1,2,0.1,-5)\nmijnvector[1] # geeft het eerste getal\nmijnvector[2] # geeft het tweede getal, etc\n\nMaar handmatig getallen invoeren is niet altijd handig. Gelukkig kun je met R een boel lijstjes op een snellere manier automatisch genereren:\n\n1:4                # 1, 2, 3, 4\n5:2                # 5, 4, 3, 2\nrep(2,4)           # 2, 2, 2, 2\nseq(0,4.5,1.5)     # 0.0, 1.5, 3.0, 4.5\nsample(1:6,4)      # 4, 6, 3, 5 (iedere keer anders!)\nsample(letters,4)  # \"f\", \"j\", \"o\", \"y\" (iedere keer anders!)\nrunif(2)           # 0.9965360 0.8978062 (iedere keer anders!)\n\nDe laatste vijf regels van het bovenstaande script zijn voorbeelden van “functies”. Een functie is een herhaalbaar blokje code die je aanroept met de naam (rep, seq, sample), gevolgd door haakjes met daartussen eventuele argumenten. De functie zet deze argumenten om in een zogeheete return-waarde, wat bijvoorbeeld een getal of een lijst getallen is. Je leert meer over functies in het onderdeel Paragraaf 2.8.1.\nJe kan met vectoren ook rekenen. Zo kan je bijvoorbeeld twee vectoren bij elkaar optellen, of één en hetzelfde getal bij alle elementen van een vector optellen:\n\n# Rekenen met vectoren\nx &lt;- 1:3           # 1, 2, 3\nx + 10             # 11 12 13\nx + 10             # 11 12 13\ny &lt;- c(1, 10, 4)   # 1 10 4\nx + y              # 2 12  7\nx * y              # 1 20 12\nx + y / 100        # 1.01 2.10 3.04\n(x + y) / 100      # 0.02 0.12 0.07\n\nLet op! Zoals je ziet staat er twee keer x + 10. Hoewel we de eerste keer al 10 bij x hebben opgeteld, is de waarde van x niet aangepast. De tweede keer is het antwoord dus precies hetzelfde, want x is niet veranderd. Als we in plaats hiervan x &lt;- x + 10 hadden gebruikt, zou de waarde van x wel aangepast worden:\n\nx &lt;- x + 10             # x bevat nu 11, 12, 13\nx &lt;- x + 10             # x bevat nu 21, 22, 23\nx &lt;- x / 10             # x bevat nu 2.1, 2.2, 2.3\n\nLet ook op het subtiele verschil tussen de regels x + y / 100 en (x + y) / 100. Net als bij wiskunde gaan haakjes voor delen en vermedigvuldigen, dus het resultaat van deze twee regels is anders. Soms moet je dus goed aangeven in welke volgorde je de berekeninng wil uitvoeren!\nAls laatste is het belangrijk om te weten dat spaties in R meestal niets betekenen (dit geldt voor de meeste programmeertalen). Zodoende is x&lt;-x+10 hetzelfde als x &lt;- x + 10, en rep(2,1) hetzelfde als rep(2, 1). Een paar uitzonderingen is dat spaties in het pijltje om variabele toe te kennen niet kunnen (x &lt; - 1 werkt niet). Ook doen spaties in character strings er wel toe, want daar telt spatie als een karakter. Zodoende zijn \"appels\", \" appels\" en \"appels \" niet hetzelfde:\n\n\"appels\" == \"appels\"  # TRUE\n\"appels\" == \"appels \" # FALSE\n\"appels\" == \" appels\" # FALSE\n\nDe bovenstaande situatie lijkt misschien een beetje vreemd, maar komt vaak voor omdat er per ongeluk ergens een spatie in je data staat (een spatie valt niet zo snel op!). Het is dus goed om hierop attent te blijven.\n\n\nMatrices\nMatrices in R kun je maken door de functie matrix aan te roepen, die je waarden van de matrix en het aantal rijen als argumenten geeft:\n\nmatrix(c(1, 2, 3, 4,5, 6, 7, 8, 9), nrow=3)\nmatrix(c(1, 2, 3, 4,5, 6, 7, 8, 9), nrow=3, byrow=T)\n\nZoals je ziet zijn er geen comments geplaatst bij deze twee regels. Voer de bovenstaande code zelf uit, en kijk naar de verschillende uitkomsten van de eerste en de tweede regel. Je kan de matrix ook vullen met andere waarden:\n\nkansen_matrix &lt;- matrix(runif(9), nrow=3) # willekeurige getallen tussen 0 en 1\npercentage_matrix &lt;- kansen_matrix*100   # de kansen matrix keer 100, dus percentages\nletter_matrix &lt;- matrix(sample(letters,9), nrow=3) # willekeurige letters\n\n\n\nData frames\nDe laatste (en voor biologen meest belangrijke) data structuur in R is de data frame. In een dataframe bevat elke kolom een ander gegeven (naam, leeftijd, haarkleur), en is elke rij een apart observatie. Een dergelijke structuur is heel handig om wetenschappelijke data te verzamelen. Ook deze kun je weer handmatig invoeren:\n\nbiologen &lt;- data.frame(naam=c(\"Lina\",\"Yassin\",\"Bram\"),\n                       leeftijd=c(19,18,80), \n                       haarkleur=c(\"Blauw\",\"Groen\", \"Paars\"))\n\n\n\n\n\n\n\nAls je deze dataset wil bekijken in Rstudio, kun je View(biologen) typen. Dit opent een tabblad waarin je de data kan verkennen en sorteren (voor grotere datasets is dit natuurlijk erg handig!).\nHet is natuurlijk meestal niet handig om handmatig data frames in te typen in R. In plaats daarvan kun je grote datasets vaak opslaan of downloaden in een groot tekstbestand, bijvoorbeeld in een comma-seperated-value (csv) bestand. Een voorbeeld van de eerste paar regels van een dergelijk csv-bestand, zie je hieronder.\ndatapunt,week,maand,jaar,positieve_testen\n1,1,10,2021,221\n2,2,10,2021,271\n3,3,10,2021,344\n4,4,10,2021,507\n5,5,10,2021,514\nAls je een dergelijk tekstbestand op je computer hebt opgeslagen, kun je deze inlezen met de functie read.table of read.csv:\n\ncovid_data &lt;- read.csv(\"E:/Files/covid.csv\") # waar het bestand staat\nhead(covid_data) # bekijk de eerste 6 rijen\nView(covid_data) # bekijk de hele tabel in Rstudio",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#indexing",
    "href": "Programmeren/introductie_R2.html#indexing",
    "title": "2  Programmeren in R",
    "section": "2.5 Indexing",
    "text": "2.5 Indexing\nNu je weet hoe je tabellen in kan lezen, is het belangrijk om te leren over “indexing”. Indexing is het selecteren van specifieke waarden uit een vector, matrix, of dataframe. Dit doe je door de positie (index) van deze elementen tussen vierkante haakjes aan te geven:\n\njaartallen &lt;- 2009:2024         # Jaren dat ik biologie \"studeer\"\njaartallen[6:9]                 # 2014 2015 2016 2017\n\nm &lt;- matrix(runif(9),nrow=3)    # Willekeurige getallen in een matrix\nm[1,2]    # rij 1, kolom 2\nm[1,]     # rij 1 volledig\nm[,2]     # kolom 2 volledig\nm[1:2,3]  # van rij 1 t/m 2, alleen de 3e kolom\n\nbiologen &lt;- data.frame(naam=c(\"Lina\",\"Yassin\",\"Bram\"),\n                       leeftijd=c(19,18,80), \n                       haarkleur=c(\"Blauw\",\"Groen\", \"Paars\"))\nbiologen[1,2] # eerste rij, tweede kolom (leeftijd: 19)\n\nOmdat in data frames de kolommen namen hebben, kun je ook deze gebruiken om specifieke datapunten te selecteren:\n\nbiologen[1,\"leeftijd\"] #identiek aan biologen[1,2], maar het is wat duidelijker wat je selecteert\n\nJe kunt met dataframes ook met het dollar-teken een gehele kolom opvragen, een kolom bewerken, of een kolom toevoegen:\n\nbiologen$leeftijd\nbiologen$leeftijd &lt;- biologen$leeftijd + 1  # De leeftijd van alle biologen wordt met 1 verhoogd\nbiologen$rol &lt;- c(\"student\",\"assistent\",\"docent\") # Een nieuwe kolom genaamd 'rol'",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#selecteren-uit-een-dataframe",
    "href": "Programmeren/introductie_R2.html#selecteren-uit-een-dataframe",
    "title": "2  Programmeren in R",
    "section": "2.6 Selecteren uit een dataframe",
    "text": "2.6 Selecteren uit een dataframe\nJe kunt ook bovengenoemde conditionals (groter dan, gelijk aan, etc.) gebruiken op vectoren. Dit geeft dan een vector van dezelfde lengte, met voor elke positie of aan de conditie voldaan wordt. Als we bijvoorbeeld de zelf-gemaakte biologen-dataframe nog eens bekijken, dan kunnen we een vector maken die voor de leeftijd-kolom zegt wie er jonger is dan 20:\n\nbiologen &lt;- data.frame(naam=c(\"Lina\",\"Yassin\",\"Bram\"),\n                       leeftijd=c(19,18,80), \n                       haarkleur=c(\"Blauw\",\"Groen\", \"Paars\")) \n\njong &lt;- biologen$leeftijd &lt; 20 # geeft TRUE TRUE FALSE\n\nMet deze vector kunnen we dan een selectie maken uit een dataframe. Weet je nog dat we hierboven zeiden dat je uit dataframe kan selecteren door [rijen,kolommen] aan te geven? Met onze nieuwe jong-vector, kunnen we dus de juiste rijen pakken:\n\nbiologen[jong,] # alleen biologen jonger dan 20\n\nDit is natuurlijk vooral handig als je een grotere dataset hebt, zoals de bovengenoemde covid-data. Met een dergelijke dataset is het niet handig om handmatig aan te geven welke rijen je wil behouden!",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#files-paden-en-de-working-directory",
    "href": "Programmeren/introductie_R2.html#files-paden-en-de-working-directory",
    "title": "2  Programmeren in R",
    "section": "2.7 Files, paden, en de ‘working directory’",
    "text": "2.7 Files, paden, en de ‘working directory’\nOm (zoals hierboven) een bestand in te kunnen lezen, moet Rstudio wel weten waar het bestand staat. Op computers staan alle bestanden in een hierachische structuur (zie bijvoorbeeld onderstaande Figuur). Hoewel je misschien gewend bent om door deze structuur van “mappen” te klikken met de muis, moet je in een script altijd precies vertellen waar het bestand staat. Standaard zoekt Rstudio vaak in de home directory van je besturingsysteem (/Users/Naam in MacOs, C:/Users/UserName/Documents in Windows). De directory vanuit waar Rstudio naar het bestand zoekt, heet de Working Directory (rood omlijnd in de figuur). Door de Working Directory goed in te stellen, hoef je niet elke keer een heel lang pad (dit heet het absolute pad) naar het bestand in te typen, maar kun je met een korter pad omschrijven waar het bestand staat (dit heet het relatieve pad). Vaak is het dus handig om je Working Directory aan te passen naar dezelfde map waar je het script hebt opgeslagen, zodat je alle data, scripts, en grafieken een beetje bij elkaar kan houden. Dit kan je doen door, nadat je je script ergens hebt opgeslagen, te navigeren naar Session &gt; Set Working Directory &gt; To Source File Location, of door rechts te klikken op je script-naam bovenin het script-venster, en Set Working Directory te kiezen.\n\n\n\n\n\n\nFiguur 2.2: Om te programmeren moet je weten waar bestanden (files) staan opgeslagen. Je kunt deze files vinden door het juiste pad (paths) te typens",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#functies",
    "href": "Programmeren/introductie_R2.html#functies",
    "title": "2  Programmeren in R",
    "section": "2.8 Functies",
    "text": "2.8 Functies\n\nVoorbeelden van functies en ‘help’\nIn het onderdeel Paragraaf 2.4.1 heb je al een aantal voorbeelden gezien van functies, herhaalbare blokjes code die je gemakkelijk kan aanroepen. Functies hebben een input (waarde(n) die je meegeeft als zogeheten argumenten), en output (waarde(n) die het terug geeft, de return-waarde). Er bestaan standaard in R een heleboel functies, waarvan je een aantal in deze cursus nog veel zal tegenkomen:\n\nread.csv, leest comma-separated-values bestand in als dataframe\nprint of cat, geeft iets (variabelen of tekst) weer in de console\nplot, om data te plotten in een grafiek\nlength geeft de lengte van een vector\nmean, gemiddelde van een vector\nsd, standaarddeviatie van een vector\nsum, som van een vector\nmin geeft de kleinste waarde in een vector\nmax geeft de grootste waarde in een vector\nsort, sorteert een vector\n\nAls je graag meer wil weten over hoe een functie werkt, kun je de naam van de functie typen met een ? ervoor:\n\n?mean\n\nDit geeft extra uitleg over deze functie in het “Help” venster (rechtsonderin Figuur 1.2).\n\n\nZelf functies maken\nJe kan ook zelf functies maken. Dit is handig als je meerdere keren dezelfde specifieke berekening wil uitvoeren. Je moet hiervoor aangeven wat de argumenten zijn, welke berekening op basis van deze argumenten wordt uitgevoerd, en wat er door de functie wordt teruggegeven (de return-waarde). Hier is een voorbeeld:\n\n# Definitie van de functie\nsom_kwadraten &lt;- function(a, b) {\n  resultaat &lt;- a^2 + b^2\n  return(resultaat)\n}\n\n# Voorbeeld gebruik van de functie\nsom_kwadraten(1,2)            # 5\nsom_kwadraten(3, 4)           # 25\nsom_kwadraten(0.5, 0.1)       # 0.26\n\nBij het definiëren van de functie geven de gekrulde haken aan wat de zogeheten scope van de functie is: dit blokje code behoort alleen deze functie toe. Je ziet deze scopes ook terug wanneer je op bepaalde voorwaarden gaat toetsen, als je ‘loops’ gaat gebruiken, wat in het volgende deel uitgelegd wordt.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#loops",
    "href": "Programmeren/introductie_R2.html#loops",
    "title": "2  Programmeren in R",
    "section": "2.9 Loops",
    "text": "2.9 Loops\nHoewel functies het makkelijker maken om dezelfde berekening meerdere keren uit te voeren, wat nu als je een functie 100 keer wil aanroepen? Hebben we dan 100 regels nodig? Het antwoord is nee, want elke programmeertaal (dus ook R) heeft manieren om stukken code gemakkelijk te herhalen. In R bestaan veel verschillende manieren om dit te doen (repeat, apply, while), maar in deze introductie maken we vooral kennis met de meest-gebruikte loop in de programmeer-wereld: de for-loop.\nLaten we bijvoorbeeld de exponentiële afname van paracetamol in het bloed beschrijven met een simpele “simulatie”. Iemand neemt 400 milligram paracetamol in, wat ieder uur (ongeveer) met 70% afneemt:\n\np &lt;- 400 # hoeveelheid paracetamol\nd &lt;- 0.7 # afname (d van decay)\n# Herhaal iets 10 keer, waarbij 'i' steeds met 1 toeneemt\nfor(i in 1:10){\n  p &lt;- p*d\n}\ncat('Na 10 uur is er',p,'milligram paracetamol in het bloed') # 11.299 mg\n\nAan het einde van deze for-loop kunnen we kijken wat de waarde van p is door in de console p te typen.\n&gt; p\n[1] 11.29901\nZoals we eerder hadden besproken, staat de [1] voor het feit dat dit de eerste en enige waarde is die in de variable p is opgeslagen. We hebben nu dus alleen de laatste waarde bewaard. Wellicht willen we echter graag bijhouden hoeveel paracetamol er in elke stap aanwezig was, zodat we dat na onze loop kunnen plotten. Om dit te doen, kunnen we de i als index gebruiken om een vector te vullen:\n\np &lt;- 400 # hoeveelheid paracetamol\nd &lt;- 0.7 # afname (d van decay)\n# Herhaal iets 10 keer, waarbij 'i' steeds met 1 toeneemt\nfor(i in 1:10){\n  p[i+1] &lt;- p[i]*d\n}\nplot(p, type='o')\n\n\n\n\n\n\n\n\nOmdat dit voorbeeld om simpele exponentiele afname gaat, hadden we de bovenstaande berekening ook “in één keer” kunnen uitrekenen door \\(p \\cdot d^{10}\\) uit te rekenen. Laten we dat even controleren:\n\np &lt;- 400 # hoeveelheid paracetamol\nd &lt;- 0.7 # afname (d van decay)\np*d^10 # 11.299 mg, dat klopt dus!\n\nDit antwoord komt inderdaad overeen met onze berekening met de for-loop. Hoewel deze loop dus misschien wat onnodig lijkt, hebben we niet altijd zo’n simpele formule beschikbaar. Bovendien willen we wellicht iets veel specifiekers simuleren, bijvoorbeeld dat de persoon gedurende een periode van 100 uur elke 10 uur opnieuw paracetamol inneemt:\n\np &lt;- 400 # hoeveelheid paracetamol\nd &lt;- 0.7 # afname (d van decay)\n\nfor(i in 1:100){\n  if(i%%10==0){ # is i precies deelbaar door 10?\n    p[i] &lt;- p[i] + 400\n  } \n  p[i+1] &lt;- p[i]*d\n}\nplot(p, type='o')\n\n\n\n\n\n\n\n\nOf dat de persoon met 10% kans elk uur een paracetamol inneemt:\n\np &lt;- 400 # hoeveelheid paracetamol\nd &lt;- 0.7 # afname (d van decay)\n\nfor(i in 1:100){\n  if(runif(1)&lt;0.1){ # is willekeurig getal (tussen 0 en 1) kleiner dan 0.1?\n    p[i] &lt;- p[i] + 400\n  } \n  p[i+1] &lt;- p[i]*d\n}\nplot(p, type='o')",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#grafieken-plotten-met-r",
    "href": "Programmeren/introductie_R2.html#grafieken-plotten-met-r",
    "title": "2  Programmeren in R",
    "section": "2.10 Grafieken plotten met R",
    "text": "2.10 Grafieken plotten met R\nOm de bovenstaande plot van de paracetamol afname iets vollediger en mooier te maken, kunnen we meer argumenten aan de plotfunctie toevoegen:\n\np &lt;- 400 # hoeveelheid paracetamol\nd &lt;- 0.7 # afname (d van decay)\n\nfor(i in 1:100){\n  if(runif(1)&lt;0.1){ # is willekeurig getal (tussen 0 en 1) kleiner dan 0.1?\n    p[i] &lt;- p[i] + 400\n  } \n  p[i+1] &lt;- p[i]*d\n}\nplot(p, type='l', lwd=2, col=\"purple\", xlab=\"Tijd (uren)\", ylab=\"Paracetamol in bloed\")\nlegend(70, max(p), legend=c(\"Paracetamol\"), col=c(\"purple\"),lty=1,lwd=2)\n\n\n\n\n\n\n\n\nEr zijn binnen R nog veel meer manieren om data te plotten, zoals bijvoorbeeld de boxplot die je bij het onderdeel statistiek zeker nog tegen zal komen. Daarnaast zijn er in R veel packages beschikbaar die kunnen helpen bij het maken van mooie grafieken, zoals ggplot, maar daar gaan we in deze cursus niet dieper op in.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#opgaven",
    "href": "Programmeren/introductie_R2.html#opgaven",
    "title": "2  Programmeren in R",
    "section": "2.11 Opgaven",
    "text": "2.11 Opgaven\n\nOefening 2.1 (Packages) \nR wordt wereldwijd door veel biologen gebruikt. Daarom kun je vaak online veel hulp vinden als je een bepaalde analyse wil uitvoeren met R. Er zijn bijvoorbeeld heel veel packages en Rscripts beschikbaar om data te visualiseren, fylogenetische bomen te analyseren, diversiteitsanalyses uit te voeren, etc.. Een package moet je één keer installeren, en kan je daarna eenvoudig inladen.\na. Voer in R de functie rtree(10) uit. Wat is je resultaat?\nWe installeren het package ‘ape’ met de onderstaande code en laden deze in (installeren hoeft maar één keer, inladen moet iedere keer dat je Rstudio opnieuw opstart).\n\ninstall.packages(\"ape\") # Installatie. Hoeft maar 1 keer!\nlibrary(ape) # inladen van het package\n\nb. Voer nogmaals rtree(10) uit. Wat is het resultaat?\nWe kunnen de uitkomst uit vraag b ook plotten met R:\n\n# installeren hoeft niet meer :)\nlibrary(ape) # inladen\ntree &lt;- rtree(10)\nplot(tree)\n\nc. Voer het script een aantal keren uit. Is het resultaat iedere keer hetzelfde? Waar denk je dat de ‘r’ in rtree voor staat?\nd. Bestudeer wat het argument 10 doet.\ne. Bestudeer welke andere argumenten deze functie heeft.\nNaast packages kan je ook een Rscript inlezen. Dit doet je met de functie source(), waar je tussen haakjes aangeeft waar het script te vinden is (dit kan zowel op je computer staan als online). Zo kan je bijvoorbeeld een eerder-gebruikt script in je nieuwe script inladen, of een groot script geschreven door iemand inlezen. Later in de cursus ga je bijvoorbeeld het Grind.R script inlezen vanaf de website van Rob de Boer, maar hier komen we later in de cursus op terug.\n\n\nOefening 2.2 (Pinguïns) \nSommige packages zijn er vooral om voorbeeld-datasets te verkrijgen. Een daarvan is palmerpenguins:\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\nhead(penguins)\n\nVoer de code hierboven uit. Je hebt nu de dataframe penguins tot je beschikking.\na. Hoeveel soorten pinguïns staan er in de data set?\nDe kolom penguins$flipper_length_mm geeft de flipper lengtes van de pinguïns. Echter is er bij enkele metingen iets misgegaan, waardoor deze de waarde NA (Not Available) heeft.\nb. De functies min, max en mean geven respectievelijk de kleinste, grootste, en gemiddelde waarde van een lijst. Bereken deze waarden voor de flipper lengtes (hint: je kunt deze functies een tweede argument na.rm=TRUE meegeven om de NA’s te verwijderen).\nc. Gebruik de functie summary om te berekenen voor welk percentage van de pinguïns de sekse niet is bepaald.\n\n\nOefening 2.3 (Bacteriegroei) \nEen bioloog heeft een experiment uitgevoerd waarin hij de groeisnelheid van bacteriën heeft gemeten bij verschillende temperaturen. De data is als volgt:\n\nTemperatuur: 20, 25, 30, 35, 40 graden Celcius\nGroeisnelheid: 2.0, 2.25, 2.65, 2.35, 2.2 per uur\n\n\nStel een dataframe samen met twee kolommen, één voor temperatuur en één voor groeisnelheid\nBepaal bij welke temperatuur de groeisnelheid maximaal is (tip: gebruik de functie which.max() om de index met de hoogste waarde te vinden)\n\nEen groeisnelheid van 2 betekent dat de bacteriën elk uur verdubbelen. Na 2 uur zijn er dus 4 keer zoveel bacteriën, na 3 uur 8 keer, en uiteindelijk na tien uur 1024 keer meer.\n\nBepaal voor elke temperatuur hoeveel keer meer bacteriën er zijn na 10 uur. Voeg dit toe als nieuwe kolom ‘totaalgroei’ in je dataframe.\nControlleer met R of de totaalgroei met een groeisnelheid van 2 inderdaad uitkomt op 1024.\n\nMet plot() kun je de waarden van twee kolommen tegen elkaar plotten. Als eerste eerste argument geef je de waarden op de x-as, en als tweede de waarden op de y-as.\n\nPlot de groeisnelheid tegen de temperatuur. Geef je grafiek een kleur, een titel, en label de assen.\n\n\n\nOefening 2.4 (Vissen vrijlaten) \nEen ecoloog heeft data verzameld over de lengte van vissen in een vijver, omdat hij vissen langer dan 15 cm wil uitzetten in een natuurlijk meer. De data staat in de volgende vector:\n\n# De dataset met lengtes van vissen (in cm):\nlengtes &lt;- c(12, 18, 7, 21, 15, 16, 14, 10, 20, 17)\n\nDoor een vector te controleren op een bepaalde voorwaarde krijg je een nieuwe vector terug, met voor elke meting of dit waar is of niet. Omdat TRUE gelijk staat aan 1, en FALSE gelijk staat aan 0, kun je met de functie sum vervolgens bepalen hoeveel metingen aan een bepaalde voorwaarde voldoen.\na. Gebruik de bovenstaande informatie om de tellen hoeveel vissen groter of gelijk aan 15 cm zijn.\nb. Bereken het percentage vissen dat te klein zijn om uit te zetten.\nIn plaats van specifieke waardes als index te gebruiken, kun je ook een TRUE/FALSE-vector gebruiken om data uit een lijst te selecteren.\nc. Selecteer alle lengtes van vissen die groot genoeg zijn (&gt;=15 cm).\nd. Gebruik een for-loop om vissen stuk voor stuk te beoordelen, en print voor elke vis of ze groot genoeg zijn.",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/introductie_R2.html#footnotes",
    "href": "Programmeren/introductie_R2.html#footnotes",
    "title": "2  Programmeren in R",
    "section": "",
    "text": "Wat deze error precies betekent is niet belangrijk↩︎\nDe lengtes optellen kan met nchar(appels)+nchar(peren). De woorden aan elkaar plakken kan met paste(appels,peren).↩︎\nIn dit geval betekent printen dus niet iets met printers te maken, maar slaat het alleen op ‘tekst weergeven op je scherm’.↩︎",
    "crumbs": [
      "Basisprincipes van R",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Programmeren in R</span>"
    ]
  },
  {
    "objectID": "Programmeren/intro_R_questions.html",
    "href": "Programmeren/intro_R_questions.html",
    "title": "Oefenvragen R",
    "section": "",
    "text": "Meer ervaring opdoen met R",
    "crumbs": [
      "Basisprincipes van R",
      "Oefenvragen R"
    ]
  },
  {
    "objectID": "Programmeren/intro_R_questions.html#meer-ervaring-opdoen-met-r",
    "href": "Programmeren/intro_R_questions.html#meer-ervaring-opdoen-met-r",
    "title": "Oefenvragen R",
    "section": "",
    "text": "Oefening 1 (Volgorde)   Onder deze tekst staat een stukje code. Neem deze over in Rstudio (tip: je kan de hele code in 1 keer kopiëren met het knopje rechtsboven).\n\n# waarden instellen\na &lt;- 2.5\nb &lt;- 11\nc &lt;- 0.01\n\n# bereken de uitkomst\nuitkomst &lt;- a/b+a*(c+a)\n\na. Voeg aan het einde van een script een extra regel toe, waar je de variabele a in 5 verandert.  b. Voer het script uit. De waarde van de uitkomst-variabele is niet veranderd. Leg met de kook-analogie uit waarom niet.\n\n\nOefening 2 (Rekenen in een loop) \na. Schrijf een stukje R-code die een variabele x op 14 laat beginnen, en er daarna 2,3 bij optelt.\nb. In plaats van slechts één keer 2,3 bij x op te tellen, gaan we dit een groot aantal keren doen. Breid je script uit door een for-loop te schrijven die 100 keer 2,3 bij x optelt.\nc. Definieer een variabele n &lt;- 50, en zorg dat de loop niet 100 keer, maar n keer 2,3 bij de beginwaarde van x optelt.\nd. Deel na het optellen ook x door 1,5. Als je n op 50 laat staan, hoe groot is x dan na het uitvoeren van je loop?\ne. Zet n nu op 100. Welke waarde heeft x nu?\nf. Print elke stap de waarde van x, en vergelijk hiermee de antwoorden van vraag d en e met elkaar. (hint: gebruik cat('In stap', i, 'is de waarde van x', x, '\\n'), ervanuit gaande dat je i als teller gebruikt in je for-loop)\n\n\nOefening 3 (Tabellen inlezen en plotten)  a. Ga naar https://tbb.bio.uu.nl/bvd/bms/data, en klik op txt-bestand covid.txt. Bekijk de inhoud van dit plain text bestand. Hoeveel kolommen bevat deze data? Is dit een CSV file? (hint: zoek op waar CSV voor staat).\nb. Bekijk de onderstaande code, en neem deze over. Tel het aantal rijen met nrow. Zijn dit er 52 zoals in het bestand? Tel ook het aantal kolommen met ncol. Klopt dit? \n\n# Lees het bestand covid.txt op de website in met 'read.table'\ncovid &lt;- read.csv(\"http://tbb.bio.uu.nl/bvd/bms/data/covid.txt\")\nView(covid)\n\nc. Om de kolommen goed in te lezen, kunnen we read.table gebruiken (deze gaat ervan uit dat de data is gescheiden door spaties). De onderstaande code gebruikt read.table. Bekijk nogmaals zorgvuldig de ingelezen tabel Is de data goed ingelezen? \n\n# Lees het bestand covid.txt op de website in met 'read.table'\ncovid &lt;- read.table(\"http://tbb.bio.uu.nl/bvd/bms/data/covid.txt\")\n\nd. We passen read.table nog iets verder aan om ervoor te zorgen dat de eerste rij wordt gezien als de header (de namen van de kolommen). De data wordt nu goed ingelezen. Bereken hoeveel positieve testen er gedurende deze periode gemiddeld waren. \n\n# Lees het bestand covid.txt op de website in met 'read.table' en header=T\ncovid &lt;- read.table(\"http://tbb.bio.uu.nl/bvd/bms/data/covid.txt\",header=T)\nhead(covid)\n\ne. De laatste regel van bovenstaande code gebruikt head om de eerste 5 regels van de covid-tabel te laten zien. Gebruik de hulpfunctie van Rstudio (?head) en pas de code aan zodat het de eerste 12 rijen van de dataframe laat zien.\n f. De functie str kan de structuur van een data frame samenvatten. Gebruik str om te bepalen hoeveel rijen/kolommen de covid-dataframe heeft, en welk type variabele er in elke kolom staat.\nOm de data beter te kunnen bekijken kunnen we op allerlei manieren plotten. Laten we het aantal positieve testen over de tijd weergeven. Hiervoor gebruiken we de functie plot(). Deze functie heeft veel opties, maar in de basis heeft het alleen twee dingen nodig: een lijst met getallen voor op de x-as, en een lijst met getallen voor op de y-as. Zodoende kunnen we gemakkelijk een plotje maken (zie code hieronder).\n\n# Lees het bestand covid.txt op de website in met 'read.table'\ncovid &lt;- read.table(\"http://tbb.bio.uu.nl/bvd/bms/data/covid.txt\",header=T)\n\nx &lt;- covid$datapunt # alle x-punten in een vector\ny &lt;- covid$positieve_testen # alle y-punten in een vector\nplot(x,y) # basisplot: alle x-punten tegen alle y-punten\nplot(x,y, type='b',lwd=2,\n     xlab=\"Datapunt\", ylab=\"Aantal positieve testen\",\n     col=\"darkblue\", main=\"Aantal positieve Covid-19 testen in Utrecht\") # allerlei extra opties om de plot mooi te maken\n\n# Zoals je hierboven ziet kun je een functie-aanroep (hier 'plot')\n# ook over meerdere regels verdelen. R weet dat de functie pas 'af' \n# is als je het haakje sluit. \n\ng. Stel dat we alleen geïntresseerd zijn in week 14 t/m 19. Neem de code hierboven over, en pas deze aan zodat je alleen week 14 t/m 19 plot. Tip: maak een nieuw dataframe genaamd covid_subset waarin alleen deze weken voorkomen. Gebruik dan dezelfde plot-functie als hierboven voor deze dataset. Plot de data ook een keer op een log-lineaire schaal door log=\"y\" toe te voegen aan de plot-opties. Wat valt je op? \nh. Het zou ook zo kunnen zijn dat je alleen in 2021 geïnteresseerd bent. Kijkende naar de data frame zijn dit de eerste 15 rijen, dus deze zouden we kunnen selecteren met covid[1:15,]. Met grote tabellen kan het echter handig zijn om dit automatisch te doen (zie voorbeeld-code hieronder). Pas deze code aan om alle rijen punten met meer dan 1000 positieve testen te selecteren.  Bonus: voeg de datapunten met meer dan 1000 positieve testen toe aan de bestaande grafiek door (na de eerste keer plot() te gebruiken) de functie points() te gebruiken. Deze verwacht net als plot een serie x- en y-waarden, maar voegt deze nu toe aan de bestaande plot.\n\ncovid_subset &lt;- covid[covid$jaar == 2021,]\nx &lt;- covid_subset$datapunt # alle x-punten in een vector\ny &lt;- covid_subset$positieve_testen # alle y-punten in een vector\n\nplot(x,y, type='b',lwd=2, log=\"y\",\n     xlab=\"Datapunt\", ylab=\"Aantal positieve testen (log-schaal)\",\n     col=\"darkblue\", main=\"Aantal positieve Covid-19 testen in Utrecht\") # \n\n\n\nOefening 4 (Condities en loops)  Je hebt geleerd dat je met een for-loop een bepaalde handeling kan herhalen. Bekijk de onderstaande for-loop.\n\nfor(i in 1:12){\n  dobbelsteen &lt;- sample(1:6,1) # getal van 1 t/m 6 (dobbelsteen worp)\n  cat(paste(\"Worp nummer\",i,\"is\",dobbelsteen,\"\\n\")) #\\n staat voor een 'enter'\n}\n\na. De cat functie geeft de gecompileerde zinnetjes weer in de terminal. Dit wordt in de programmeer-wereld printen genoemd. Met een dobbelsteen heb je 50% kans om 4, 5 of 6 te gooien. Pas de bovenstaande code aan zodat er alleen iets wordt geprint als er 4, 5 of 6 is gegooid. Is het aantal iedere keer precies 50% van het aantal pogingen? Waarom wel/niet?\nStel dat we het bovenstaande experiment van 12 keer een dobbelsteen rollen 100 keer uit willen voeren (honderd replicas). Om dit te doen kunnen we de bestaande for-loop zelf in een for-loop zetten. Dit heet het nesten van code. Zo kunnen we bijvoorbeeld bijhouden hoe vaak we precies 1 keer zes gooien, als we herhaaldelijk 12 keer een dobbelsteen rollen (zie code hieronder)\n\nfor(e in 1:100){\n  aantal_keren_6 &lt;- 0\n  for(i in 1:12){\n    dobbelsteen &lt;- sample(1:6,1) # getal van 1 t/m 6 (dobbelsteen worp)\n    if(dobbelsteen ==6) aantal_keren_6 &lt;- aantal_keren_6 + 1\n  }\n}\n\nb. Pas de bovenstaande code aan, zodat er aan het einde van elk experiment “Hoera!” wordt geprint als er precies 1 keer 6 is gegooid. Kun je de code aanpassen zodat je kan bijhouden hoe vaak dit is gebeurd?",
    "crumbs": [
      "Basisprincipes van R",
      "Oefenvragen R"
    ]
  },
  {
    "objectID": "Programmeren/intro_R_questions.html#oefentoets-r",
    "href": "Programmeren/intro_R_questions.html#oefentoets-r",
    "title": "Oefenvragen R",
    "section": "Oefentoets R",
    "text": "Oefentoets R\n\nOefening 5  a.Wat is het verschil tussen een matrix en een data frame?\nb. Welk type variabele is x in de code x &lt;- \"123\"?\nc. Als je de code x &lt;- seq(1,10,by=0.5) uitvoert, wat is dan de waarde van x[2]?\nd. Als je de code x &lt;- 10:1 uitvoert, wat is dan de waarde van x[1]?\ne. Als je de code x &lt;- runif(10) uitvoert, wat is dan de waarde van x[1]? En wat geeft x[11] dan?\nf. Beschouw het volgende data frame:\n\ndf &lt;- data.frame(naam = c(\"Jaap\", \"Alina\", \"Xin\"),\n                 minuten = c(12, 19, 11), \n                 score = c(85, 90, 95))\n\nStel we willen een nieuwe kolom toevoegen die de score per minuut geeft, wat moeten we daarvoor doen?\ng. Een student leest de volgende csv in van dieren in het asiel onder de naam “dieren”:\nNaam, Leeftijd, Vachtkleur, Temperament\nJoey, 8, zwart, rustig\nRoos, 2, wit, energiek\nBob, 4, bruin, vriendelijk\nSaartje, 2, gevlekt, verlegen\nWat geeft de selectie dieren[2,3:4] terug?\nh. Bekijk de onderstaande for-loop. Wat wordt er na de for-loop geprint?\n\na &lt;- 1\nfor(i in 1:3){\n  a &lt;- a + i\n}\ncat(\"De waarde van a is:\",a)\n\ni. Match de onderstaande variabelen of datastructuren met hun omschrijving\n\nNumeric\nCharacter / string\nLogical\nVector\nMatrix\nData frame\n\n\nEen lijst van variabelen van hetzelfde type\nEén of meerdere letters, bijvoorbeeld ‘ATAGAC’ of ‘groen’\nEen getal\nEen tabel van variabelen van hetzelfde type\nOf iets waar/onwaar is (TRUE/FALSE, 1/0)\nEen tabel van variabelen met voor elke kolom (mogelijk) een ander type\n\nj. Welk van de onderstaande stukjes code maakt niet een vector van getallen van 1:10?\n\nc(1:10)\n\nseq(1, 10)\n\n1:10\n\nc(1,10)\n\nk. Als je een vector hebt x &lt;- c(2, 4, 6, 8), hoe haal je het derde element op?\na) x(3)\nb) x[3]\nc) x[3,] d) x[,3]\nl. Wat is het resultaat van 3 &gt; 5 in R?\na) TRUE\nb) FALSE\nc) NA\nd) NULL\nm. Als x &lt;- c(10, 20, 30, 40), wat geeft x &gt;= 20 dan terug?\n\nFALSE FALSE TRUE TRUE\nTRUE TRUE FALSE FALSE\nTRUE FALSE FALSE FALSE\nFALSE TRUE TRUE TRUE\n30, 40\n10, 20\n10\n20, 30, 40\n\nn. Als x &lt;- c(10, 20, 30, 40), wat geeft x[x &gt;= 20] dan terug?\n\nFALSE FALSE TRUE TRUE\nTRUE TRUE FALSE FALSE\nTRUE FALSE FALSE FALSE\nFALSE TRUE TRUE TRUE\n30, 40\n10, 20\n10\n20, 30, 40",
    "crumbs": [
      "Basisprincipes van R",
      "Oefenvragen R"
    ]
  },
  {
    "objectID": "Wiskunde/inleiding.html",
    "href": "Wiskunde/inleiding.html",
    "title": "3  Inleiding",
    "section": "",
    "text": "3.1 De efficiënte spitsmuis\nStel dat je het energieverbruik van een klein dier, zoals de spitsmuis, onderzoekt. In de literatuur heb je gelezen dat deze dieren tijdens hun actieve uren \\(0.3\\) calorieën per gram lichaamsgewicht verbruiken. De spitsmuis die je onderzoekt is \\(20\\) gram, dus zou deze \\(0.3 \\cdot 20 = 6\\) calorieën per uur moeten gebruiken. Per dag zou dit uitkomen op \\(6 \\cdot 24 =  144\\) calorieën. Maar je experiment laat steevast zien dat de spitsmuis slechts \\(102\\) calorieën verbruikt. Je hypothetiseert dat er minder calorieën worden gebruikt tijdens het slapen, want je beestje slaapt zo’n \\(14\\) uur per dag! Met hoeveel moet het metabolisme van deze spitsmuis tijdens de slaap verminderen, zodat je uitkomt op \\(102\\) calorieën per dag?\nAllereerst, wat weten we?\nMet de bovenstaande gegevens kunnen we een simpele vergelijking opstellen. We willen namelijk weten wanneer het wakkere verbruik plus het slapende verbruik gelijk is aan 102:\n\\[\n\\begin{align}\n\\underbrace{10 \\cdot 6}_{\\text{verbruik wakker}} + \\underbrace{14 \\cdot 6 \\cdot x}_{\\text{verbruik slapend}} &= \\underbrace{102}_{\\text{totaal verbruik}}\n\\end{align}\n\\] Nu moeten we weten voor welke waarde van \\(x\\) de vergelijking \\(10 \\cdot 6 + 14 \\cdot 6 \\cdot x = 102\\) klopt. Met een klein beetje algebra, zoals je op de middelbare school geleerd hebt, rekenen we eenvoudig uit wat \\(x\\) is:\n\\[\n\\begin{align}\n60 + 84x &= 102 \\quad &\\hookleftarrow - \\text{ 60}  \\\\\n84x &= 42 \\quad &\\hookleftarrow \\div \\text{ 84}  \\\\\nx &= \\tfrac{42}{84} = 0.5\n\\end{align}\n\\] Als je hypothese klopt, zou de slapende spitsmuis dus 0.5 keer minder (of anders gezegd: 2 keer zo weinig) energie verbruiken. Omdat de meeste zoogdieren hoogstens 30% energie besparen tijdens het slapen, is er wellicht toch meer aan de hand!",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Inleiding</span>"
    ]
  },
  {
    "objectID": "Wiskunde/inleiding.html#de-efficiënte-spitsmuis",
    "href": "Wiskunde/inleiding.html#de-efficiënte-spitsmuis",
    "title": "3  Inleiding",
    "section": "",
    "text": "Foto van een spitsmuis door Wesley Overman (zoogdiervereniging.nl)\n\n\n\n\n\nPer wakker uur verbruikt de spitsmuis \\(0.3 \\cdot 20 = 6\\) calorieën.\nAls je hypothese klopt, verbruikt de slapende spitsmuis slechts een deel van deze calorieën: \\(6 \\cdot x\\) per uur, waarbij \\(x\\) tussen \\(0\\) en \\(1\\) zou moeten liggen.\nHet aantal uren slaap is \\(14\\), dus het aantal wakkere uren is \\(24-14=10\\)1\nDe muis verbruikt dus \\(6\\ calorieën\\) gedurende actieve (10) uur, en \\(6 \\cdot x\\ calorieën\\) gedurende de slapende (14) uur.\nHet totaalverbruik is experimenteel bepaald op \\(102\\) calorieën per dag.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Inleiding</span>"
    ]
  },
  {
    "objectID": "Wiskunde/inleiding.html#een-gelijke-start",
    "href": "Wiskunde/inleiding.html#een-gelijke-start",
    "title": "3  Inleiding",
    "section": "3.2 Een gelijke start",
    "text": "3.2 Een gelijke start\nMisschien is de wiskunde die je op de middelbare school hebt geleerd een beetje weggezakt. Wat waren ook alweer afgeleiden, exponenten, en logaritmen? Hoe schets je ook alweer functies als grafieken? Omdat deze begrippen en vaardigheden essentiëel zijn voor elke bioloog, gaan we deze basiswiskunde kort behandelen zodat iedereen (ongeacht achtergrond zoals wiskunde A/B) op gelijk niveau begint. Laten we beginnen met wat we hierboven hebben gedaan voor de spitsmuis: vergelijkingen oplossen met behulp van algebra.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Inleiding</span>"
    ]
  },
  {
    "objectID": "Wiskunde/inleiding.html#footnotes",
    "href": "Wiskunde/inleiding.html#footnotes",
    "title": "3  Inleiding",
    "section": "",
    "text": "Aangenomen dat de muis op Aarde leeft, en niet op Neptunus waar een dag ongeveer 16 uur lang is.↩︎",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Inleiding</span>"
    ]
  },
  {
    "objectID": "Wiskunde/algebra.html",
    "href": "Wiskunde/algebra.html",
    "title": "4  Algebra",
    "section": "",
    "text": "4.1 Introductie\nEen vergelijking is een wiskundige relatie die één of meerdere onbekende variabelen bevat (in de introductie was dit de fractie energie die de spitsmuis tijdens het slapen verbruikt, wat we \\(x\\) hadden genoemd). We kunnen erachter komen wat de waarde van deze onbekende variabele is door de vergelijking op te lossen. Dit hoofdstuk geeft meer informatie over het oplossen van vergelijkingen.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "Wiskunde/algebra.html#volgorde-van-bewerkingen",
    "href": "Wiskunde/algebra.html#volgorde-van-bewerkingen",
    "title": "4  Algebra",
    "section": "4.2 Volgorde van bewerkingen",
    "text": "4.2 Volgorde van bewerkingen\nWiskundige bewerkingen worden altijd in de volgende vaste volgorde uitgewerkt:\n\nhaakjes\nmachtsverheffen en worteltrekken\nvermenigvuldigen en delen\noptellen en aftrekken\n\nEen ezelsbruggetje om deze volgorde te onthouden is “Hoe Moeten Wij Van De Onvoldoendes Afkomen?”1. Bewerkingen die op dezelfde rang staan zijn gelijkwaardig en worden van links naar rechts uitgevoerd.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "Wiskunde/algebra.html#vergelijkingen-met-één-onbekende",
    "href": "Wiskunde/algebra.html#vergelijkingen-met-één-onbekende",
    "title": "4  Algebra",
    "section": "4.3 Vergelijkingen met één onbekende",
    "text": "4.3 Vergelijkingen met één onbekende\nIn wiskundige vergelijkingen zijn we vaak geïnteresseerd in de waarde van één of meerdere onbekenden. Als we bijvoorbeeld de vergelijking \\(2x = 4\\) hebben, willen we graag weten voor welke waarde van \\(x\\) dit geldt. Deze vergelijking is zo simpel dat je het misschien meteen ziet: als \\(x\\) gelijk is aan \\(2\\), staat er \\(2 \\cdot 2\\), en klopt de vergelijking. Maar het is niet altijd eenvoudig om direct af te lezen welke waarde \\(x\\) moet hebben om de vergelijking kloppend te maken. Hoe lossen we bijvoorbeeld de vergelijking \\(3x +2 = 7\\) of \\(2(x-8) = -10 - x\\) op? Allereerst is het belangrijk om te begrijpen dat deze vergelijkingen lineaire verbanden beschrijven.\n\nLineaire verbanden\nIn een lineaire verband komen geen kwadraten of hogere machten in voor. We kunnen een lineair verband opschrijven in de algemene vorm \\(y = ax + b\\). Hierbij zijn \\(x\\) en \\(y\\) de variabelen, en \\(a\\) en \\(b\\) de parameters. De parameter \\(a\\) zegt iets over hoe snel \\(y\\) toeneemt of afneemt als een functie van \\(x\\). De parameter \\(b\\) defineert de beginwaarde, oftewel de waarde van \\(y\\) als \\(x\\) gelijk is aan nul. Deze relatie tussen \\(x\\) en \\(y\\) kunnen we nu weergeven in een assenstelsel:\n\n\n\n\n\n\n\nFiguur 4.1: Interactieve Desmos-plot van een lineair verband.Verander zelf de waarden voor a en b!\n\n\n\nDe rechte lijn in de grafiek geeft aan dat we te maken hebben met een lineair verband.\n\n\nVergelijking oplossen\nOm vergelijkingen op te lossen maken we gebruik van simpele algebraïsche handelingen, waarvan de balansmethode de meest belangrijke is: zo lang je aan beide kanten van het \\(=\\) teken dezelfde bewerkingen doet, blijft de vergelijking altijd gelden. Als je aan beide kanten van het \\(=\\) teken dezelfde hoeveelheid optelt, aftrekt, of met dezelfde hoeveelheid vermenigvuldigt, is er feitelijk niets veranderd. Om lineaire vergelijkingen op te lossen kun je gebruik maken van het volgende stappenplan:\n\n\n\n\n\n\nStappenplan lineaire vergelijkingen:\n\nHaakjes uitwerken.\nAlles met de variabele naar links.\nAlles zonder de variabele naar rechts.\nDelen door het getal voor de variabele.\n\n\n\nVoorbeeld: \\(2(x-8) = - 10 - x\\)\n\n\\(2x-16 = - 10 - x\\)\nAan beide kanten x optellen: \\(3x-16 = - 10\\)\nAan beide kanten 16 optellen: \\(3x = 6\\)\nAan beide kanten delen door 3: \\(x = {6 \\over 3} \\rightarrow x = 2\\)\n\n\n\n\n\n\nKwadratische verbanden\nEen kwadratisch, of tweedegraads, verband heeft de vorm \\(y = ax^2 + bx + c\\).\n\n\n\n\n\n\n\nFiguur 4.2: Interactieve Desmos-plot van een kwadratisch verband. Verander de waarden van a, b en c en kijk wat er gebeurt met de vorm van de grafiek!\n\n\n\nHet oplossen van een kwadratische vergelijking kan op verschillende manieren. Stel je allereerst voor dat \\(c = 0\\). In dit geval bevatten alle termen \\(x\\), en kunnen we \\(x\\) buiten haakjes halen. Je krijgt dan twee oplossingen, waarvan er altijd één is waarbij \\(x=0\\) (dit kun je ook zien aan bovenstaande grafiek, waarbij \\(c=0\\) altijd een snijpunt in de oorsprong geeft). Wiskundig zie je dit ook in het volgende voorbeeld:\n\n\n\n\n\n\nVoorbeeld: \\(2x^2 + 4x = 0\\)\n\n\\(x(2x+4) = 0\\)\n\\(x(2x+4)\\) is gelijk aan 0, als:\n\n\\[ x = 0 \\]\nOF\n\\[2x+4 = 0\\] \\[2x = -4\\] \\[x = -4/2\\] \\[x = -2\\]\n\n\n\n\n\nDus als \\(c=0\\), kun je een kwadratische vergelijking nog makkelijk oplossen. Als \\(c\\) echter niet gelijk is aan \\(0\\), is er een derde term die geen \\(x\\) bevat. Je kan \\(x\\) nu niet buiten haakjes halen, en dus niet op deze manier de kwadratische vergelijking oplossen. We kunnen de vergelijking wel ontbinden in factoren, waarvoor we opzoek gaan naar twee getallen die optellen tot \\(b \\over a\\), en vermenigvuldigen tot \\(c \\over a\\). Dit is het makkelijkst te illustreren met een voorbeeld waar \\(a=1\\), bijvoorbeeld:\n\n\n\n\n\n\nVoorbeeld: \\(x^2 - 5x + 6 = 0\\)\n\nDe getallen \\(-2\\) en \\(-3\\) tellen op tot \\(-5\\), en vermenigvuldigen tot \\(6\\)\nDe vergelijking kan dus geschreven worden als \\((x-2)(x-3) = 0\\)\nAls een van de factoren (tussen de haakjes) gelijk is aan \\(0\\), is de hele vergelijking \\(0\\)\nDe twee oplossingen zijn dus \\(x=2\\) en \\(x=3\\), want voor die waarden zijn de individuele factoren \\(0\\)\n\n\n\n\nEchter is het vaak niet zo makkelijk om de twee getallen te vinden die optellen tot \\(b \\over a\\) en vermenigvuldigen tot \\(c \\over a\\). Daarom lossen we vergelijkingen met de vorm \\(y = ax^2 + bx + c\\) (waarbij \\(c \\neq 0\\)) meestal op met de abc-formule. Deze formule geeft de twee mogelijke oplossingen:\n\\[\\begin{align}\nx_{1} &= \\frac{-b + \\sqrt{b^2 - 4ac}}{2a} \\\\\nx_{2} &= \\frac{-b - \\sqrt{b^2 - 4ac}}{2a}\n\\end{align}\\]\nOm het wat korter te houden, kunnen we dit zo opschrijven:\n\\[\\begin{align}\nx_{1,2} &= \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}\\\\\n\\end{align}\\]",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "Wiskunde/algebra.html#sec-sommatieteken",
    "href": "Wiskunde/algebra.html#sec-sommatieteken",
    "title": "4  Algebra",
    "section": "4.4 Sommatieteken",
    "text": "4.4 Sommatieteken\nNet zoals de abc-formule hierboven wat korter opgeschreven kon worden, kunnen optellingen van vele getallen vaak ook korter opgeschreven worden door gebruik te maken van een sommatieteken. Neem bijvoorbeeld een vector als \\(x = (1, 10, 2, 5, 6)\\). Als we al deze elementen zouden willen optellen, kunnen we de volledige reeks uitschrijven:\n\\[x_1 + x_2 + x_3 + x_4 + x_5\\]\nIn R hebben we geleerd dat we hiervoor sum(x) kunnen gebruiken, maar in wiskundige formules zul je hiervoor een sommatieteken tegenkomen: \\(\\sum(x_i)\\). Deze sommatie stelt dat elke i-de positie van de vector bij elkaar opgeteld moeten worden:\n\\[\\sum(x_i) = 1 + 10 + 2 + 5 + 6\\]\nStel nou dat we een vector hebben met heel veel elementen, zoals \\(x = c(x_1, x_2, x_3, ..., x_{100})\\), waarbij we niet álle elementen bij elkaar op willen tellen, maar alleen de eerste 20 elementen. Ook dit kunnen we aangeven met het sommatieteken, door onder het teken aan te geven bij welk element we beginnen, en erboven tot welk element we doorgaan:\n\\[\\sum_{i=1}^{20}({x_i}) = x_1 + x_2 + x_3 + ... + x_{20}\\]\nDe letter die we bij het sommatieteken gebruiken kan trouwens ook anders zijn dan \\(i\\), bijvoorbeeld \\(j\\) of \\(k\\). Dit kan nodig zijn als je een sommatieteken gebruikt binnen de haakjes van een ander sommatieteken (dit heet “nesten”). Dit kan nuttig zijn als je bijvoorbeeld de som van een matrix wil uitrekenen (de som van de som van kolommen). Soms wordt er ook nog een bewerking uitgevoerd op de elementen in de sommatie, bijvoorbeeld:\n\\[\\sum_{i=1}^{10}({x_{i}}^2)\\]\nHierbij wordt elke waarde \\(x_i\\) gekwadrateerd. Het resultaat is dus de som van de gekwadrateerde waarden. Als de vector bijvoorbeeld \\(x = (1, 2, 3, 4)\\) is, krijgen we:\n\\[\\sum_{i=1}^{4}{({x_{i}}^2}) = 1^2 + 2^2 + 3^2 + 4^2 = 1 + 4 + 9 + 16 = 30\\]\nAls laatste kun je \\(i\\) ook gebruiken op andere manieren (dus niet alleen om elementen uit een vector te selecteren). Zo geeft bijvoorbeeld:\n\\[\\sum_{i=1}^{4}(i) = 1 + 2 + 3 + 4\\]\nOf geeft\n\\[\\sum_{i=1}^{4}(2^i) = 2^1 + 2^2 + 2^3 + 2^4\\]",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "Wiskunde/algebra.html#opdrachten",
    "href": "Wiskunde/algebra.html#opdrachten",
    "title": "4  Algebra",
    "section": "4.5 Opdrachten",
    "text": "4.5 Opdrachten\n\nOefening 4.1  Los de volgende vergelijkingen op:\na.\n\\(3x + 5 = 11\\)\nb.\n\\(x^2 + 2x - 8 = 0\\)\nc.\n\\(x^2 - 9 = 0\\)\n\n\nOefening 4.2  Vereenvoudig de volgende uitdrukking:\n\\((ax-2by)(3y-4bx)+2b(2ax^2+3y^2)-8xyb^2\\)\n\n\nOefening 4.3  Los de vergelijkingen op voor de aangegeven variabele (geef je antwoord in de vorm variabele = …):\na. vind \\(r\\) in: \\(3r + 2 - 5(r+1) = 6r+4\\)\nb. vind \\(x\\) in: \\(x + {4 \\over x} =4\\)\nc. vind \\(N\\) in: \\((b-{N \\over k})N=0\\)\nd. vind \\(N\\) in: \\((b-d(1+{N \\over k}))N=0,\\;\\;d \\ne 0;\\;k \\ne 0\\)\ne. vind \\(N\\) in: \\((\\frac{b}{1+N/h}-d)N=0, \\;b \\ne 0\\)\n\n\nOefening 4.4  Schrijf de volgende reeksen op door gebruik te maken van het sommatieteken.\na. \\[{x_{11}} + {x_{12}} + {x_{13}}\\]\nb. \\[{x_1}^3 + {x_2}^3 + {x_3}^3 + {x_4}^3\\]\nc. \\[1^2 + 2^3 + 3^4 + 4^5\\]",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "Wiskunde/algebra.html#footnotes",
    "href": "Wiskunde/algebra.html#footnotes",
    "title": "4  Algebra",
    "section": "",
    "text": "Wellicht kennen jullie ook het ezelsbruggetje “Meneer Van Dale Wacht Op Antwoord”, maar deze bevat geen ‘haakjes’ en zet worteltrekken i.v.m. ouderwetse notaties op de verkeerde plek.↩︎",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Algebra</span>"
    ]
  },
  {
    "objectID": "Wiskunde/breuken.html",
    "href": "Wiskunde/breuken.html",
    "title": "5  Breuken",
    "section": "",
    "text": "5.1 Introductie\nVeel biologische processen worden wiskundig beschreven met vergelijkingen waarin breuken voorkomen. Dit hoofdstuk beschrijft de belangrijkste rekenregels voor het werken met breuken.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Breuken</span>"
    ]
  },
  {
    "objectID": "Wiskunde/breuken.html#rekenregels-voor-breuken",
    "href": "Wiskunde/breuken.html#rekenregels-voor-breuken",
    "title": "5  Breuken",
    "section": "5.2 Rekenregels voor breuken",
    "text": "5.2 Rekenregels voor breuken\nEen breuk bestaat altijd uit een teller (numerator in het Engels) en een noemer (denominator in het Engels). In de breuk \\(\\frac{a}{b}\\), is a de teller is en b de noemer.\n\nVereenvoudigen\nAls de teller en noemer een vermenigvuldiging met hetzelfde getal bevatten, mag dit getal weggestreept worden:\n\\[\n\\frac{ca}{cb} = \\frac{a}{b}\n\\]\nHetzelfde geldt als de teller en de noemer een deling door hetzelfde getal bevatten:\n\\[\n\\frac{a/c}{b/c} = \\frac{a}{b}\n\\]\nDeze rekenregel verklaart ook dat bijvoorbeeld \\(\\frac{4}{8}\\) vereenvoudigd mag worden tot \\(\\frac{1}{2}\\) (\\(\\frac{4}{8} = \\frac{4\\cdot1}{4\\cdot2} = \\frac{1}{2}\\)).\n\n\nVermenigvuldigen\nHet vermenigvuldigen van twee breuken gaat volgens de regel “teller keer teller, noemer keer noemer”.\n\\[\n\\frac{a}{b}\\cdot\\frac{c}{d}=\\frac{ac}{bd}\n\\]\n\n\n\n\n\n\nTip\n\n\n\nDeze regel kun je ook gebruiken als je een breuk vermenigvuldigt met een geheel getal. Het gehele getal kun je schrijven als een breuk met als noemer 1. Bijvoorbeeld:\n\\[\n5\\cdot\\frac{2}{7} = \\frac{5}{1}\\cdot\\frac{2}{7} = \\frac{5\\cdot2}{1\\cdot7} = \\frac{10}{7}\n\\]\n\n\n\n\nDelen\nDe vuistregel bij het delen door een breuk is: “delen door een breuk is vermenigvuldigen met het omgekeerde”. Dit geldt zowel bij het delen van gehele getallen als bij het delen van breuken.\n\\[\na\\div \\frac{b}{c} = a\\cdot\\frac{c}{b} = \\frac{ac}{b}\n\\] \\[\n\\frac{a}{b}\\div\\frac{c}{d} = \\frac{a}{b}\\cdot\\frac{d}{c} = \\frac{ad}{bc}\n\\]\n\n\nOptellen en aftrekken\nBreuken kunnen alleen bij elkaar worden opgeteld als ze gelijknamig zijn (dezelfde noemer hebben).\n\\[\n\\frac{a}{b}+\\frac{c}{b} = \\frac{a+c}{b}\n\\]\nMaar hoe los je bijvoorbeeld het volgende probleem op? \\[\n\\frac{a}{b}+\\frac{c}{d}\n\\]\nAls breuken niet gelijknamig zijn, moeten ze eerst gelijknamig gemaakt worden voordat ze opgeteld kunnen worden. Dit kun je doen door de teller en noemer van de eerste breuk te vermenigvuldigen met de noemer van de tweede breuk, en op dezelfde manier de teller en noemer van de tweede breuk te vermenigvuldigen met de noemer van de eerste breuk.\nDit mag omdat een breuk waarbij de teller en noemer gelijk zijn, altijd 1 is (\\(\\frac{d}{d}=1\\)). Als je een getal vermenigvuldigt met 1 verandert de waarde van het getal niet, je mag dit dus altijd doen. \\[\n\\frac{a}{b} = \\frac{a}{b}\\cdot\\frac{d}{d} = \\frac{ad}{bd}\n\\] \\[\n\\frac{c}{d} = \\frac{c}{d}\\cdot\\frac{b}{b} = \\frac{bc}{bd}\n\\]\nZoals je ziet, zijn beide breuken nu gelijknamig en mogen we ze dus optellen. Dit doen we door de tellers bij elkaar op te tellen, terwijl de noemer hetzelfde blijft.\n\\[\n\\frac{a}{b}+\\frac{c}{d} = \\frac{ad}{bd}+\\frac{bc}{bd} = \\frac{ad + bc}{bd}\n\\]\nDezelfde regels gelden voor het aftrekken van breuken: als de breuken gelijknamig zijn mag je de tellers van elkaar aftrekken. Zijn ze niet gelijknamig? Dan moet je ze eerst gelijknamig maken zoals hierboven beschreven.\n\n\nBreuken uit een vergelijking halen\nSoms kan het handig zijn om een vergelijking met een breuk erin om te schrijven, zodat de breuk verdwijnt. Dit kun je doen door de vergelijking aan de rechter- en linkerkant van het = teken te vermenigvuldigen met de noemer van de breuk. Doordat je beide kanten van het is-teken vermenigvuldigt met hetzelfde getal, blijft de vergelijking kloppend.\n\\[\n\\frac{a}{b} = cx\n\\] \\[\na = bcx\n\\]\nSamengevat, zijn de rekenregels voor breuken:\n\n\n\n\n\n\n\nRekenregel\nVoorbeeld\n\n\n\n\n\\(\\frac{ca}{cb} = \\frac{a}{b}\\)\n\\(\\frac{2 \\cdot 3}{2 \\cdot 4} = \\frac{3}{4}\\)\n\n\n\\(\\frac{a/c}{b/c} = \\frac{a}{b}\\)\n\\(\\frac{3 / 2}{4 / 2} = \\frac{3}{4}\\)\n\n\n\\(\\frac{a}{b} \\cdot \\frac{c}{d} = \\frac{ac}{bd}\\)\n\\(\\frac{1}{2} \\cdot \\frac{3}{4} = \\frac{1 \\cdot 3}{2 \\cdot 4} = \\frac{3}{8}\\)\n\n\n\\(a \\div \\frac{b}{c} = a \\cdot \\frac{c}{b} = \\frac{ac}{b}\\)\n\\(2 \\div \\frac{3}{4} = 2 \\cdot \\frac{4}{3} = \\frac{2 \\cdot 4}{3} = \\frac{8}{3}\\)\n\n\n\\(\\frac{a}{b} \\div \\frac{c}{d} = \\frac{a}{b} \\cdot \\frac{d}{c}\\)\n\\(\\frac{1}{2} \\div \\frac{3}{4} = \\frac{1}{2} \\cdot \\frac{4}{3} = \\frac{4}{6}\\)\n\n\n\\(\\frac{a}{b} +\\frac{c}{b} = \\frac{a+c}{b}\\)\n\\(\\frac{1}{4} +\\frac{2}{4} = \\frac{3}{4}\\)\n\n\n\\(\\frac{a}{b} +\\frac{c}{d} = \\frac{ad}{bd} +\\frac{bc}{bd} = \\frac{ad+bc}{bd}\\)\n\\(\\frac{1}{2} +\\frac{3}{4} = \\frac{1\\cdot 4}{2\\cdot 4} +\\frac{2\\cdot 3}{2\\cdot 4} = \\frac{4+6}{8} = \\frac{12}{8}\\)\n\n\n\n\n\nVoorbeelden\n\nVoorbeeldenLos op: \\(\\frac{2}{x+3}=5\\)Los op: \\(\\frac{2}{5x}+\\frac{3}{4} = 0.5\\)\n\n\nProbeer eerst zelf de vergelijkingen op te lossen voordat je naar de uitleg kijkt!\n\n\nLos de volgende vergelijking op: \\(\\frac{2}{x+3}=5\\).\nDoor aan beide kanten met \\(x+3\\) te vermenigvuldigen verwijderen we de breuk \\(2 = 5(x+3)\\). Haakjes uitwerken geeft \\(2 = 5x + 15\\). We kunnen de term met \\(x\\) erin isoleren door aan beide kanten van het is-teken \\(15\\) af te trekken. Dit geeft: \\(2-15 = 5x\\) oftewel \\(-13 = 5x\\). Delen door \\(5\\) geeft: \\(x = -\\frac{13}{5}\\).\n\n\nLos de volgende vergelijking op: \\(\\frac{2}{5x}+\\frac{3}{4} = 0.5\\).\nDit kan op twee verschillende manieren. De eerste manier is het meest eenvoudig, maar voor de volledigheid staat manier twee ook in de uitleg.\n\nEerst de breuken optellen. Om dit te doen moeten de breuken eerst dezelfde noemer hebben: \\(\\frac{2\\cdot4}{5x\\cdot4} + \\frac{3\\cdot5x}{4\\cdot5x} = 0.5\\) oftewel \\(\\frac{8}{20x} + \\frac{15x}{20x} = 0.5\\). Nu kunnen we de breuken optellen: \\(\\frac{8+15x}{20x} = 0.5\\). Daarna kunnen we de breuk weghalen door aan beide kanten te vermenigvuldigen met \\(20x\\), dan krijgen we: \\(8+15x = 10x\\). Door aan beide kanten \\(15x\\) af te trekken krijgen we \\(8 = -5x\\) oftwel \\(x = -\\frac{8}{5}\\).\nMeteen de breuk met x isoleren door aan beide kanten \\(\\frac{3}{4}\\) af te trekken: \\(\\frac{2}{5x} = 0.5-\\frac{3}{4}\\). We kunnen \\(0.5\\) vervolgens als een breuk schrijven om de twee getallen aan de rechterkant van elkaar af te trekken: \\(\\frac{2}{5x} = \\frac{1}{2}-\\frac{3}{4}\\). Gelijknamig maken van deze breuken geeft: \\(\\frac{2}{5x} = \\frac{1\\cdot4}{2\\cdot4}-\\frac{3\\cdot2}{4\\cdot2}\\) oftewel \\(\\frac{2}{5x} = \\frac{4}{8}-\\frac{6}{8}\\). Nu kunnen we de breuken van elkaar aftrekken: \\(\\frac{2}{5x} = -\\frac{2}{8}\\). In zo’n situatie, waarbij er aan beide kanten van het is-teken enkel een breuk staat, mag je de noemer van de eerste breuk vermenigvuldigen met de teller van de andere breuk, en vice versa: \\(2 = -\\frac{2\\cdot5x}{8}\\) en \\(2\\cdot8 = -2\\cdot5x\\). Dit geeft \\(16 = - 10x\\). Dus \\(x = -\\frac{16}{10}\\), en vereenvoudigd \\(x = -\\frac{8}{5}\\).",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Breuken</span>"
    ]
  },
  {
    "objectID": "Wiskunde/breuken.html#opdrachten",
    "href": "Wiskunde/breuken.html#opdrachten",
    "title": "5  Breuken",
    "section": "5.3 Opdrachten",
    "text": "5.3 Opdrachten\n\nOefening 5.1 \nReken de volgende breuken uit, en vereenvoudig waar mogelijk:\na. \\(\\frac{1}{7}\\cdot\\frac{2}{4}\\)\nb. \\(\\frac{1}{6}-\\frac{2}{3}\\)\nc. \\(\\frac{2}{3}\\div\\frac{4}{5}\\)\nd. \\(\\frac{4}{12}+\\frac{5}{36}\\)\n\n\nOefening 5.2 \nDe familie Jansen heeft een inkomen van 2400 euro. Ze besteden \\(\\frac{1}{3}\\) van het inkomen aan hun hypotheek, \\(\\frac{1}{7}\\) aan boodschappen en \\(\\frac{1}{4}\\) aan gas, water en elektriciteit. Ze krijgen \\(\\frac{1}{3}\\) van hun hypotheekbetalingen terug van de belastingdienst. Hoe veel geld houdt familie Jansen elke maand over? Reken dit uit door alle breuken eerst samen te voegen tot één breuk.\n\n\nOefening 5.3 \nSchrijf als één breuk:\n\\(\\frac{6}{r} - \\frac{5r}{30r+5}\\)\n\n\nOefening 5.4 \nLos op voor x:\n\\(\\frac{a}{b}x - \\frac{c}{d} = \\frac{e}{f}\\)\n\n\nOefening 5.5 \nLos op voor A:\n\\(25A\\div\\frac{3}{7} = 12 - \\frac{1}{3}A\\)",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Breuken</span>"
    ]
  },
  {
    "objectID": "Wiskunde/exponenten.html",
    "href": "Wiskunde/exponenten.html",
    "title": "6  Exponenten & Logaritmen",
    "section": "",
    "text": "6.1 Introductie\nStel je één enkele bacterie voor op een agarplaat. Deze bacteriesoort groeit snel en deelt zich elk uur. Na één uur zijn er \\(1 \\cdot 2 = 2\\) bacteriën. Na vijf uur zijn dat er \\(1 \\cdot 2 \\cdot 2 \\cdot 2 \\cdot 2 \\cdot 2 = 32\\). Gelukkig is er een makkelijke manier om dit op te schrijven: na \\(n\\) delingen, zijn er \\(2^n\\) bacteriën. Dit is een simpel voorbeeld van exponentiële groei, die we ook kunnen uitdrukken met de volgende vergelijking, waarbij \\(B\\) het aantal bacteriën is en \\(n\\) het aantal delingen: \\[\nB = B_0\\cdot2^n\n\\tag{6.1}\\] Hierbij staat \\(B_0\\) voor het aantal bacteriën waarmee je start. Hoewel je misschien gewend bent dat wiskundige functies vaak in de vorm \\(y=f(x)\\) geschreven worden, kun je \\(y\\) en \\(x\\) vervangen met letters die voor de biologie wat logischer zijn: \\(B\\) voor bacteriën, en \\(n\\) voor number of divisions. Exponententen en logaritmen (het omgekeerde van een exponent) komen veel voor in biologische processen, dus het is belangrijk om er mee te leren rekenen. In dit onderdeel bespreken we daarom de relevante rekenregels.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exponenten & Logaritmen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/exponenten.html#exponenten",
    "href": "Wiskunde/exponenten.html#exponenten",
    "title": "6  Exponenten & Logaritmen",
    "section": "6.2 Exponenten",
    "text": "6.2 Exponenten\nEen exponent geeft aan hoe vaak het grondtal met zichzelf vermenigvuldigd wordt.\nBijvoorbeeld \\(2^4 = 2 \\cdot 2 \\cdot 2 \\cdot 2 = 16\\). Hierbij is 2 het grondtal en 4 de exponent.\nWortels kunnen ook als exponent weergegeven worden, de exponent is dan gelijk aan \\(1\\over2\\).\nBijvoorbeeld \\(\\sqrt{4} = 4^{1\\over2} = 2\\).\n\n\n\n\n\n\n\nRekenregel\nVoorbeeld\n\n\n\n\n\\(a^n \\cdot a^m = a^{n + m}\\)\n\\(2^2 \\cdot 2^3 = 2^{2+3} = 2^5\\)\n\n\n\\(a^n \\div a^m = a^{n - m}\\) als \\(a \\neq 0\\)\n\\(2^5 \\div 2^2 = 2^{5-2} = 2^3\\)\n\n\n\\((a^n)^m = a^{nm}\\)\n\\((2^2)^2 = 2^4\\)\n\n\n\\((a^n \\cdot b^m)^q = a^{nq} \\cdot b^{mq}\\)\n\\((2^3 \\cdot 3^4)^2 = 2^6 \\cdot 3^8\\)\n\n\n\\(a^{-n} = 1 / a^n\\)\n\\(4^{-2} = 1/4^2\\)\n\n\n\\(a^0 = 1\\)\n\\(2^0 = 1\\)\n\n\n\n\nHele grote en hele kleine getallen\nIn de biologie werken we vaak met grote waardes, zoals megatonnen uitgestoten CO\\(_{2}\\) of miljoenen rode bloedcellen geproduceerd per uur. Deze grote waarden worden meestal aangegeven met een macht van tien. Zo kan \\(2500\\) opgeschreven worden als \\(2.5 \\cdot 1000 = 2.5\\cdot10^3\\) . Ook erg kleine getallen kunnen zo opgeschreven worden: \\(0.000015 = 1.5 \\cdot 0.00001 = 1.5\\cdot10^{-5}\\).\nOm expontenen als plain text op te schrijven (bijvoorbeeld in R-code), wordt vaak gebruik gemaakt van een e1. Zo wordt \\(1.5 \\cdot 10^{-5}\\) opgeschreven als 1.5e−5, en \\(2.5 \\cdot 10^3\\) opgeschreven als 2.5e3.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exponenten & Logaritmen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/exponenten.html#logaritmen",
    "href": "Wiskunde/exponenten.html#logaritmen",
    "title": "6  Exponenten & Logaritmen",
    "section": "6.3 Logaritmen",
    "text": "6.3 Logaritmen\nDe logaritme is het omgekeerde van de exponent (zie Figuur 6.1). Je kunt een exponent altijd herschrijven als een logaritme, en andersom: \\(^2\\log{16} = 4\\) want \\(2^4 = 16\\). Dit is belangrijk, omdat het kan zijn dat de onbekende die je wil oplossen de exponent is, bijvoorbeeld \\(2^x = 18\\). Hier staat dus eigenlijk de vraag: tot welke macht moeten we \\(2\\) verheffen, om \\(18\\) te krijgen? Om dit op te lossen, schrijven we om naar een logaritme: \\(x=^2\\log{18}\\).\n\n\n\n\n\n\nFiguur 6.1: Logaritmen en exponenten omschrijven dezelfde relatie tussen drie waarden.\n\n\n\nMeer algemeen kunnen we zeggen: als \\(^a\\log{c}=b\\) dan geldt \\(a^b=c\\). Hierbij is \\(a\\) het grondtal en \\(b\\) de exponent. Als het grondtal van de logaritme weg is gelaten, dan is het grondtal 10 (\\(\\log{c} = ^{10}\\log{c}\\)). Een logaritme met grondtal \\(e=2.71828\\) heet de natuurlijke logaritme (ln), en wordt zo geschreven: \\(^e\\log{c} = \\ln{c}\\). Dit getal \\(e\\) heeft bijzondere eigenschappen, bijvoorbeeld dat de snelheid waarmee de functie \\(e^x\\) toeneemt altijd gelijk is aan zijn eigen waarde. Omdat rekenen aan snelheden en waarden ook in de biologie heel belangrijk kan zijn, kom je dit getal vaak tegen (hier komen we in Hoofdstuk 8 nog op terug).  De rekenregels van logaritmen zijn:\n\n\n\n\n\n\n\nRekenregel\nVoorbeeld\n\n\n\n\n\\(^{b}\\log{b^a} = a\\)\n\\(^{10}\\log{1000} = ^{10}\\log{10^3} = 3\\)\n\n\n\\(\\log{a} + \\log{b} = \\log{ab}\\)\n\\(\\log{100} + \\log{10} = \\log{1000}\\)\n\n\n\\(\\log{a} - \\log{b} = \\log{a/b}\\)\n\\(\\log{8} - \\log{2} = \\log{8/2} = \\log{4}\\)\n\n\n\\(a \\cdot \\log{b} = \\log{b^a}\\)\n\\(7 \\cdot \\log{5} = \\log{5^7}\\)\n\n\n\\(^{a}\\log{a} = 1\\)\n\\(^{2}\\log{2} = 1\\)\n\n\n\\(^{a}\\log{c} = b \\quad \\Rightarrow \\quad a^b = c\\)\n\\(^{2}\\log{8} = 3 \\quad \\Rightarrow \\quad 2^3 = 8\\)",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exponenten & Logaritmen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/exponenten.html#grafieken-met-een-logaritmische-schaal",
    "href": "Wiskunde/exponenten.html#grafieken-met-een-logaritmische-schaal",
    "title": "6  Exponenten & Logaritmen",
    "section": "6.4 Grafieken met een logaritmische schaal",
    "text": "6.4 Grafieken met een logaritmische schaal\nIn de biologie worden vaak grafieken gebruikt om de relaties tussen verschillende variabelen te visualiseren, zoals groei van organismen of concentraties van stoffen. Omdat dergelijke biologische data vaak enorm grote verschillen bevat kan een logaritmische schaal (of korter: “log-schaal”) heel nuttig zijn. In plaats van een lineaire schaal, waarbij de intervallen gelijk zijn, ordent een log-schaal data op basis van machtsverhoudingen. Dit betekent dat gelijke afstanden op de grafiek overeenkomen met exponentiële verschillen in de werkelijke waarde. Hierdoor worden zowel kleine als grote waarden overzichtelijk weergegeven. Log-schalen worden veel gebruikt bij exponentiële processen zoals bacteriële groei.\n\nVoorbeeld logaritmische schaal\nHet nut van de logaritmische schaal wordt snel duidelijk als we teruggaan naar het voorbeeld uit de introductie. We kunnen de groei van de bacteriën in Vergelijking 6.1 weergeven in een grafiek, waarbij de x-as het aantal delingen is en de y-as het aantal bacteriën. Stel je voor dat we beginnen met één bacterie en de groei van de kolonie 100 delingen bijhouden. De grafiek hieronder geeft het resulterende aantal bacteriën op twee manieren weer. In Figuur 6.2 (a) valt meteen op dat de laatste waarden van de grafiek zó groot zijn, dat de kleinere waarden niet goed meer af zijn te lezen. Dit is precies waarvoor de logaritmische schaal uit Figuur 6.2 (b) zo handig is: hierdoor zijn zowel kleine als grote waarden duidelijk af te lezen van de grafiek.\n\n\n\n\n\n\n\n\n\n\n\n(a) Op lineaire schaal.\n\n\n\n\n\n\n\n\n\n\n\n(b) Op logaritmische schaal.\n\n\n\n\n\n\n\nFiguur 6.2: Bacteriële groei over tijd.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exponenten & Logaritmen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/exponenten.html#hellingshoek-van-grafieken-op-een-log-schaal",
    "href": "Wiskunde/exponenten.html#hellingshoek-van-grafieken-op-een-log-schaal",
    "title": "6  Exponenten & Logaritmen",
    "section": "6.5 Hellingshoek van grafieken op een log-schaal",
    "text": "6.5 Hellingshoek van grafieken op een log-schaal\nAls je de rechter grafiek van Figuur 6.2 goed bekijkt, zie je dat deze een hellingshoek (ook wel richtingscoëfficiënt) van 1 heeft (zie ook Hoofdstuk 9). Dit kunnen we ook wiskundig begrijpen. Als we Vergelijking 6.1 namelijk herschrijven als een logaritme met grondtal 2, zien we inderdaad dat we dit resulteert in een lineaire functie van \\(n\\):\n\\[\n\\begin{align}\n^{2}log \\big( B_0 \\cdot 2^n \\big)\\\\\n^{2}log \\big( B_0 \\big) + {^{2}log} \\big( 2^n \\big)\\\\\n^{2}log \\big( B_0 \\big) + n \\cdot  {^{2}log} \\big( 2 \\big)\\\\\n^{2}log \\big( B_0 \\big) + n \\cdot  1\\\\\n\\end{align}\n\\] Dit komt doordat \\(^{a}log(a)\\) altijd gelijk is aan 1 (“tot welke macht moet je a verheffen om a te krijgen?”). Als de populatie elke stap was verviervoudigd, zou de richtingscoëfficiënt dus niet uitkomen op 1:\n\\[\n\\begin{align}\n^{2}log \\big( B_0 \\cdot 4^n \\big)\\\\\n^{2}log \\big( B_0 \\big) + {^{2}log} \\big( 4^n \\big)\\\\\n^{2}log \\big( B_0 \\big) + n \\cdot  {^{2}log} \\big( 4 \\big)\\\\\n^{2}log \\big( B_0 \\big) + n \\cdot   2\\\\\n\\end{align}\n\\] Als we deze verviervoudiging echter uitdrukken op een logaritmische schaal met grondtal 4, krijgen we weer een richtingscoëfficiënt van 1:\n\\[\n\\begin{align}\n^{4}log \\big( B_0 \\cdot 4^n \\big)\\\\\n^{4}log \\big( B_0 \\big) + {^{4}log} \\big( 4^n \\big)\\\\\n^{4}log \\big( B_0 \\big) + n \\cdot  {^{4}log} \\big( 4 \\big)\\\\\n^{4}log \\big( B_0 \\big) + n \\cdot  1\\\\\n\\end{align}\n\\] We krijgen echter nogsteeds een lineair verband! Met andere woorden: als er sprake is van exponentiële groei, krijg je op een log-schaal altijd een rechte lijn, waarbij de richtingscoëfficiënt aangeeft wat de groeisnelheid is.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exponenten & Logaritmen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/exponenten.html#opdrachten",
    "href": "Wiskunde/exponenten.html#opdrachten",
    "title": "6  Exponenten & Logaritmen",
    "section": "6.6 Opdrachten",
    "text": "6.6 Opdrachten\n\nOefening 6.1 \nSchrijf in de vorm \\(a^b\\):\n\na. \\(7^{345} \\cdot 7^5 =\\)\nb. \\(32^{20} \\cdot 32^{18} =\\)\nc. \\(2^5 \\cdot 2^2 \\cdot 2^3 =\\)\nd. \\(3^{25} \\cdot 3^{25} \\cdot 3^{25} =\\)\n\n\nOefening 6.2 \nLos op:\n\na. \\(\\log{100} =\\)\nb. \\(^2\\log{64} =\\)\nc. \\(^8\\log{512} =\\)\nd. \\(^5\\log{125} =\\)\n\n\nOefening 6.3 \nBacillus cereus deelt elke 30 minuten. Je inoculeert een cultuur met precies 100 bacteriën. Hoeveel bacteriën zijn er na 3 uur?\n\n\nOefening 6.4 \nEen bacteriekolonie groeit onder ideale omstandigheden in het laboratorium. Na 3 uur zijn er 10.000 bacteriën, en na 5 uur zijn het er 40.000. Met hoeveel bacteriën is de kolonie begonnen?\nTip: bepaal eerst wat de groeisnelheid van de kolonie is.\n\n\nOefening 6.5 \nLos op voor x:\n\na. \\(\\log{2x} = 3\\)\nb. \\(5e^x=11\\)\nc. \\(^2\\log{64^x}=36\\)\n\n\nOefening 6.6 \nSimplificeer de volgende uitdrukking, neem aan dat \\(n\\neq0\\) en \\(p\\neq0\\):\n\\(\\frac{(n^{-3})^4}{(n^{4}p^{-3})^{-3}}\\).",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exponenten & Logaritmen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/exponenten.html#footnotes",
    "href": "Wiskunde/exponenten.html#footnotes",
    "title": "6  Exponenten & Logaritmen",
    "section": "",
    "text": "Deze e staat voor exponent, en is niet het natuurlijke getal \\(e\\) wat ongeveer gelijk is aan 2.71828↩︎",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Exponenten & Logaritmen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/limieten.html",
    "href": "Wiskunde/limieten.html",
    "title": "7  Asymptoten & Limieten",
    "section": "",
    "text": "7.1 Introductie\nEen asymptoot is een lijn, die door een functie wordt benaderd, maar nooit precies bereikt. Asymptoten zijn een wiskundig concept dat belangrijk kan zijn in biologische modellen, vooral om te begrijpen hoe een functie zich gedraagt wanneer de variabele heel groot of heel klein wordt. Dit is vooral handig voor inzicht in biologische systemen op de langere termijn. Ook bij het schetsen van een grafiek zijn asymptoten vaak een handig hulpmiddel. Dit hoofdstuk beschrijft wat verticale en horizontale asymptoten zijn en hoe je ze kunt vinden.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Asymptoten & Limieten</span>"
    ]
  },
  {
    "objectID": "Wiskunde/limieten.html#horizontale-asymptoten",
    "href": "Wiskunde/limieten.html#horizontale-asymptoten",
    "title": "7  Asymptoten & Limieten",
    "section": "7.2 Horizontale asymptoten",
    "text": "7.2 Horizontale asymptoten\nEen horizontale asymptoot is een lijn met de vorm \\(y=a\\). De grafiek benadert deze horizontale lijn voor hele grote of hele kleine waarden van \\(x\\). Wiskundig heten deze “hele grote” en “hele kleine” waarden limieten.\nDe notatie hiervoor is als volgt:\n\\[\\lim_{x \\rightarrow +\\infty}{f(x)} = a\\]\nAls de functie \\(a\\) benadert voor hele grote positieve waarden van \\(x\\), of: \\[\\lim_{x \\rightarrow -\\infty}{f(x)} = a\\]\nAls de functie \\(a\\) benadert voor hele grote negatieve waarden van \\(x\\). Zoals je uit deze notatie kunt aflezen kun je horizontale asymptoten vinden door te kijken of de grafiek een waarde benadert voor \\(x \\rightarrow \\pm \\infty\\).\n\nVoorbeeld\nEen voorbeeld van een functie met een horizontale asymptoot is: \\[f(x) = 5 + \\frac{1}{x}\\] Als we hele grote waarden voor \\(x\\) invullen in deze functie, dan komt de uitkomst steeds dichter in de buurt van 5. Dit geldt zowel voor grote positieve als negatieve waarden. Doordat \\(1\\over x\\) nooit gelijk aan 0 kan worden, zal \\(f(x)\\) nooit precies 5 worden. Daarom heeft deze functie een horizontale asymptoot \\(y = 5\\).\n\n\n\n\n\n\n\n\nFiguur 7.1: De grafiek voor de functie y = 5 + 1/x. Deze functie heeft zowel een horizontale als verticale asymptoot.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Asymptoten & Limieten</span>"
    ]
  },
  {
    "objectID": "Wiskunde/limieten.html#verticale-asymptoten",
    "href": "Wiskunde/limieten.html#verticale-asymptoten",
    "title": "7  Asymptoten & Limieten",
    "section": "7.3 Verticale asymptoten",
    "text": "7.3 Verticale asymptoten\nEen verticale asymptoot is een lijn met de vorm \\(x=a\\). Dit betekent dat de waarde van \\(f(x)\\) voor \\(x=a\\) naar oneindig gaat. Dit kan zowel plus als min oneindig zijn. In wiskundige notatie betekent dat: \\[\\lim_{x \\uparrow 0}{f(x)} = \\pm \\infty\\] als de asymptoot bereikt wordt vanaf de “onderkant” (vanaf het negatieve domein / de linkerkant van een grafiek) door x te verhogen tot \\(x=a\\). Of, als de asymptoot vanaf de “bovenkant” (vanaf het positieve domein / de rechterkant) bereikt wordt door x te verlagen tot \\(x=a\\). \\[\\lim_{x \\downarrow 0}{f(x)} = \\pm \\infty\\]\n\nVoorbeeld\nDe hierboven genoemde functie \\(f(x) = 5 + \\frac{1}{x}\\) heeft niet alleen een horizontale asymptoot, maar ook een verticale asymptoot. Dit is vaak het geval bij functies waarbij de variabele in de noemer van een breuk staat, omdat we niet kunnen delen door 0. Zoals je hebt geleerd is delen hetzelfde als vermenigvuldigen met het omgekeerde. Delen door een heel klein getal is dus hetzelfde als vermenigvuldigen met een heel groot getal. Delen door 0 (oneindig klein), is dus hetzelfde als vermenigvuldigen met oneindig. Omdat “oneindig” geen echte hoeveelheid is, en eigenlijk alleen als concept bestaat, wordt er meestal gezegd dat de functie niet gedefiniëerd is wanneer er door 0 gedeeld wordt.\nOm de functie te kunnen schetsen, moeten we weten hoe het eruit ziet rondom het punt \\(x=0\\). Als \\(x\\) net iets groter is dan 0, wordt \\(f(x)\\) heel groot. Dit komt doordat delen door een heel klein positief getal een hele grote positieve uitkomst geeft. Als we \\(x=0\\) benaderen vanuit het negatieve domein, delen we door een hele kleine negatieve waarde, wat een hele grote negatieve waarden als uitkomst geeft. Dit is waarom Figuur 7.1 de vorm heeft zoals weergegeven.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Asymptoten & Limieten</span>"
    ]
  },
  {
    "objectID": "Wiskunde/limieten.html#limieten-bepalen",
    "href": "Wiskunde/limieten.html#limieten-bepalen",
    "title": "7  Asymptoten & Limieten",
    "section": "7.4 Limieten bepalen",
    "text": "7.4 Limieten bepalen\n\n1. Limieten voor \\(x\\to \\infty\\)\nWanneer \\(x\\) naar oneindig gaat, kun je niet simpelweg \\(x= \\infty\\) invullen, omdat oneindig geen getal is. Kijk in plaats daarvan naar het gedrag van de functie voor grote waarden van \\(x\\). Voor functies zoals \\(f(x)=ax^3-bx^2\\) moet je kijken naar de termen met de hoogste macht van \\(x\\): deze termen spelen altijd de overhand als \\(x\\) heel groot is. In dit geval is \\(ax^3\\) de term met de hoogste macht van \\(x\\). Dit betekent dat het positieve gedeelte van de functie (\\(ax^3\\)) sneller toeneemt dan het negatieve gedeelte (\\(-bx^2\\)). De functie zal dus steeds groter worden naarmate \\(x\\) groter wordt, dus: \\[ \\lim_{x \\to \\infty} ax^3 - bx^2= \\infty\\]\n\n\n2. Limieten van rationale functies\nRationale functies zijn functies die een breuk bevatten, in de vorm \\(f(x)={p(x) \\over g(x)}\\). Bij het berekenen van limieten van deze functies kun je de volgende regels toepassen:\n\n\n\n\n\n\n\nOmschrijving\nWiskundige notatie\n\n\n\n\nAls je een constante deelt door \\(x\\), gaat de uitkomst naar 0 voor grote waarden van \\(x\\) (\\(x \\rightarrow \\infty\\))\n\\(\\lim_{x \\to \\infty } {C \\over x}  =0\\)\n\n\nAls je een constante deelt door \\(x\\), gaat de uitkomst naar \\(\\infty\\) wanneer \\(x \\rightarrow 0\\)\n\\(\\lim_{x \\to 0 } {C \\over x}  =\\infty\\)\n\n\nAls je \\(x\\) deelt door een constante, gaat de uitkomst naar \\(\\infty\\) voor grote waarden van \\(x\\)\n\\(\\lim_{x \\to \\infty } {x \\over C}  =\\infty\\)\n\n\nAls je \\(x\\) deelt door een constante, gaat de uitkomst naar \\(0\\) wanneer \\(x \\rightarrow 0\\)\n\\(\\lim_{x \\to 0 } {x \\over C}  = 0\\)\n\n\n\n\n\nLimieten bepalen\nVoor de meeste functies kun je eenvoudig limieten bepalen door de volgende regels toe te passen:\n\nVind de hoogste macht van \\(x\\) in de functie.\nDeze term (met de hoogste macht) zal de overhand hebben.\nGaat deze term naar oneindig? Dan is de limiet oneindig. Gaat deze term naar 0? Dan is de limiet 0.\n\nSoms is een functie echter minder eenvoudig, en moet je deze eerst herschrijven (vereenvoudigen) om in te kunnen zien wat de limieten zijn. Als \\(x\\) bijvoorbeeld zowel in de teller als noemer staat, kun je deze herschrijven door zowel teller als noemer te delen door de hoogste macht van \\(x\\). Dan kun je toch inzien wat er zal gebeuren. Bijvoorbeeld:\n\\[\nf(x) = \\frac{2x^3 + x^2}{x^3 - 3x^2} = \\frac{\\frac{2x^3}{x^3} + \\frac{x^2}{{x^3}}}{\\frac{x^3}{x^3} - \\frac{3x^2}{x^3}} = \\frac{2+\\frac{1}{x}}{1 - \\frac{3}{x}}\n\\] Nu kun je zien dat wanneer \\(x\\) naar oneindig gaat, de breuken 0 naderen en de functie dus \\({2 \\over 1} = 2\\) zal naderen.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Asymptoten & Limieten</span>"
    ]
  },
  {
    "objectID": "Wiskunde/limieten.html#opdrachten",
    "href": "Wiskunde/limieten.html#opdrachten",
    "title": "7  Asymptoten & Limieten",
    "section": "7.5 Opdrachten",
    "text": "7.5 Opdrachten\n\nOefening 7.1 \nBepaal de volgende limieten:\na. \\(\\lim_{x\\to\\infty}3x^2-2x+5\\)\nb. \\(\\lim_{ x \\to 0+} {1 \\over x}\\) (let op: nadert 0 vanuit het positieve domein)\nc. \\(\\lim_{ x \\to 0-} {1 \\over x}\\) (let op: nadert 0 vanuit het negatieve domein)\nd. \\(\\lim_{x \\to \\infty}{x \\over x+2}\\)\ne. \\(\\lim_{x \\to \\infty}{1 \\over a+x}\\)\nf. \\(\\lim_{x \\to \\infty}{(ax^2+b) \\over cx^3}+d\\)\n\n\nOefening 7.2 \nBepaal de asymptoten van de volgende functies:\n\na. \\(f(x) = {x \\over x-2} + 1\\)\nb. \\(f(x) = {ax \\over bx+c} - d\\) waarbij \\(d&gt;a/b\\)",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Asymptoten & Limieten</span>"
    ]
  },
  {
    "objectID": "Wiskunde/afgeleiden.html",
    "href": "Wiskunde/afgeleiden.html",
    "title": "8  Afgeleiden",
    "section": "",
    "text": "8.1 Introductie\nDe afgeleide van een functie beschrijft hoe steil de functie is, oftewel wat de richtingscoëfficiënt is. Een rechte lijn met de vorm \\(y=ax+b\\) heeft voor elke \\(x\\)-waarde dezelfde richtingscoëfficiënt (\\(a\\)). We kunnen daarom zeggen dat de afgeleide van \\(y=ax+b\\) gelijk is aan een constante waarde, namelijk \\(y=a\\). De afgeleide vertelt iets over hoe snel \\(y\\) verandert: hoe hoger de richtingscoëfficiënt (\\(a\\)), hoe sneller \\(y\\) stijgt of daalt.\nDe afgeleide van een lineaire vergelijking is dus een constante waarde die niet verandert voor verschillende \\(x\\)-waarden. Voor de meeste (meer biologisch interessante) vergelijkingen is dit echter niet het geval. Dit betekent dat de afgeleide een functie is van \\(x\\). Met andere woorden: de grafiek heeft niet voor elke \\(x\\)-waarde dezelfde richtingscoëfficiënt. Neem bijvoorbeeld de vergelijking \\(y = x^2 - 10\\):\nFiguur 8.1: Grafiek van een kwadratisch verband (y = 2x^2 + 10). De grafiek is eerst dalend, dan vlak (bij x = 0), en daarna stijgend.\nDe richtingscoëfficiënt varieert veel voor verschillende \\(x\\)-waarden: de grafiek daalt eerst voor \\(x&lt;0\\), loopt dan even horizontaal voor \\(x=0\\), en stijgt steeds sneller voor \\(x&gt;0\\). Met andere woorden: de afgeleide is negatief voor lage waarde van \\(x\\), en positief voor positieve waarden van \\(x\\). Als de afgeleide gelijk is aan \\(0\\), weten we dat de functie een piek of een dal heeft.\nDe afgeleide van \\(f(x)\\) schrijven we als \\(f'(x)\\). Als \\(f(x)\\) de positie van een fiets geeft, geeft \\(f'(x)\\) de snelheid van de fiets. Eventueel kunnen we ook van deze snelheid \\(f'(x)\\) de afgeleide bepalen, die wordt geschreven als \\(f''(x)\\). Deze staat dan voor de versnelling van de fiets. Omdat biologische processen vaak omschreven worden in termen van snelheden, is het belangrijk om begrip te hebben van wat afgeleiden precies zijn. De meest voorkomende rekenregels leer je door ermee te oefenen vanzelf uit je hoofd, maar het is niet nodig om alle regels uit je hoofd te weten. Bij de toets kun je specifieke rekenregels altijd even nagaan met behulp van één van de spiekbriefjes.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Afgeleiden</span>"
    ]
  },
  {
    "objectID": "Wiskunde/afgeleiden.html#afgeleiden-van-veel-voorkomende-vergelijkingen",
    "href": "Wiskunde/afgeleiden.html#afgeleiden-van-veel-voorkomende-vergelijkingen",
    "title": "8  Afgeleiden",
    "section": "8.2 Afgeleiden van veel voorkomende vergelijkingen",
    "text": "8.2 Afgeleiden van veel voorkomende vergelijkingen\n\n\n\n\n\n\n\n\n\nFunctie\nAfgeleide\n\\(f(x)\\)\n\\(f'(x)\\)\n\n\n\n\n\\(a\\)\n\\(0\\)\n\\(6\\)\n\\(0\\)\n\n\n\\(ax\\)\n\\(a\\)\n\\(7x\\)\n\\(7\\)\n\n\n\\(ax^b\\)\n\\(b \\cdot a x^{b-1}\\)\n\\(8x^3\\)\n\\(24x^2\\)\n\n\n\\(c \\cdot f(x)\\)\n\\(c \\cdot f'(x)\\)\n\\(2x^{13}\\)\n\\(2 \\cdot 13x^{12} = 26x^{12}\\)\n\n\n\\(f(x) + g(x)\\)\n\\(f'(x) + g'(x)\\)\n\\(x^4 + 4x\\)\n\\(4x^3 + 4\\)\n\n\n\\(a^x\\)\n\\(a^x \\cdot ln(a)\\)\n\\(2^x\\)\n\\(2^x \\cdot ln(2)\\)\n\n\n\\(e^x\\)\n\\(e^x\\)\n\\(e^x\\)\n\\(e^x\\)\n\n\n\\(a e^{bx}\\)\n\\(b \\cdot a e^{bx}\\)\n\\(\\frac{1}{2} \\cdot \\pi \\sqrt{2} \\cdot e^{2x}\\)\n\\(\\pi \\sqrt{2} \\cdot e^{2x}\\)\n\n\n\\(e^{f(x)}\\)\n\\(f'(x) \\cdot e^{f(x)}\\)\n\\(e^{2x^2 - x}\\)\n\\((4x - 1) \\cdot e^{2x^2 - x}\\)\n\n\n\\(a^{f(x)}\\)\n\\(\\ln(a) \\cdot f'(x) \\cdot a^{f(x)}\\)\n\\(5^{4x - 1}\\)\n\\(\\ln(5) \\cdot 4 \\cdot 5^{4x - 1}\\)\n\n\n\\(\\ln(x)\\)\n\\(\\frac{1}{x}\\)\n\\(\\ln(x)\\)\n\\(\\frac{1}{x}\\)\n\n\n\\(\\ln(a x) = \\ln(a) + \\ln(x)\\)\n\\(\\frac{1}{x}\\)\n\\(\\ln(4x) = \\ln(4) + \\ln(x)\\)\n\\(\\frac{1}{x}\\)\n\n\n\\(f(x) \\cdot g(x)\\)\n\\(f'(x) \\cdot g(x) + f(x) \\cdot g'(x)\\)\n\\((x^2 - 4)(x^3 + 2x + 3)\\)\n\\(5x^4 - 6x^2 + 6x - 8\\)\n\n\n\\(\\frac{f(x)}{g(x)}\\)\n\\(\\frac{g(x) \\cdot f'(x) - f(x) \\cdot g'(x)}{(g(x))^2}\\)\n\\(\\frac{4x + 1}{x^2 + 1}\\)\n\\(\\frac{-4x^2 - 2x + 4}{(x^2 + 1)^2}\\)",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Afgeleiden</span>"
    ]
  },
  {
    "objectID": "Wiskunde/afgeleiden.html#opdrachten",
    "href": "Wiskunde/afgeleiden.html#opdrachten",
    "title": "8  Afgeleiden",
    "section": "8.3 Opdrachten",
    "text": "8.3 Opdrachten\n\nOefening 8.1 \nBereken de afgeleide van de volgende functies:\na. \\(f(x)=x^2+15x\\)\nb. \\(f(x)=12x^5-6\\)\nc. \\(f(x)=\\frac{7}{x^4}\\)\nd. \\(f(x)=ax^3-bx^5\\)\n\n\nOefening 8.2 \nBekijk de hierboven gegeven tabel met afgeleiden van veel voorkomende vergelijkingen. Leg in je eigen woorden uit waarom het nuttig kan zijn om exponentiële groei op te schrijven met grondtal \\(e\\) (het getal van Euler die ongeveer gelijk is aan 2.71828, niet te verwarren met e die in R staat voor ‘exponent’).",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Afgeleiden</span>"
    ]
  },
  {
    "objectID": "Wiskunde/schetsen.html",
    "href": "Wiskunde/schetsen.html",
    "title": "9  Functies schetsen",
    "section": "",
    "text": "9.1 Introductie\nFuncties laten zien hoe variabelen met elkaar samenhangen. Bijvoorbeeld, \\(y=f(x)\\) kan beschrijven hoe zwaar iemand gemiddeld is (\\(y\\) is het gewicht) op basis van hun lengte (\\(x\\) is de lengte). Of een functie \\(f(t)\\) kan laten zien hoeveel bacteriën er zijn (\\(B\\)) na verloop van tijd (\\(t\\)). Functies zijn dus een belangrijk middel om gegevens te beschrijven en samen te vatten.\nOm te begrijpen wat een functie \\(f(x)\\) laat zien, is het nuttig om de grafiek ervan te kunnen tekenen. Hiervoor moeten we een aantal belangrijke punten van de functie bepalen: eigenschappen zoals snijpunten met de x- en y-as, asymptoten, en waar eventuele toppen of dalen liggen. Dit vereist technieken zoals het oplossen van vergelijkingen, het vinden van limieten en het berekenen van afgeleiden, zoals eerder besproken.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functies schetsen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/schetsen.html#veelvoorkomende-functies",
    "href": "Wiskunde/schetsen.html#veelvoorkomende-functies",
    "title": "9  Functies schetsen",
    "section": "9.2 Veelvoorkomende functies",
    "text": "9.2 Veelvoorkomende functies\nFuncties worden vaak weergegeven door hun grafiek. Hierbij zetten we de waarden van \\(x\\) op de x-as en de waarde van de functie \\(f(x)\\) op de y-as. Hieronder staan enkele veelvoorkomende grafieken.\n\nGrafieken van een constante functie\nDe grafiek van een functie van de vorm \\(y=p\\) is een horizontale lijn die de y-as snijdt op de waarde \\(p\\). In plaats daarvan kunnen we ook vinden dat \\(x=q\\), wat een verticale lijn is die de x-as snijdt op de waarde \\(q\\).\n\n\n\n\n\n\n\n\nFiguur 9.1: De grafiek voor de functie y = 2 is een rechte horizontale lijn. De grafiek voor de functie x = 5 is een rechte verticale lijn.\n\n\n\n\n\n\n\nGrafieken van lineaire functies\nDe grafiek van een lineaire functie \\(y=ax+b\\) is een rechte lijn met helling \\(a\\) en snijpunt \\(b\\) op de y-as. Dat laatste kun je zien door \\(x=0\\) in te vullen: op dit moment snijdt je de y-as! Als \\(a&gt;0\\), loopt de lijn stijgend; bij \\(a&lt;0\\) daalt de lijn. Hoe groter \\(|a|\\), hoe steiler de lijn.\n\n\n\n\n\n\n\nFiguur 9.2: Interactieve plot van een lineair verband. Verander zelf de waarden voor a en b!\n\n\n\n\n\nGrafieken van kwadratische functies\nDe grafiek van de kwadratische vergelijking \\(y=ax^2+bx+c\\) is een parabool. Bij \\(a&gt;0\\) opent de parabool naar boven (dalparabool), bij \\(a&lt;0\\) naar beneden (bergparabool). Dit kan je zelf altijd even nagaan door hele grote waarden voor \\(x\\) in te vullen; voor \\(a&gt;0\\) krijg je hele grote positieve getallen, maar voor \\(a&lt;0\\) krijg je juist hele grote negatieve getallen. De waarden van \\(a\\), \\(b\\) en \\(c\\) bepalen hoe de parabool ligt. Met de abc-formule kun je vinden wanneer de functie \\(0\\) is (of eventueel door te ontbinden in factoren, zie Hoofdstuk 4). Dit zijn de snijpunten met de x-as. Door \\(x=0\\) in te vullen vindt je het snijpunt met de y-as (hier: \\(c\\)). Door de afgeleide te vinden en deze gelijk te stellen aan \\(0\\) vind je waar de piek of het dal ligt.\n\n\n\n\n\n\n\nFiguur 9.3: Interactieve Desmos-plot van een kwadratisch verband. Verander de waarden van a, b en c en kijk wat er gebeurt met de vorm van de grafiek!\n\n\n\n\n\nGrafieken van machtsfuncties\nGrafieken van functies zoals \\(x^a\\) veranderen van hellingshoek naar mate \\(x\\) groter of kleiner wordt. Als \\(a&gt;1\\), dan neemt de hellingshoek toe, en . Als \\(a=1\\), dan blijft de hellingshoek gelijk, want dan is de functie precies gelijk aan \\(y=x\\). Als \\(0&lt;a&lt;1\\) (als \\(a\\) tussen 0 en 1 ligt), neemt de hellingshoek af. In gevallen waarbij \\(0&lt;a&lt;1\\) hebben we namelijk te maken met een wortelverband. De functie \\(x^\\frac{1}{2}\\) is hetzelfde als \\(\\sqrt{x}\\). Naast deze “vierkante”-wortel hebben we ook nog andere wortels. Zo is \\(x^\\frac{1}{3}\\) bijvoorbeeld hetzelfde als \\(^3\\sqrt{x}\\).\n\n\n\n\n\n\n\n\nFiguur 9.4: De grafiek van de functie x^a is een rechte lijn voor a = 1, convex voor a &gt; 1 en concaaf voor a &lt; 1.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functies schetsen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/schetsen.html#stappenplan-functies-schetsen",
    "href": "Wiskunde/schetsen.html#stappenplan-functies-schetsen",
    "title": "9  Functies schetsen",
    "section": "9.3 Stappenplan functies schetsen",
    "text": "9.3 Stappenplan functies schetsen\n\nVind de snijpunten met de \\(x\\)-as door \\(y = f(x) = 0\\) op te lossen.\nVind de snijpunten met de \\(y\\)-as door \\(x=0\\) in te vullen in \\(y = f(x)\\).\n\n\n\n\n\n\n\nTip\n\n\n\nNiet elke functie heeft een snijpunt met de \\(x\\)- en/of \\(y\\)-as.\n\n\n\nVind horizontale asymptoten door de limieten \\(y = \\lim x \\to \\pm \\infty\\) te berekenen.\nVoor rationale functies, met de vorm \\(f(x) = {p(x) \\over q(x)}\\), vind verticale asymptoten door te bepalen of er waarden voor \\(x\\) zijn waarvoor \\(q(x)=0\\) (en dus \\(f(x) \\to \\pm \\infty\\)). Deze \\(x\\)-waarden zijn verticale asymptoten van de functie.\nVind minima en maxima door te bepalen voor welke \\(x\\)-waarden geldt dat \\(f'(x)=0\\). Bepaal vervolgens de \\(y\\)-waarde van deze minima en maxima door de gevonden \\(x\\)-waarden in te vullen in \\(f(x)\\).\n\n\n\n\n\n\n\nTip\n\n\n\nAls je twijfelt of een functie stijgt of daalt voor bepaalde \\(x\\)-waarden kun je gebruikmaken van de afgeleide voor die \\(x\\)-waarden. Als \\(f'(x) &gt; 0\\) dan stijgt de functie rond die \\(x\\)-waarde. Als \\(f'(x) &lt; 0\\) dan daalt de functie rond die \\(x\\)-waarde.",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functies schetsen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/schetsen.html#samenvatting-in-figuurvorm",
    "href": "Wiskunde/schetsen.html#samenvatting-in-figuurvorm",
    "title": "9  Functies schetsen",
    "section": "9.4 Samenvatting in figuurvorm",
    "text": "9.4 Samenvatting in figuurvorm\nOnderstaand figuur vat alle informatie samen in één grafiek voor de functie \\(f(x) = \\frac{-(2x-1)(x-10)(4x-6)}{x^3+6}\\). Door de snijpunten met de x- en y-as te vinden, de functie af te leiden, en limieten te bepalen, zou je deze functie zelf ook moeten kunnen schetsen. Hoewel je in de praktijk vaak R of een ander programma zal gebruiken om een dergelijk complexe functie te tekenen, weet je door het zelf te schetsen veel meer over de precieze ligging van de functie, en hoe deze van vorm zal veranderen als één van de getallen verandert.\n\n\n\n\n\n\n\n\nFiguur 9.5: Overzicht van alle hulpmiddelen die nuttig zijn bij het schetsen van een functie. De weergegeven functie is f(x) = -((2x-1)(x-10)(4x-6))/(x^3+6)",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functies schetsen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/schetsen.html#opdrachten",
    "href": "Wiskunde/schetsen.html#opdrachten",
    "title": "9  Functies schetsen",
    "section": "9.5 Opdrachten",
    "text": "9.5 Opdrachten\n\nOefening 9.1 Gebruik het stappenplan uit dit hoofdstuk om de volgende functies te schetsen:\na. \\(y=3-6x\\)\nb. \\(y=px+q\\), neem aan dat \\(p&gt;0\\) en \\(q&gt;0\\)\nc. \\(y=x-3x^2\\)\nd. \\(y=(a-x) \\cdot (b-x) \\cdot (c-x)\\), neem aan dat \\(a,b,c&gt;0\\) en \\(a&lt;b&lt;c\\) (bijvoorbeeld \\(b=2 \\cdot a\\) en \\(c=3 \\cdot a\\))\ne. \\(y=x^3-5x^2\\)\nf. \\(y=\\frac{4x}{x+2}+4\\)\n\n\nOefening 9.2 We zijn vaak gewend dat x op de horizontale as staat, en y op de verticale as. Soms staat het echter helemaal niet vast wat we precies op welke as moeten schetsen (of heten de variabelen helemaal geen x- en y!).\nStel we vinden een verband tussen het aantal konijnen (\\(K\\)) en het aantal vossen (\\(V\\)) omschreven door de functie \\(K = a - b \\cdot V\\).\na. Hoeveel konijnen zijn er als er geen vossen zijn? Wat is effect van vossen op de hoeveelheid konijnen?\nb. Teken een assenstelsel met \\(K\\) op de x-as, en \\(V\\) op de y-as. Probeer de functie \\(K = a - b \\cdot V\\) te schetsen.\nc. Herschrijf \\(K = a - b \\cdot V\\) zodat het aantal vossen wordt uitgedrukt als een functie van het aantal konijnen. Schets nu ook deze functie in je assenstelsel. Wat valt je op?\nd. Als we meteen het aantal konijnen op de y-as hadden gezet, hadden we dan de functie hoeven herschrijven?",
    "crumbs": [
      "Basiswiskunde",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Functies schetsen</span>"
    ]
  },
  {
    "objectID": "Wiskunde/wiskunde_questions.html",
    "href": "Wiskunde/wiskunde_questions.html",
    "title": "Oefenvragen wiskunde",
    "section": "",
    "text": "Instructies\nDit korte oefen-tentamentje voor wiskunde bestaat uit 10 meerkeuzevragen, 3 open vragen, en 1 (meerkeuze) vraag over functies schetsen. Kies bij de meerkeuzevragen het juiste antwoord en beantwoord de open vragen met een getal.",
    "crumbs": [
      "Basiswiskunde",
      "Oefenvragen wiskunde"
    ]
  },
  {
    "objectID": "Wiskunde/wiskunde_questions.html#meerkeuzevragen",
    "href": "Wiskunde/wiskunde_questions.html#meerkeuzevragen",
    "title": "Oefenvragen wiskunde",
    "section": "Meerkeuzevragen",
    "text": "Meerkeuzevragen\n\nWat is de afgeleide van \\(f(x) = x^3 + 10x\\)?\n\n\n\\(3x^2 - 10\\)\n\n\n\\(x^2 + 10\\)\n\n\n\\(3x + 10\\)\n\n\n\\(2x^3 + 10\\)\n\n\n\\(3x^2 + 10\\)\n\n\nSchrijf op als één breuk: \\(\\frac{3}{4a} + \\frac{1}{2b}\\)\n\n\n\\(\\frac{2b + 4a}{8a}\\)\n\n\n\\(\\frac{5b}{4a}\\)\n\n\n\\(\\frac{6b + 4a}{8ab}\\)\n\n\n\\(\\frac{1b}{2a}\\)\n\n\n\\(\\frac{3b}{2ab}\\)\n\n\nDe limiet van \\(\\frac{1}{x}\\)als \\(x \\to \\infty\\)is:\n\n\n\\(1\\)\n\n\n\\(0\\)\n\n\n\\(\\infty\\)\n\n\n\\(-\\infty\\)\n\n\n\\(\\text{Geen van allen}\\)\n\n\nWat is \\({^{10}\\log{(1000)}}\\)?\n\n\n2\n\n\n3\n\n\n4\n\n\n10\n\n\nWelke van de volgende functies heeft een verticale asymptoot bij \\(x = a\\)?\n\n\n\\(x + a\\)\n\n\n\\(\\frac{1}{x-a}\\)\n\n\n\\(x^2 - a\\)\n\n\n\\(\\log({a \\over x})\\)\n\n\nWat is de afgeleide van \\(e^x\\)?\n\n\n\\(x e^x\\)\n\n\n\\(e^{x-1}\\)\n\n\n\\(e^x\\)\n\n\n\\(xe^{x-1}\\)\n\n\nLos op: \\(\\frac{a}{x} = 7q\\)\n\n\n\\(x = \\frac{a}{q}\\)\n\n\n\\(x = \\frac{a}{7q}\\)\n\n\n\\(x = q\\)\n\n\n\\(x = a\\)\n\n\nWat is de horizontale asymptoot van \\(f(x) = \\frac{3x}{x+2}\\)?\n\n\n\\(y = 3\\)\n\n\n\\(y = 2\\)\n\n\n\\(y = 0\\)\n\n\n\\(y = \\infty\\)\n\n\nLos op: \\(3^x = 27\\)\n\n\n\\(x = 3\\)\n\n\n\\(x = 9\\)\n\n\n\\(x = 2\\)\n\n\n\\(x = 4\\)\n\n\nWelke van deze functies heeft GEEN asymptoot?\n\n\n\\(f(x)=\\frac{x}{x-b}\\)\n\n\n\\(f(x)=\\frac{q}{x+a}\\)\n\n\n\\(f(x)=\\frac{r}{x}\\)\n\n\n\\(f(x)=bx^2\\)",
    "crumbs": [
      "Basiswiskunde",
      "Oefenvragen wiskunde"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html",
    "href": "Modellen/intro_modellen.html",
    "title": "Introductie",
    "section": "",
    "text": "Leerdoelen\nAan het eind van dit introducerende hoofdstuk, word je geacht het volgende te kunnen:",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#leerdoelen",
    "href": "Modellen/intro_modellen.html#leerdoelen",
    "title": "Introductie",
    "section": "",
    "text": "Uitleggen waarom modellen een belangrijk stuk gereedschap zijn binnen de biologie\nDe drie basisingrediënten van elk model benoemen\nOnderscheid maken tussen onderwerp (wat gemodelleerd wordt) en modelformalismen (hoe er gemodelleerd wordt)\nVoorbeelden van verschillende modelformalismen geven, en alvast enkele aannames die erbij komen kijken benoemen (nog niet in detail: gedurende de cursus leer je meer over de details)\nUitleggen wanneer een model “goed” is",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#onze-intuïtie-is-niet-genoeg",
    "href": "Modellen/intro_modellen.html#onze-intuïtie-is-niet-genoeg",
    "title": "Introductie",
    "section": "Onze intuïtie is niet genoeg",
    "text": "Onze intuïtie is niet genoeg\nWaarom zijn er het ene jaar zoveel meer konijnen dan het andere jaar? Hoe worden de patronen op de huid van een zebravis aangelegd? Komt het afschieten van runderen in de Oostvaarderseplassen om de populatiegrootte te beheersen het welzijn van de dieren ten goede? Wat is er aan de hand tijdens een hartritmestoornis, en op welke manieren kunnen we het hartritme weer herstellen? Dit zijn allemaal belangrijke biologische vraagstukken, maar zoals jullie allemaal weten zijn biologische systemen vaak erg ingewikkeld. In het vakgebied Theoretische Biologie worden daarom modellen en simulaties gebruikt, om inzicht te vergaren en zodoende betere voorspellingen te kunnen doen. Omdat modellen een steeds belangrijker onderdeel zijn van de biologie, is het voor elke bioloog belangrijk om de nodige basiskennis te hebben.\n\n\n\n\n\n\n\nDoor het maken van modellen van biologische systemen kunnen nieuwe inzichten krijgen en betere voorspellingen doen.\n\n\nOm echt goed te begrijpen wat een model is, gaan we helemaal bij de basis beginnen en de meest simpele modellen bespreken. Je zal zien dat zelfs simpele modellen zich vaak onvoorspelbaar of tegenintuïtief kunnen gedragen. Dit vertelt ons meteen al dat onze eigen intuïtie er zelfs voor schijnbaar simpele systemen vaak naast zit en modellen dus essentiëel zijn om te kijken hoe een systeem nou eigenlijk werkt! Daarom gaan we in dit cursusonderdeel leren hoe je modellen moet lezen (wiskunde en simpele R-scripts), en welke conclusies je er wel/niet uit kan trekken. Hiervoor bespreken we modellen uit verschillende vakgebieden binnen de biologie (microbiologie, ecologie, gedrag, evolutie, en nog veel meer). Wat je favoriete onderwerp ook is: je komt als bioloog – ook na deze cursus – zeer zeker nog meer met modellen in aanraking!",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#planning-biologische-modellen",
    "href": "Modellen/intro_modellen.html#planning-biologische-modellen",
    "title": "Introductie",
    "section": "Planning “Biologische modellen”",
    "text": "Planning “Biologische modellen”\nDit cursusonderdeel is verdeeld over 9 genummerde hoofdstukken, die we gedurende drie weken bespreken:\n\nWeek 1:\n\n10  Exponentiële groei\n11  Modelleren met ODEs\n12  Dichtheidseffecten\n\nWeek 2:\n\n13  Ruimtelijke groei\n14  Predator-prooi interacties\n15  Competitie en evolutie\n\nWeek 3:\n\n16  Zwermen en foerageren\n17  Reacties en diffusie\n18  Exciteerbare media\n\n\nElke dag bespreken we in de hoorcolleges het onderwerp van een hoofdstuk (en eventuele aanvulling), waarna jullie tijdens het werkcollege vragen beantwoorden over de stof. Daarnaast is er dinsdag- en donderdagmiddag ruimte voor zelfstudie, en gaan jullie tijdens de laatste week een verslag over een mini-project schrijven. Een volledig overzicht van de planning, vind je hier.",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#wat-is-een-model-eigenlijk",
    "href": "Modellen/intro_modellen.html#wat-is-een-model-eigenlijk",
    "title": "Introductie",
    "section": "Wat is een model eigenlijk?",
    "text": "Wat is een model eigenlijk?\nMaar voordat we aan deze modules beginnen, wil ik jullie eerst graag uitleggen wat modellen nou eigenlijk zijn.\n\n\n\n\n\n\nFiguur 1: Modellen zijn versimpelde representaties van complexe situaties. Door deze versimpeling te bestuderen kunnen we dingen leren over biologie\n\n\n\nStel je voor dat je op de Veluwe aan het wandelen bent, en het scenario tegenkomt aan de linker zijde van Figuur 1: overal lopen verschillend gekleurde konijnen, roofvogels vliegen rond en grijpen hun kans, en in de achtergrond zie je herten, naaldbossen, en duistere wolken. Hoewel dit scenario natuurlijk een enorme karikatuur is, worden we in de biologie wel vaak geconfronteerd met dit probleem: biologische systemen bestaan uit veel onderdelen die allemaal tegelijk elkaar beïnvloeden. Om een model te bouwen dat ons helpt beter te begrijpen wat hier gebeurt is het allereerst belangrijk om te bepalen wat in dit (eco)systeem essentieel is voor wat we willen begrijpen. Op die manier zal het te bouwen model een versimpeling van de complexe realiteit zijn die makkelijker te analyseren en begrijpen is. Zo zie je aan de rechter zijde van Figuur 1 dat we de achtergrond (herten, bos, wolken) even vergeten, en ons richten op slechts een paar onderdelen. Wellicht zijn we vooral geïnteresseerd in de interacties tussen de roofvogels en de konijnen. De roofvogels jagen op konijnen, terwijl de konijnen doen waar konijnen goed in zijn: vermenigvuldigen.\nIn de biologie zijn we veelal geïnteresseerd in de dynamiek van systemen. Dat betekent: hoe verandert het systeem over de tijd? In het voorbeeld van de roofvogels en konijnen, kunnen we ons bijvoorbeeld afvragen welk van de twee soorten zal toenemen, en welke zal afnemen. Je kunt je natuurlijk wel voorstellen dat als er heel veel konijnen zijn, dat de roofvogels dan een enorme kans hebben konijnen te vangen, en dus in populatiegrootte zullen toenemen. Echter zal dit het aantal konijnen verlagen… wat gebeurt er daarna? Sterven alle konijnen uit? Kunnen ze samen voortbestaan? Om dit te bepalen (en te kijken waar dit van af hangt) kunnen we binnen het model variëren met hoe lang een roofvogel leeft, of konijnen ook van ouderdom dood gaan, hoe veel konijnen een roofvogel kan eten, en of de dynamica van grasgroei ook belangrijk is. Dit betekent dat we moeten variëren met de onderdelen waaruit elk model bestaat: variabelen, parameters, en aannames (assumptions).\n\n\n\n\n\n\nNederlands (Dutch)\n\n\n\nNet zoals bij elk vakgebied, komen er bij modellen veel nieuwe termen kijken. Dit jargon is niet altijd goed in het Nederlands te vertalen, en daarnaast zijn de Engelse termen vaak heel handig om te kennen. Om jullie daarmee te helpen, zullen we toch vaak het Engelse jargon gebruiken. Aan het einde van ieder hoofdstuk staat een tabel met de vertaling van deze termen, en wat deze precies betekenen.",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#de-basisingrediënten-van-elk-model",
    "href": "Modellen/intro_modellen.html#de-basisingrediënten-van-elk-model",
    "title": "Introductie",
    "section": "De basisingrediënten van elk model",
    "text": "De basisingrediënten van elk model\nModellen in de biologie kunnen heel simpel zijn, maar soms ook vrij complex zijn. Hoe ingewikkeld of simpel een model ook is, de basisingrediënten veranderen eigenlijk nauwelijks. Elk model draait om:\n\nVariabelen (variables): hetgeen wat er verandert (bijvoorbeeld over de tijd). In het voorbeeld hierboven zouden dat bijvoorbeeld de populatiegroottes van de konijnen en/of roofvogels kunnen zijn, en eventueel zelfs de hoeveelheid gras.\nParameters (parameters): constante waarden die bepalen hoe variabelen veranderen, bijvoorbeeld de groeisnelheid van de konijnen of de sterftesnelheid van predatoren. In plaats van deze getallen vast te zetten (bijv. groeisnelheid = 2) gebruiken we meestal zogenoemde “vrije parameters” (bijv. groeisnelheid = \\(r\\)). Let op: in biologische modellen nemen we over het algemeen aan dat dergelijke parameters positief zijn. Hoewel sterfte wiskundig gezien een “negatief” begrip is (de populatie neemt immers af) is de parameter waarmee we sterfte bepalen (bijvoorbeeld \\(d\\) voor death rate) positief.\nAannames (assumptions): keuzes die we maken om het model eenvoudig te houden. In het voorbeeld hierboven negeren we bijvoorbeeld de herten, het bos op de achtergrond, en we zouden ook kunnen kiezen om alle konijnen in het model identiek te laten zijn, ook al zien we in werkelijkheid variaties in hun kleur die eventueel de predatiekans beïnvloedt. Of konijnen wel/niet van nature dood gaan, is een aanname die we kunnen variëren. Zodoende kunnen we meer inzicht krijgen in welke componenten belangrijk zijn.\n\nAan het eind van dit cursusonderdeel zul je begrijpen dat de bovengenoemde begrippen gebruikt kunnen worden om allerlei biologische scenario’s simpeler te omschrijven. Door deze versimpelingen te bestuderen, proberen we wat te leren over biologie. Maar let op: afhankelijk van de biologische situatie kan het zijn dat aannames meer of minder gepast zijn! Of een aanname gepast is, zal dus liggen aan de precieze vragen die we stellen.\nAan het eind van elk hoofdstuk staan lange verdiepende vragen, die we in het werkcollege behandelen. Tussen het lezen door staan echter soms ook wat kortere vragen, zodat je kan inschatten of je de stof goed tot je hebt genomen. Dus hierbij:\n\nOefening 1 (Bloedsuikerspiegel tijdens het sporten) \nTijdens het sporten daalt de bloedsuikerspiegel \\(a\\) met een vaste snelheid \\(b\\), waarbij een eiwit \\(c\\) tot expressie komt met vaste snelheid \\(d\\).\na. Welke van de symbolen (\\(a\\), \\(b\\), \\(c\\), en \\(d\\)) zou je als variabelen kunnen beschouwen, en waarom?\nb. Welke van deze symbolen zou je eerder als parameters beschouwen, en waarom?\n\nNu we een idee hebben wat paramteres, variabelen, en aannames precies zijn, gaan we een paar voorbeeld-scenarios bespreken. Let op: deze voorbeelden hoef je nu nog niet 100% te begrijpen, en dienen op dit punt vooral ter illustratie.",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#een-verschillend-model-voor-elk-scenario",
    "href": "Modellen/intro_modellen.html#een-verschillend-model-voor-elk-scenario",
    "title": "Introductie",
    "section": "Een verschillend model voor elk scenario",
    "text": "Een verschillend model voor elk scenario\nNiet alle modellen zien er hetzelfde uit. Veel modellen gebruiken simpele wiskundige formules om verandering over de tijd te omschrijven. Zo zouden we de jaarlijkse populatiegrootte van een bedreigde vlindersoort (zie Figuur 2 A) kunnen omschrijven in een differentievergelijking (Difference Equation, ook wel Map genoemd). Deze vergelijking omschrijft simpelweg een relatie tussen de huidige waarde van de variabele \\(V(t)\\) (hoeveelheid vlinders in dit jaar) en de toekomstige waarde van de variabele \\(V(t+1)\\) (hoeveelheid vlinders over 1 jaar). In het volgende hoofdstuk zul je leren hoe eenvoudig het is om met deze vergelijkingen te werken, en deze in een simpel R-script te bestuderen.\n\n\n\n\n\n\nFiguur 2: Afhankelijk van het biologische scenario kunnen we verschillende typen modellen gebruiken\n\n\n\nOndanks de eenvoud van differentievergelijkingen, werken we in de biologie echter meestal met een ander type wiskundig model: differentiaalvergelijkingen. In de literatuur zul je deze modelvorm tegenkomen onder de noemer Ordinary Differential Equations (ODEs). Deze modellen omschrijven niet discrete tijdstappen (jaar 1, jaar 2, etc.), maar omschrijven in plaats daarvan de snelheid waarmee de variabelen veranderen. Zo kun je bijvoorbeeld chemische reactiesnelheden goed beschrijven met ODEs, en op die manier bestuderen hoe enzymkinetiek werkt (Figuur 2 B). Omdat veel biologische processen goed uit te drukken zijn in termen van snelheden (groeisnelheid, reactiesnelheid, hormoon-productie per uur, etc.), is dit type model erg populair om simpele biologische processen te modelleren. Daarom gaan we in deze cursus uitgebreid bespreken hoe je dit type model kan lezen, en hoe je er biologische conclusie uit kan trekken.\nHoewel ODEs populair zijn binnen de biologie, is er in de laatste jaren steeds meer aandacht gekomen voor ruimtelijke patronen (spatial patterns). Wat hebben bijvoorbeeld de strepen van een zebravis te maken met de patronen van struikgewassen op de toendra? Op het eerste gezicht misschien niets, maar het blijkt dat je beide patronen kan verklaren met hetzelfde mechanisme! Dergelijke patronen kunnen belangrijk zijn voor natuurbehoud, en in het laatste hoofdstuk zal je zelfs zien dat er belangrijke medische consequenties zijn. Het kan dus zeer nuttig zijn om beter te begrijpen hoe patroon-vorming werkt. Hiervoor gebruiken we ruimtelijke modellen (spatial models) (Figuur 2 C).\nAan het eind van dit cursusonderdeel zal je veel verschillende modellen voorbij hebben zien komen: zowel simpele, wiskundige modellen zoals die in Figuur 2 A/B, als variaties op ruimtelijke modellen zoals die in Figuur 2 C. Het overkoepelende doel is is dan ook dat je basiskennis hebt over deze modellen, begrijpt waarom ze belangrijk zijn binnen de biologie, en dat je kan je uitleggen welk type model het beste past om een specifiek biologisch scenario te omschrijven.\n\nOefening 2 (Modeluitkomsten) \nElk type model heeft andere modeluitkomsten: wiskundige modellen hebben vaak vooral voorspellingen van veranderende aantallen, terwijl ruimtelijke modellen ook patronen als resultaat hebben.\na. Waarom denk je dat een groeiende biofilm meestal niet met ODEs wordt gemodelleerd?\nb. Waarom denk je dat een goed gemengde fles bacterien meestal niet met een ruimtelijk model bestudeerd wordt?\nc. Waar zou je de vorming van korstmossen mee kunnen modelleren?",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#wanneer-is-een-model-goed",
    "href": "Modellen/intro_modellen.html#wanneer-is-een-model-goed",
    "title": "Introductie",
    "section": "Wanneer is een model “goed”?",
    "text": "Wanneer is een model “goed”?\nOmdat modellen versimpelingen zijn, zullen ze nooit alle details uit de biologie beschrijven. Dit is ook niet het doel van modellen. In plaats daarvan proberen we, ondanks de versimpelingen, iets over biologie te leren, of voorspellingen te doen. Een model is daarom niet per se slecht als het onrealistische aannames doet, omdat het best kan zijn dat je er toch iets heel belangrijks van leert, of dat de voorspellingen betrouwbaar zijn. De Britsche statisticus George P. Box zei daarom ooit het volgende over modellen:\n\n“All models are wrong, but some are useful.” – George P. Box\n\nAls je nog niet helemaal begrijpt waarom zelfs onrealistische modellen nuttig kunnen zijn, dan is dat niet erg. In dit cursusonderdeel gaan we stapje voor stapje leren werken met modellen, en je zult zien dat deze manier van denken niet alleen heel nuttig, maar ook heel leuk kan zijn!",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#opgaven",
    "href": "Modellen/intro_modellen.html#opgaven",
    "title": "Introductie",
    "section": "Opgaven",
    "text": "Opgaven\nMisschien is het je opgevallen dat niet alle opgaven dezelfde kleur hebben. We gebruiken namelijk een kleurcodering zodat je meteen weet of het een algemene vraag is, of dat je aan de slag gaat met pen-en-papier of R. Algemene (open) vragen zijn oranje, en zien er uit zoals Oefening 3. Opgaven die je met pen en papier moet maken, zijn geel gekleurd en hebben een potlood-icoontje (zie Oefening 4). Opgaven die je met R moet maken (of andere computeropgaven), zien er uit als Oefening 5. Er ook gemengde vragen, waarbij je beide vaardigheden toepast. Deze zien er uit als Oefening 6.\nDit introducerende hoofdstuk heeft geen opgaven.\n\nOefening 3 (Een open vraag)  Bijvoorbeeld: leg uit waarom in de biologie modellen worden gebruikt.\n\n\nOefening 4 (Pen en papier opgave)  Bijvoorbeeld: vind de twee oplossingen voor de vergelijking \\(x(1-x)=0\\).\n\n\nOefening 5 (R opgave)  Bijvoorbeeld: neem de volgende code over en pas aan:\n\nx &lt;- 10\na &lt;- 1\ny &lt;- x+a\nprint(y)\n\n\n\nOefening 6 (Een gemengde vraag)  Bijvoorbeeld:\na. Schets de functie \\(f(x)=1+ax\\)\nb. Controlleer je antwoord met het onderstaande R script\n\na=0.1\n\nfunc &lt;- function(x){\n return(1+a*x)\n}\n\ncurve(func,-3,10,ylim=c(0,5),xlim=c(-3,10),lwd=2,col=\"seagreen\")\nabline(h=0,col=\"grey\")\nabline(v=0,col=\"grey\")",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/intro_modellen.html#terminologie",
    "href": "Modellen/intro_modellen.html#terminologie",
    "title": "Introductie",
    "section": "Terminologie",
    "text": "Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nModel\nModel\nEen versimpeling van een systeem, bijvoorbeeld in de vorm van eenvoudige wiskunde of computerprogramma’s\n\n\nDynamiek\nDynamics\nHoe dingen (variabelen) veranderen. Meestal zijn we geinteresseerd in veranderingen over de tijd, maar soms ook in veranderingen over de ruimte\n\n\nVariabele\nVariable\nWat er verandert, bijvoorbeeld het aantal bacteriën tijdens exponentiële groei\n\n\nParameter\nParameter\nConstante waardes die de dynamiek bepalen, bijvoorbeeld de verdubbelingstijd van bacteriën\n\n\nModel-uitkomsten\nModelling outcomes\nWat voor type resultaten je model kan opleveren. Wiskundige modellen geven kwantitatieve of kwalitatieve uitkomsten, terwijl ruimtelijke modellen daarnaast ook patronen als uitkomst hebben.\n\n\nAanname\nAssumption\nEen keuze die we maken om het model eenvoudig te houden",
    "crumbs": [
      "Biologische modellen",
      "Introductie"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html",
    "href": "Modellen/exponentielegroei.html",
    "title": "10  Exponentiële groei",
    "section": "",
    "text": "10.1 Leerdoelen\nIn dit eerste hoofdstuk gaan we een belangrijk concept uit de biologie beter leren begrijpen: exponentiële groei. Na dit hoofdstuk word je geacht het volgende te kunnen:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#leerdoelen",
    "href": "Modellen/exponentielegroei.html#leerdoelen",
    "title": "10  Exponentiële groei",
    "section": "",
    "text": "Aantonen wanneer groei exponentiëel is\nUitleggen dat snelle groei niet altijd exponentiële groei is\nUitleggen wat dichtheidsafhankelijkheid (density dependence) is, en hoe dit resulteert in een maximaal draagvermogen (carrying capacity) van een (eco)systeem of populatie\n\n\n\n\n\n\n\n\nAfbeelding gegenereerd met ChatGPT4-o",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#bergen-met-rijst",
    "href": "Modellen/exponentielegroei.html#bergen-met-rijst",
    "title": "10  Exponentiële groei",
    "section": "10.2 Bergen met rijst",
    "text": "10.2 Bergen met rijst\nIn het introducerende hoofdstuk hebben we besproken dat alle modellen drie belangrijke basisingrediënten hebben: variabelen, parameters, en aannames. Laten we aan de hand van deze begrippen een model maken van de beroemde mythe over de ontdekking van het schaakspel. De koning beloofde de ontdekker namelijk een gigantische hoeveelheid rijst.\n\nDe mythe van de ontdekking van het schaakspel\nDe mythe van de ontdekking van het schaakspel is een beroemde legende uit India. Volgens het verhaal wilde een koning de uitvinder van het schaakspel belonen. In schijnbare bescheidenheid vroeg de uitvinder om rijst: één korrel op het eerste veld van het schaakbord, twee op het tweede, vier op het derde, en zo verder, telkens verdubbelend tot het 64e veld is bereikt. De koning stemde toe, zich niet realiserend hoeveel rijst hij zojuist had beloofd. Tegen de tijd dat het 64e veld bereikt was, had de koning niet genoeg rijst in zijn hele koninkrijk om aan de vraag te voldoen. Het totaal aantal korrels rijst komt uit op:\n\\[\n1 + 2 + 4 + · · · + 2^{63} = 2^{64} − 1 = 18.446.744.073.709.551.615\n\\] Als je het aantal cijfers van dit grote getal telt, zie je dat het neerkomt op 18 triljoen (een 18 met 18 nullen!). Dit kunnen we beter als een macht van 10 schrijven: \\(\\sim 1.84 \\cdot 10^{19}\\). In R worden dergelijke grote getallen meestal met e+ aangegeven:\n\n2^64 - 1\n\n[1] 1.844674e+19\n\n\nDeze legende van de ontdekking van het schaakspel illustreert de snelheid waarme exponentiële groei getallen doet oplopen. Wat aanvankelijk klein en bescheiden lijkt, kan snel uitgroeien tot een enorme (onvoorstelbare) hoeveelheid.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#verdubellingen-modelleren",
    "href": "Modellen/exponentielegroei.html#verdubellingen-modelleren",
    "title": "10  Exponentiële groei",
    "section": "10.3 Verdubellingen modelleren",
    "text": "10.3 Verdubellingen modelleren\nDe vergissing van de koning was dat hij (zoals veel mensen) niet in kon zien hoe snel verdubbelingen toenemen. We kunnen aan de hand van deze mythe de volgende variabelen, parameters, en aannames formuleren:\n\nVariabele: aantal rijstkorrels, \\(𝑅\\)\nParameters: vermenigvuldigingswaarde (\\(r = 2\\)) en aantal hokjes op een schaakbord (\\(n=64\\))\nAannames: teveel om te benoemen, maar één is in ieder geval dat de rijst ook daadwerkelijk op het bord past!\n\nNaast deze drie basisingrediënten, is het natuurlijk ook belangrijk om te bepalen wat de hoeveelheid rijst is waar we mee beginnen (hier \\(R(0) = 1\\)). Dit wordt in de model-wereld de initiële conditie (initial condition) genoemd, oftewel de start waarde van de variabele(n). Vanaf daar gaan we verder rekenen: op het tweede vakje liggen \\(R(1) = R(0) \\cdot 2\\) rijstkorrels, op het derde vakje \\(R(2) = R(0) \\cdot 2 \\cdot 2\\) korrels, etc. Het aantal korrels op het 64e vakje, wordt gegeven door 63 verdubbelingen (want let op: het eerste vakje was al bezet!). Dit kunnen we omschrijven met de volgende vergelijking:\n\\[\nR(63) = R(0) \\cdot 2^{63}\n\\tag{10.1}\\]\nVergelijking 10.1 geeft het aantal korrels op het 64e vakje. Dat is dus nog niet het totaal aantal korrels. Het totaal wordt gegeven door \\(R(0) + R(1) + R(2) + \\cdots + R(63)\\). Deze som is een beetje te lang om volledig op te schrijven, maar we weten dat elke stap de volgende vergelijking wordt toegepast:\n\\[\nR(t+1) = 2\\cdot R(t)\n\\tag{10.2}\\]\nEen vergelijking in de vorm van Vergelijking 10.2 wordt een differentievergelijking genoemd1. Deze differentievergelijking is zo simpel, dat we een eenvoudig R-script kunnen schrijven die deze herhaaldelijk toepast:\n\nR &lt;- 1 # beginaantal rijst (initiële conditie)\n\n# herhaal iets 63 keer met een for-loop\nfor (i in 1:63) {\n  R[i+1] &lt;- 2*R[i] # het aantal rijstkorrels in elk vakje op in R\n}\nprint(R[64]) # print het aantal rijskorrels in het 64e vakje\n\n[1] 9.223372e+18\n\n\nIn de bovenstaande code wordt er steeds een getalletje aan R toegevoegd. \\(R\\) is dus nu niet meer één getal, maar een steeds langer wordende lijst getallen: \\(1, 2, 4, 8, \\dots, 2^{63}\\) etcetera. Zoals je hebt geleerd heet een dergelijke lijst in R een vector, die we eenvoudig kunnen plotten met R:\n\n# beginaantal rijst\nR &lt;- 1\n\n# herhaal iets 63 keer met een for-loop\nfor (i in 1:63) {\n  R[i+1] &lt;- R[i]*2 # R in volgende stap is 2*R in deze stap\n}\n\nplot(R , type='l', col=\"seagreen\", log=\"y\", lwd=2.5) \n\n\n\n\n\n\n\nFiguur 10.1: Het aantal rijstkorrels per vakje (met log-lineaire schaal op de y-as).\n\n\n\n\n\n\nOefening 10.1 (Een toenname van slechts 5%) \nWe plotten het resultaat van de loop hierboven op een log-lineaire schaal (zie Hoofdstuk 6), zodat we goed kunnen zien of de groei exponentiëel is. Laten we nu aannemen dat de groei van het aantal rijstkorrels niet verdubbelt, maar met 5 procent toeneemt per hokje op het schaakbord:\n\\[R(t+1) = 1.05 \\cdot R(t)\\] Pas de R-code hierboven aan om deze nieuwe differentievergelijking door te rekenen.\na. Is er sprake van exponentiele groei?\nb. Hoeveel rijstkorrels heb je nu in totaal? (hint: je kan de sum functie gebruiken om de som van een vector in één keer uit te rekenen!)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#exponentiële-groei",
    "href": "Modellen/exponentielegroei.html#exponentiële-groei",
    "title": "10  Exponentiële groei",
    "section": "10.4 Exponentiële groei",
    "text": "10.4 Exponentiële groei\nHoewel in het dagelijks taalgebruik elke vorm van “snelle groei” als exponentiëel wordt bestempeld, is dit niet correct. Hele snelle groei hoeft niet altijd exponentiëel te zijn, en andersom, kan relatief langzame groei wél exponentiëel zijn (zie ook Oefening 10.1). Er is sprake van exponentiële groei als de percentuele toename constant blijft. In het voorbeeld van de rijst was er een toename van 100% (een verdubbeling) en in Oefening 10.1 een toename van 5%, maar in beide gevallen bleef deze constant. In beide gevallen is er dus sprake van exponentiële groei! Als je wilt controleren of groei exponentiëel is, kun je data altijd plotten op een log-lineaire schaal (log=\"y\"), en kijken of het een rechte lijn vormt.\nNu we weten over de exponentiële groei van rijst, is het hoog tijd om de biologie in te duiken.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#konijnen-in-australië",
    "href": "Modellen/exponentielegroei.html#konijnen-in-australië",
    "title": "10  Exponentiële groei",
    "section": "10.5 Konijnen in Australië",
    "text": "10.5 Konijnen in Australië\n\n\n\n\n\n\n\nAfbeelding gegenereerd met ChatGPT4-o (November 2024)\n\n\nThomas Austin was een Engelse kolonist in Australië, en hield van jagen. Daarom liet hij in de 19e eeuw 24 konijnen vrij in Autralië. Binnen tien jaar waren er meer dan honderd miljoen konijnen in Australië, en kon de populatie onmogelijk nog onder controle gehouden worden. Net als bij het voorbeeld van de rijstkorrels, kunnen we een simpele differentievergelijking opschrijven om het aantal konijnen in Autralië te modelleren:\n\\[\\begin{equation}\n    N(t+1) = r \\cdot N(t)\n\\end{equation}\\]\n\\(N\\) staat hier voor het aantal konijnen. Voor simpele populatiemodellen in de ecologie wordt vaak \\(N\\) (Number of rabbits, deer, plants) gebruikt, maar we hadden de konijnen ook \\(K\\) (voor konijnen) of \\(R\\) (voor rabbits) kunnen noemen. Dit heeft verder geen invloed op het model.\nIn plaats van het getal \\(2\\) of \\(1.05\\) in te vullen voor de groeisnelheid, gebruiken we hier \\(r\\): een vrije parameter waarvan we de waarde nog niet vastzetten. Zodoende kunnen we straks zelf bepalen of we \\(r\\) op 2, 3, of misschien nog wel hoger moeten zetten om de snelle toenname in Australië te kunnen verklaren.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#dichtheidseffecten-en-logistische-groei",
    "href": "Modellen/exponentielegroei.html#dichtheidseffecten-en-logistische-groei",
    "title": "10  Exponentiële groei",
    "section": "10.6 Dichtheidseffecten en logistische groei",
    "text": "10.6 Dichtheidseffecten en logistische groei\nHoewel de groei van populaties aanvankelijk goed benaderd kan worden met exponentiële groei, kan dit niet tot in het oneindige doorgaan. Zo kan na verloop van tijd het eten opraken (voedsel is de beperkende factor), of kan een graszaadje geen onbezet plekje in het veld meer vinden (ruimte is de beperkende factor). Met andere woorden: hoe meer individuen er aanwezig zijn, hoe minder groei er kan plaatsvinden. Dergelijke effecten noemen we dichtheidseffecten, of dichtheidsafhankelijkheid (density dependency). De bovengenoemde dichtheidseffecten zijn negatief (groei neemt af), maar dichtheidseffecten kunnen ook positief zijn, bijvoorbeeld wanneer individuen van een soort elkaar helpen met groeien, waar we later in Hoofdstuk 13 op terug zullen komen.\nWe gaan echter eerst onze pijlen richten op negatieve dichtheidseffecten, omdat deze ons kunnen helpen om exponentiële groei om te zetten naar logistische groei. Logistische groei is een vorm van populatiegroei die exponentieel begint, maar uiteindelijk een evenwicht bereikt. Dit geeft een karakteristieke sigmoïde S-curve. Op een log-lineaire schaal begint de groeicurve als een rechte lijn, maar buigt deze uiteindelijk af naar een evenwicht (Figuur 10.2). Deze evenwichtswaarde wordt ook wel de draagkracht of het draagvermogen (carrying capacity) van het systeem genoemd. Als de populatie kleiner is dan dit draagvermogen (er zijn weinig konijnen dus veel eten), dan zal de populatie toenemen. Is de populatie echter groter dan dit draagvermogen (er zijn veel konijnen dus weinig eten), dan zal de populatie alleen maar afnemen. Ergens daartussenin zal dus een evenwichtsituatie liggen.\nIn de opgaven gaan we rekenen aan de konijnenpopulatie in Australië en onze eerste poging doen om de populatie een stabiel evenwicht te laten bereiken.\n\nCode\nx&lt;- 24\nfor(i in 1:70){\n  x[i+1] &lt;- x[i] * 1.2 * (1-(x[i]/10^5))\n}\nplot(x, xlab=\"Tijd\", ylab=\"Aantal\", lwd=2.5, type='l', col='seagreen')\nplot(x, xlab=\"Tijd\", ylab=\"Aantal\", lwd=2.5, type='l', col='seagreen',log=\"y\")\n\n\n\n\n\n\n\n\n\n\n\n\n(a) (lineaire schaal)\n\n\n\n\n\n\n\n\n\n\n\n(b) (logaritmische schaal)\n\n\n\n\n\n\n\nFiguur 10.2: Logistische groei van de konijnenpopulatie met een lineaire en logaritmisch geschaalde y-as",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#opgaven",
    "href": "Modellen/exponentielegroei.html#opgaven",
    "title": "10  Exponentiële groei",
    "section": "10.7 Opgaven",
    "text": "10.7 Opgaven\n\nOefening 10.2 (Konijnen in Australië) \nAls een biologische populatie zich ergens vestigt, kan deze aanvankelijk enorm snel groeien. Voorbeelden hiervan zijn een virus dat zich verspreidt in een nieuwe gastheer, een bacteriële populatie in een voedselrijk medium, of zoals in dit hoofdstuk omschreven, de konijnenpopulatie in Australie:\n\\[\nN(t+1) = r \\cdot N(t)\n\\]\nExponentiële groei is zo simpel dat het gemakkelijk te simuleren is met de computer, bijvoorbeeld in R. Neem de volgende code over in Rstudio:\n\n# definieren van begin aantal konijnen\nN &lt;- 24\n\n# Verdubbel het aantal konijnen 10 keer\nfor (t in 1:10){\n    N &lt;- 2*N\n}\n\n\nPas de code aan om te bepalen hoeveel konijnen er na 20 stappen zijn. Voeg aan het eind van de code zelf een regel toe, waardoor er het volgende geprint wordt: Het aantal konijnen na 20 stappen is gelijk aan 25165824.\n\nOm beter bij te kunnen houden hoeveel konijnen er zijn na elke stap, kunnen we het aantal konijnen bijhouden in een lijst, waar we elke herhaling het aantal konijnen op dat tijdpunt aan toevoegen. Ook kunnen we de groeisnelheid in een parameter \\(r\\) opslaan, zodat we deze gemakkelijk kunnen aanpassen:\n\n# Stap 1: Stel begin-aantal konijnen in\nN &lt;- 24\nr &lt;- 2\n\n# Stap 2: Vermeerder het aantal konijnen 30 keer\nfor (t in 1:30){\n  N[t+1] &lt;- r*N[t]\n}\n\n# Stap 3: Plot het resultaat\nplot(N, type='l')\n\n\nVoer de bovenstaande code uit en bekijk het resultaat. Groeit het aantal konijnen exponentieel? Pas de R-code aan om dit te bevestigen. Wat gebeurt er als \\(r&lt;1\\)?\n\nHoewel het aantal konijnen in Australië aanvankelijk exponentieel groeide, is er uiteindelijk een evenwicht bereikt bij ongeveer 500 miljoen konijnen. Kennelijk was er bij dit aantal een balans tussen geboorte en sterfte van konijnen. Laten we onze vergelijking veranderen in groei door een geboorte-term (\\(b\\), birth) en een sterfte-term (\\(d\\), death):\n\\[\nN(t+1) = b \\cdot N(t) - d \\cdot N(t)\n\\] De nieuwe R-simulatie wordt dan:\n\n# Stap 1: Stel begin-aantal konijnen in\nN &lt;- 24\nb &lt;- 2\nd &lt;- 0.1\n\n# Stap 2: Verander het aantal konijnen 30 keer met de gegeven birth en death rates\nfor (t in 1:30){\n  N[t+1] &lt;- b*N[t] - d*N[t]\n}\n\n# Stap 3: Plot het resultaat\nplot(N, type='l')\n\n\nBestudeer bovenstaand script (met de gegeven parameters), en bepaal of er wel/niet sprake is van exponentiële groei.\nWat gebeurt er bij \\(d=1.1\\)? Waarom?\n\nWe kunnen onze nieuwe vergelijking ook herschrijven als: \\[\nN(t+1) = (b-d) \\cdot N(t)\n\\]\nAls we dan aannemen dat de eerder genoemde intrinstieke groei (\\(r\\)) gelijk is aan \\(b-d\\), zijn we terug bij af:\n\\[\nN(t+1) = r \\cdot N(t)\n\\]\nWe hebben dus niet bereikt wat we wilden: dat er bij lage aantallen konijnen groei kan zijn, maar bij hoge aantallen niet. Om dit toch voor elkaar te krijgen, kunnen we de sterfte-term kwadrateren:\n\\[\nN(t+1) = b \\cdot N(t) - d \\cdot N(t)^2\n\\]\n\nNeem aan dat \\(b=2\\), \\(d=0.001\\), en dat we beginnen met 24 konijnen (\\(N=24\\)). Als je deze drie waarden gebruikt, wat zijn dan de numerieke waarden van de geboorte- en sterfteterm, en numerieke waarde van de volledige vergelijking?\nVoer dezelfde berekening uit voor 1000 konijnen (voor dezelfde waarden van \\(b\\) en \\(d\\))\n\nDe onderstaande code gebruikt de bovengenoemde parameters \\(b=2\\) en \\(d=0.001\\).\n\n# Stap 1: Stel begin-aantal konijnen in\nN &lt;- 24\nb &lt;- 2\nd &lt;- 0.001\n\n# Stap 2: Verander het aantal konijnen 30 keer met de gegeven birth/death rates\nfor (t in 1:30){\n  N[t+1] &lt;- b*N[t] - d*N[t]^2\n}\n\n# Stap 3: Plot het resultaat\nplot(N, type='l')\n\nDe populatie bereikt een stabiel evenwicht wanneer \\(N(t+1)\\) gelijk is aan \\(N(t)\\). Omdat beide vormen van \\(N\\) nu gelijk zijn, kunnen we de differentievergelijking opschrijven als:\n\\[\nN = b N - d  N^2\n\\]\n\nLos de bovenstaande vergelijking op voor \\(N\\). Waarom stabiliseert de populatiegrootte in je Rscript dus bij \\(N=1000\\), en niet bij \\(N=500\\)?\n\nOm de populaties bij 500 miljoen te laten stabiliseren, moeten we \\(d\\) dus nog veel kleiner maken: \\({1 \\over 5 \\cdot 10^8} = 2^{-9}\\). In R schrijven we dan d &lt;- 2e-9.\n\nGebruik de bovengenoemde death rate, en plot het aantal konijnen op een log-lineaire schaal (voeg log=\"y\" toe aan de laatste regel). Groeit de populatie in de eerste jaren (bij benadering) exponentieel? Groeit de populatie in de laatste jaren exponentieel?\nNeem aan dat elke tijdstap 1 jaar is. Hoeveel konijnen zijn er in je nieuwe model na 10 jaar? (let op: N[1] is tijdstap 0, niet tijdstap 1). Wat is er vreemd aan deze hoeveelheid?\nDe konijnenpopulatie bereikte naar schatting binnen 10 jaar een populatiegrootte van meer dan honderd miljoen. Als we dit vergelijken met onze eigen resultaten uit de bovenstaande vraag, groeit onze populatie dus te langzaam. Misschien kunnen we de birthrate (\\(b\\)) verhogen zodat ons model overeenkomt met de data. Neem aan dat \\(b=3\\). Gaat de konijnenpopulatie naar een evenwicht?\nHeb je dit keer genoeg konijnen binnen 10 jaar om het scenario in Australië te evenaren?\nMet een birthrate van \\(b=3.7\\) komen we aardig in de buurt van de geobserveerde groeisnelheid tijdens de eerste jaren in Australië. Wat gebeurt er als je deze waarde gebruikt?\n\n\n\nOefening 10.3 (Miniatuur Australië)  \n\n\n\n\n\n\nFiguur 10.3: De regels van een simpele computersimulatie voor de verspreiding van konijnen in Australië\n\n\n\n\nLaten we de konijnenpopulatie uit de vorige opgave ook in een ander type model bekijken. Hiervoor simuleren we een “miniatuur Australië” (zie Figuur 10.3). Laten we Australië in drie types hokjes opdelen: grashokjes (groen) waarop konijnen kunnen voortplanten, konijnhokjes (bruin), en oceaanhokjes (blauw). We nemen voor het gemak aan dat er geen woestijn-hokjes zijn, wat betekent dat konijnen overal in Australie kunnen voortplanten. Elke tijdstap kunnen konijnen zich vermenigvuldigen door een naastgelegen grashokje over te nemen. Deze “geboortekans” zetten we vast op 80%, en ondervindt géén dichtheidsafhankelijkheid. Konijnen kunnen ook sterven met een vaste kans van 1%, waardoor een bruin hokje weer groen wordt. Als laatste nemen we voor het gemak aan dat konijnen niet bewegen.\n\nLees de bovenstaande modelomschrijving zorgvuldig door. Verwacht je exponentiële groei? Waarom wel/niet?\nVerwacht je dat er een draagvermogen (carrying capacity) zal zijn?\nEen interactieve versie van deze simulatie zie je hieronder. Start de simulatie en bekijk de grafieken. Had je de vorige vragen juist beantwoord?\n\n\n                \n\n\n\n\n\n\n\nOmdat er sprake is van kansprocessen, zijn de populatieaantallen niet iedere keer hetzelfde. Als we elke 10 tijdstappen het aantal konijnen tellen, geeft de volgende sequentie een mogelijke serie van populatiegrootes: 13, 108, 311, 665, 1137, 1773, 2549, 3384. Gebruik R om te bepalen of deze toename exponentieel is.\nDe simulatie bereikt een draagvermogen van ongeveer 8000 konijnen, wat veel minder is dan honderden miljoenen. We zouden een veel groter Australië kunnen simuleren, maar dat maakt een dergelijke computer-simulatie erg langzaam. We kunnen ook definiëren dat elk hokje niet 1 konijn is, maar een lokale populatie konijnen. Wat zou dit betekenen voor de interpretatie van de geboorte- en de sterftekans?",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#terminologie",
    "href": "Modellen/exponentielegroei.html#terminologie",
    "title": "10  Exponentiële groei",
    "section": "10.8 Terminologie",
    "text": "10.8 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nInitiële conditie\nInitial condition\nDe begin-toestand van het model. In simpele wiskundige modellen is dit vaak een aantal (zoals de begin-hoeveelheid rijst in dit hoofdstuk). Bij andere modellen (uit latere hoofdstukken) kan de begin-toestand ook een kleur of een patroon zijn.\n\n\nDifferentievergelijking\nDifference equation / Map\nEen wiskundige formule die de relatie beschrijft tussen opeenvolgende waarden van een variabele in discrete tijdstappen.\n\n\nExponentiële groei\nExponential growth\nGroei waarbij het percentage van toename constant blijft.\n\n\nLogistische groei\nLogistic growth\nGroei die exponentiëel begint, maar waarbij het (eco)systeem of de populatie uiteindelijk een evenwicht bereikt.\n\n\nDraagvermogen\nCarrying capacity\nHet maximale aantal individuen (of de maximale concentratie) dat een systeem in evenwicht kan ondersteunen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/exponentielegroei.html#footnotes",
    "href": "Modellen/exponentielegroei.html#footnotes",
    "title": "10  Exponentiële groei",
    "section": "",
    "text": "Niet te verwarren met de differentiaalvergelijking, waar we in het volgende hoofdstuk over gaan leren!↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Exponentiële groei</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html",
    "href": "Modellen/odes_basis.html",
    "title": "11  Modelleren met ODEs",
    "section": "",
    "text": "11.1 Leerdoelen\nDe leerdoelen voor dit hoofdstuk zijn:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#leerdoelen",
    "href": "Modellen/odes_basis.html#leerdoelen",
    "title": "11  Modelleren met ODEs",
    "section": "",
    "text": "Begrijpen dat biologie modelleren met discrete tijdstappen soms vreemde effecten op kan leveren.\nBegrijpen dat ODEs geen “tijdstappen” hebben.\nBegrijpen dat ODEs geschreven worden in termen van “x per tijdseenheid”, en wat dit zegt over de individuele termen en parameters.\nBegrijpen wanneer er in een ODE sprake is van een evenwicht.\nODEs in verband kunnen brengen met hun oplossing.\n\n\n\n\n\n\n\n\n(afbeelding gegenereerd met ChatGPT4-o)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#chaotische-konijnen",
    "href": "Modellen/odes_basis.html#chaotische-konijnen",
    "title": "11  Modelleren met ODEs",
    "section": "11.2 Chaotische konijnen",
    "text": "11.2 Chaotische konijnen\nIn Hoofdstuk 10 hebben we gezien wat de consequenties zijn van 24 konijnen vrijlaten in een land waar geen natuurlijke predator voor konijnen bestaat. In de opgaven hebben we deze groei gemodelleerd in R, en hebben we geprobeerde de populatie te laten stabiliseren bij 500 miljoen konijnen. Met een lage groeisnelheid zagen we dat ons model een prachtige logistische groeicurve gaf, maar dat de groei veel langzamer was dan waargenomen in Australië. Het verhogen van de groeisnelheid gaf echter vreemde grafieken (Figuur 11.1 (a)). Deze vreemde grafieken zijn een beroemde eigenschap van differentievergelijkingen voor logistische groei. De meest beroemde vorm van deze differentievergelijking is:\n\\[\n\\begin{align}\nN(t+1) &= rN(t)(1-\\frac{N(t)}{K})\n\\end{align}\n\\tag{11.1}\\]\nWaarbij niet \\(b\\) (birth) en \\(d\\) (death) zijn gebruikt (zoals in het werkcollege), maar een intrinsieke (netto) groei parameter (\\(r\\)) en daarnaast een parameter die het draagvlak bepaalt (\\(K\\)). Anders dan dit verschil, laat Vergelijking 11.1 dezelfde vreemde grafieken zien wanneer \\(r \\geq 3.7\\) (zie Figuur 11.1 (a)). Van het één op het andere jaar springen we heen en weer van honderden miljoenen konijnen naar een heel klein aantal konijnen, en dit gaat over de jaren heen steeds maar door. Sterker nog, als we Thomas Austin’s experiment herhalen met een ander aantal konijnen (Figuur 11.1 (b)) zien we dat deze fluctuaties iedere keer heel anders zijn! Met andere woorden: als we met behulp van dit model zouden willen voorspellen hoeveel konijnen er na 20 jaar zouden zijn, dan moeten we wel héél zeker weten met hoeveel konijnen we precies begonnen! Bovendien hebben we niet bereikt wat we wilden: probeerden we niet juist een stabiel evenwicht te modelleren?\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nr = 4        # intrinsic growth rate\nK = 10^8\ninit_R = 24    # start with 24\n\nR_series &lt;- data.frame()\nfor(r in c(r)){\n  for(s in c(24:26)){ \n    R = s\n    myR = R\n    R_series &lt;- rbind(R_series, data.frame(time=0, r=r, R=R,s=s,initR=myR))\n    for(i in 1:50)\n    {\n      R &lt;- r*R*(1-R/K)\n      R_series &lt;- rbind(R_series, data.frame(time=i,r=r,R=R,s=s,initR=myR))\n    }\n  }\n}\n\nR_series %&gt;% filter(initR==24,time&gt;1,time&lt;=40,r==4) %&gt;% \n  ggplot(aes(x=time,y=R,group=s,col=as.factor(initR))) + \n  geom_line(size=1.5) + \n  #facet_wrap(~r, scale=\"free_y\",ncol=1) + \n  theme_bw() +\n  scale_color_brewer(type=\"qual\", palette = \"Dark2\", name=\"\") +\n  guides(color=\"none\")+\n  ylab(\"Aantal konijnen\") +\n  xlab(\"Tijd (jaren)\") +\n  theme_minimal(base_size=16)+\n  theme(plot.margin = unit(c(0,0,0,0), \"cm\"))\nR_series %&gt;% filter(time&gt;1,time &lt;40,r==4) %&gt;% \n  ggplot(aes(x=time,y=R,group=s,col=as.factor(initR))) + \n  geom_line(size=1.2) + \n  #facet_wrap(~r, scale=\"free_y\",ncol=1) + \n  theme_bw() +\n  guides(color=\"none\")+\n  scale_color_brewer(type=\"qual\", palette = \"Dark2\", name=\"Begin aantal\\nkonijnen\") +\n  guides(alpha=\"none\") +\n  ylab(\"Aantal konijnen\") +\n  xlab(\"Tijd (jaren)\") +\n  theme_minimal(base_size=16)+\n  theme(plot.margin = unit(c(0,0,0,0), \"cm\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Snel-groeiende konijnenpopulatie gemodelleerd met een differentievergelijking, beginnende met 24 konijnen (r=4, K=10e8)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Dezelfde differentievergelijking beginnende met 24 (groen), 25 (rood), en 26 (paars) konijnen. (r=4, K=10e8)\n\n\n\n\n\n\n\n\nFiguur 11.1: Kleine initiële verschillen in het aantal konijnen kunnen na verloop van tijd een groot effect hebben in een chaotisch systeem.\n\n\n\n Het vreemde gedrag in Figuur 11.1 wordt formeel deterministische chaos genoemd. Hiermee bedoelen we niet het type chaos dat men in spreektaal gebruikt om een rommelige kamer te omschrijven, maar fluctuaties die onvoorspelbaar zijn omdat ze zeer gevoelig zijn voor de begin-toestand. Een andere beroemd voorbeeld uit de natuurkunde is de dubbele slinger (zie ook de animatie rechts).\nHoewel je op korte termijn vaak nog enigszins kan aanvoelen in welke richting de slinger beweegt, is het op lange termijn onmogelijk in te schatten waar de slinger zich zal bevinden. Kennelijk kunnen zelfs simpele systemen zich enorm vreemd en onvoorspelbaar gedragen. Geen wonder dat meer complexe systemen zoals biologische populaties en het weer zo moeilijk te voorspellen zijn!\n\n\n\n\n\n\nTip 11.1: Meer over “deterministische chaos” (verdieping)\n\n\n\n\n\nEen systeem is deterministisch als de regels niet willekeurig zijn. Met andere woorden, er worden geen dobbelstenen gerold om te bepalen wat er gebeurt. De meeste chemische en biologische principes volgen zulke deterministische regeltjes, maar toch zijn ze moeilijk te voorspellen. Dit komt doordat ze ondanks het gebrek aan willekeur zeer gevoelig zijn voor de precisie van de metingen. Deze gevoeligheid ken je misschien van het concept the butterfly effect, waar een vleugelslag van een vlinder uiteindelijk (na lange tijd) de oorzaak kan zijn van een orkaan. Zo zie je bijvoorbeeld dat als Thomas Austin 25 in plaats van 24 konijnen had vrijgelaten, het precieze aantal konijnen na 20 jaar maximaal verschillend kan zijn!\n\n\n\nHoewel deterministische chaos een interessant fenomeen is (en zeer zeker niet zomaar “willekeur”, zie Tip 11.1), kunnen we ons afvragen of de groei van biologische populaties ook daadwerkelijk chaotisch is. Als we bijvoorbeeld bacteriën in het lab groeien, krijgen we meestal een logistische (sigmoïde) groeicurve, en niet een populatie die lukraak fluctueert. Wat is nou eigenlijk de oorzaak van deze chaos, en kunnen we hier misschien ook vanaf komen?",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#het-probleem-van-tijdstappen",
    "href": "Modellen/odes_basis.html#het-probleem-van-tijdstappen",
    "title": "11  Modelleren met ODEs",
    "section": "11.3 Het probleem van “tijdstappen”",
    "text": "11.3 Het probleem van “tijdstappen”\nTot nu toe namen we aan dat elke “tijdstap” van de konijnenpopulatie een jaar is, en hebben we de groeisnelheid geprobeerd aan te passen om ons model overeen te laten komen met de data uit Australië. Helaas zagen we dat dit niet de gewenste resultaten heeft. Wat kunnen we doen om toch “snellere groei” te krijgen?\nWe zouden kunnen overwegen om niet de groeisnelheid aan te passen, maar in plaats daarvan te heroverwegen wat “een tijdstap” is. Dat wil zeggen, hoeveel tijd zit er eigenlijk tussen \\(R(t)\\) en \\(R(t+1)\\)? Als elke tijdstap een half jaar is, is er na 20 tijdstappen slechts 10 jaar voorbij. Dat betekent dat er nu na 10 jaar, 20 stappen groei hebben kunnen plaatsvinden. Als elke tijdstap een maand is (\\(1 \\over 12\\) jaar), is er na 20 tijdstappen nog geen twee jaar voorbij. In plaats van de groeisnelheid aan te passen, zouden we dus ook de grootte van “de tijdstap” aan kunnen passen!\nOm de grootte van onze tijdstap aan te passen, kunnen we het R-script uit de opgaven van het vorige onderdeel hergebruiken:\n\n# definieren van begin aantal konijnen\nN &lt;- 24\nr &lt;- 2\n\n# herhaal 40 keer de groei-vergelkijking, waarbij elke stap staat voor een HALF jaar\nfor (t in 1:40){\n  N[t+1] &lt;- r*N[t]*(1-(N[t]/10^9))\n}\nN[21] # Aantal na 20 halve jaren (N[1] is de nulde tijdstap!)\nplot(N,type=\"o\",xlab=\"Tijd\",ylab=\"Aantal konijnen\")\n\nAls je de code hierboven uitvoert zul je zien dat er na 20 halve jaren 24,542,999 konijnen zijn, en dat we gewoon een mooie sigmoïde groeicurve krijgen. Dit is ook niet raar, want eigenlijk hebben we niets aangepast: alleen onze interpretatie van “tijdstappen” is anders. Door aan te nemen dat de tijdstap kleiner is (een half jaar in plaats van een jaar), zijn we het vreemde chaotische gedrag kwijt. Kennelijk ontstaat dit probleem alleen als de tijdstap “te groot” is.\nDit kunnen we ook intuïtief begrijpen. Als je alleen kijkt naar hoeveel konijnen er aan het begin en aan het eind van het jaar zijn, mis je alle tussenstappen van hoe de konijnen zich tijdens het jaar voortplanten. De tussentijdse veranderingen zouden de groei kunnen aanpassen, zodat je bijvoorbeeld niet doorschiet tot onder of boven het evenwicht, maar voorzichtig het evenwicht nadert. Kleinere stapjes nemen maakt het groeiprocess simpelweg gelijkmatiger.\nHoewel we nu een oplossing voor ons fluctuatie-probleem hebben, is dit eigenlijk geen houdbare oplossing. Moeten we de hele tijd blijven controleren of de tijdstap van ons model wel “klein genoeg” is? Het antwoord op deze vraag is nee, omdat we gebruik kunnen maken van een wiskundig modelformalisme dat oneindig kleine tijdstapjes aanneemt. We stappen over van de differentievergelijkingen, naar de differentiaalvergelijkingen. Deze worden ook wel ordinary differential equations (ODEs) genoemd.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#odes-hebben-geen-tijdstappen",
    "href": "Modellen/odes_basis.html#odes-hebben-geen-tijdstappen",
    "title": "11  Modelleren met ODEs",
    "section": "11.4 ODEs hebben geen tijdstappen",
    "text": "11.4 ODEs hebben geen tijdstappen\nWe gaan in dit onderdeel leren over differentiaalvergelijkingen (ODEs). Anders dan de eerdere vergelijkingen, beschrijven ODEs niet de populatiegrootte zelf, maar de snelheid waarmee deze verandert. Deze modelvorm is zeer populair binnen de biologie omdat denken in termen van snelheden vaak heel intuïtief is. Maar wat is een differentiaalvergelijking eigenlijk?\nZoals jullie op de middelbare school (en in het onderdeel basiswiskunde) hebben geleerd, ziet een normale algebraïsche vergelijking er zo uit:\n\\[\\begin{align}\n    6x=3\n\\end{align}\\]\nWaarbij (in dit geval) \\(x\\) de onbekende is. Omdat er verder geen andere onbekenden zijn, kunnen we de vergelijking oplossen door beide kanten door \\(6\\) te delen:\n\\[\\begin{align}\n    x=\\frac{3}{6}=\\frac{1}{2}\n\\end{align}\\]\nVoor deze simpele algebraïsche vergelijking is de onbekende dus \\(x\\), en de oplossing een getal (\\(\\frac{1}{2}\\)). Bij differentiaalvergelijkingen is de relatie tussen de onbekende en de oplossing net een beetje anders. Om dit goed te begrijpen, gaan we een simpel biologisch scenario omschrijven.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#een-hertenfeestje-in-wiskundige-termen",
    "href": "Modellen/odes_basis.html#een-hertenfeestje-in-wiskundige-termen",
    "title": "11  Modelleren met ODEs",
    "section": "11.5 Een hertenfeestje in wiskundige termen",
    "text": "11.5 Een hertenfeestje in wiskundige termen\n\n\n\n\n\n\n\n(Afbeelding gegenereerd met ChatGPT4-o)\n\n\nStel, er zijn 100 herten in een bos, en er migreren ieder uur 3 herten naar dit bos toe (misschien is er een feestje). We nemen voor nu even aan dat de herten op deze korte tijdschaal niet voortplanten of dood gaan. Onder deze simpele aannames, kunnen we een wiskundige functie bepalen, \\(H(t)\\), die het aantal herten in het bos over de tijd omschrijft:\n\\[\n    H(t) = 100 + 3 \\cdot t\n\\]\nAlgemener kunnen we stellen dat voor een begin-aantal herten van \\(H_0\\) met een migratiesnelheid van \\(m\\), de functie er zo uit ziet:\n\\[\n    H(t) = H_0 + m \\cdot t\n\\tag{11.2}\\]\nHier is tijd (\\(t\\)) de onafhankelijke variabele, wat betekent dat de waarde vrij kan variëren. We kunnen dus uitrekenen hoeveel herten er na 1, 2, of 10 uur aanwezig zullen zijn. We kunnen zelfs uitrekenen hoeveel herten er na 1.4852 uur zullen zijn. Met andere woorden: tijd is een continue variabele geworden (zie Tip 11.2), en hoeft niet meer in vaste stapjes te worden opgedeeld. Met deze omschrijving is er dus geen sprake van “tijdstappen”.\n\n\n\n\n\n\nTip 11.2: Continue en discrete variabelen\n\n\n\n\n\nBiologische variabelen kunnen continu of discreet zijn. Continue variabelen zijn eigenschappen zoals lengte, gewicht of temperatuur, die elke waarde op een schaal kunnen aannemen, inclusief niet-gehele getallen met decimalen. Tussen twee gegeven waarden zijn altijd tussenliggende waarden mogelijk. Dit maakt continue variabelen zeer geschikt voor processen met vloeiende overgangen, zeker wanneer ook tijd continu wordt verondersteld. Discrete variabelen hebben alleen specifieke waarden (vaak gehele getallen). Er bestaan geen tussenliggende waarden, omdat ze gebaseerd zijn op tellingen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#een-ode-van-hertenmigratie",
    "href": "Modellen/odes_basis.html#een-ode-van-hertenmigratie",
    "title": "11  Modelleren met ODEs",
    "section": "11.6 Een ODE van hertenmigratie",
    "text": "11.6 Een ODE van hertenmigratie\nWe kunnen van het bovengenoemde hertenfeestje ook een ODE (een differentiaalvergelijking) opschrijven. In tegenstelling tot Vergelijking 11.2, beschrijft een ODE niet het aantal herten zelf, maar de snelheid waarmee dat aantal verandert. Voor ons scenario ziet dit er zo uit:\n\\[\n    \n\\mathchoice{\\frac{\\mathrm{d}H(t)}\n{\\mathrm{d}t}}{\\mathrm{d}H(t)/\\mathrm{d}t}\n{\\mathrm{d}H(t)/\\mathrm{d}t}\n{\\mathrm{d}H(t)/\\mathrm{d}t}\n= m\n\\tag{11.3}\\]\nFormeel staat hier: de afgeleide van \\(H(t)\\) over de tijd (dat wil zeggen de snelheid van verandering) is gelijk aan \\(m\\). Inderdaad, als we \\(H(t)\\) uit Vergelijking 11.2 zouden differentiëren voor \\(t\\) (tijd), dan krijgen we \\(m\\). So far so good.\nStel je echter voor dat we niet weten met hoeveel herten we begonnen maar alleen weten dat er ieder uur \\(m\\) herten bijkomen. In dat geval kunnen dus we alleen Vergelijking 11.3 opschrijven, zonder dat we de specifieke vorm van \\(H(t)\\) weten. In dat geval is \\(H(t)\\) dus een onbekende functie (zoals in een algebraïsche vergelijking \\(x\\) een onbekende waarde is). De oplossing van deze ODE is dus een wiskundige functie \\(H(t)\\), waarvan de afgeleide altijd \\(m\\) is. Hoe vinden we dan deze oplossing?",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#functies-als-oplossingen",
    "href": "Modellen/odes_basis.html#functies-als-oplossingen",
    "title": "11  Modelleren met ODEs",
    "section": "11.7 Functies als oplossingen",
    "text": "11.7 Functies als oplossingen\nOmdat Vergelijking 11.3 heel erg simpel is, kunnen we wel bedenken hoe mogelijke oplossingen er uit zouden kunnen zien:\n\n\n\n\n\nDe oplossing voor een ODE is dus niet een enkel getal (zoals bij de algebraïsche vergelijking de oplossing \\(x=6\\) was), maar een functie van tijd (“een grafiekje door de tijd”). Sterker nog, omdat \\(m\\) en de beginwaarde van \\(H\\) niet vast staat, is de oplossing een hele familie van functies. Maar er zijn natuurlijk ook een heleboel functies die niet aansluiten bij onze ODE:\n\n\n\n\n\nDe bovenstaande grafiekjes van \\(H(t)\\) zijn niet geldig voor onze ODE van het hertenfeestje, omdat niet op elk punt de helingshoek hetzelfde is (terwijl de ODE zegt dat deze altijd gelijk is aan \\(m\\)!). Geldige grafiekjes worden specifieke oplossingen genoemd: ze gelden alleen voor specifieke beginwaarden van \\(H\\) en een specifieke waarde van parameter \\(m\\). Er bestaan ook algemene oplossingen voor ODEs. Dat zijn formules waaraan alle specifieke oplossingen voldoen. Voor ons hertenfeestje waren we daarmee begonnen: Vergelijking 11.2.\nMaar stel dat we beginnen met een ODE zonder vooraf een specifieke oplossing te kennen. Hoe weten we dan de oplossing van die ODE? Het zijn natuurlijk vooral de oplossingen die ons inzicht geven in de dynamiek van het systeem! Maar oplossingen vinden, is lang niet altijd eenvoudig.\nStel bijvoorbeeld dat de herten ook naar huis kunnen gaan. Omdat alleen herten die in het bos aanwezig zijn naar huis kunnen gaan, hangt deze snelheid af van de huidige hoeveelheid herten (\\(H(t)\\)). De ODE wordt dan dus:\n\\[\n\n\\mathchoice{\\frac{\\mathrm{d}H(t)}\n{\\mathrm{d}t}}{\\mathrm{d}H(t)/\\mathrm{d}t}\n{\\mathrm{d}H(t)/\\mathrm{d}t}\n{\\mathrm{d}H(t)/\\mathrm{d}t}\n= m - d \\cdot H(t)\n\\tag{11.4}\\]\n\n\n\n\n\n\nLet op! \\(\\mathrm{d}\\) en \\(d\\) zijn niet hetzelfde!\n\n\n\nDe bovenstaande vergelijking heeft twee verschillende d’s. De d aan de linkerkant van de vergelijking is de d van differentiaal, en geeft dus aan dat we het over de afgeleide hebben. De \\(d\\) aan de rechterkant van de vergelijking zou kunnen staan voor depart (vertrekken), en is een model-parameter (in andere modellen zou je \\(d\\) kunnen tegenkomen als death rate of decay). Je kunt deze twee d’s dus niet tegen elkaar wegdelen! We hadden deze parameter ook \\(v\\) voor vertrekken kunnen noemen, of \\(q\\) voor kukelekuu (die laatste keuze is om meerdere reden misschien niet zo handig ;)).\n\n\nWelke algemene oplossing (\\(H(t)=\\dots\\)) voldoet nu aan deze vergelijking? Oftewel: welke functie \\(H(t)\\) heeft altijd een afgeleide die aan deze ODE voldoet? Wat in ons eerste model eenvoudig uit ons hoofd te doen was, is nu ineens wat lastiger geworden. Om de oplossing te vinden, moeten we differentiaalvergelijkingen integreren, wat niet altijd eenvoudig is. Gelukkig hoeven jullie dit niet handmatig te doen, en wel om de volgende redenen:\n\nZelfs voor relatief eenvoudige ODEs kan het vinden van de algemene oplossing onmogelijk zijn (niet alleen moeilijk, maar écht onmogelijk).\nMet behulp van een computer (bijvoorbeeld in R) kun je eenvoudig specifieke oplossingen (grafiekjes over de tijd) berekenen.\nJe kunt met pen en papier veel inzicht uit ODEs krijgen zonder de algemene oplossing te bepalen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#sec-odes-eenheden",
    "href": "Modellen/odes_basis.html#sec-odes-eenheden",
    "title": "11  Modelleren met ODEs",
    "section": "11.8 Rekenen aan eenheden",
    "text": "11.8 Rekenen aan eenheden\nLater in de cursus gaan we R-scripts gebruiken om specifieke oplossingen te laten uitrekenen, maar zoals gezegd kun je met pen en papier ook al veel voor elkaar krijgen. Hiermee oefenenen is belangrijk, want zo krijgen we een beter gevoel voor ODEs, zodat we eerder doorhebben wanneer de computer (wellicht door een typefoutje) rare resultaten geeft. Laten we beginnen met waar al het rekenwerk begint: zorgen dat we appels met appels vergelijken.\nLaten we nog even doorgaan met het model van herten-migratie met herten die naar huis vetrekken:\n\\[\\begin{align}\n\n\\mathchoice{\\frac{\\mathrm{d}H(t)}\n{\\mathrm{d}t}}{\\mathrm{d}H(t)/\\mathrm{d}t}\n{\\mathrm{d}H(t)/\\mathrm{d}t}\n{\\mathrm{d}H(t)/\\mathrm{d}t}\n= m - d \\cdot H(t)\n\\end{align}\\]\nOm het allemaal wat overzichtelijker te houden kunnen we het vermenigvuldigingsteken (\\(\\cdot\\)) weglaten, en \\(H(t)\\) opschrijven als \\(H\\):\n\\[\\begin{align}\n\n\\mathchoice{\\frac{\\mathrm{d}H}\n{\\mathrm{d}t}}{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n= m - dH\n\\end{align}\\]\nLaten we nogmaals omschrijven wat hier staat. Aan de linkerzijde staat de verandering in de hoeveelheid herten per tijdseenheid (in het hertenscenario hadden we het over tijd in uren). De verbale omschrijving “per tijdseenheid” kunnen we wiskundig opschrijven als \\(\\frac{1}{t}\\) (of \\(t^{-1}\\), dat is hetzelfde). Hetzelfde geldt overigens voor “per hert”, wat zou vertalen naar \\(\\frac{1}{H}\\) of \\(H^{-1}\\). Je kunt het woord “per” dus vertalen naar “gedeeld door”. Dus: “herten per uur” kunnen we opschrijven als \\(\\frac{H}{t}\\).\nAan de linkerkant staat dus iets in termen van “verandering in aantal herten per tijdsinterval in uren”, wat we voor het gemak afkorten naar “herten per uur”, dus \\(H \\over t\\). Aan de rechterzijde staan twee individuele termen, namelijk \\(m\\) en \\(dH\\). Om de differentiaalvergelijking geldig te houden moeten deze individuele termen dezelfde eenheden van “herten per uur” hebben, want je kan immers geen appels en peren bij elkaar optellen.\n\\[\\begin{align}\n\\underbrace{\n\\mathchoice{\\frac{\\mathrm{d}H}\n{\\mathrm{d}t}}{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n}_{\\text{herten per uur}} = \\underbrace{m}_{\\text{herten per uur}} - \\underbrace{dH}_{\\text{herten per uur}}\n\\end{align}\\]\nHieruit kunnen we dus onmiddelijk concluderen dat de migratieparameter (\\(m\\)) ook in termen van “herten per uur” uitgedrukt moet worden. Wiskundig stellen we dan dat de eenheid (soms ook dimensie genoemd) van \\(m\\) “herten per uur” is. Als we dus in het veld de migratie gaan meten, weten we wat ons te doen staat.\nMaar wat zijn de eenheden van de parameter \\(d\\), die het vertrek bepaalt? Hiervoor moeten we deze term gelijk stellen aan \\(H/t\\), en oplossen voor \\(d\\):\n\\[\\begin{align*}\n    dH = H/t \\\\\n    d = 1/t\n\\end{align*}\\]\nNu weten we dus dat de vertrekparameter de eenheid/dimensie \\(1 \\over t\\) heeft, met andere woorden “per tijdseenheid” of “per uur”. Omdat we het aantal herten hebben weggedeeld, beschrijft deze parameter dus de niet het vertrek op populatieniveau, maar de vertreksnelheid per individu (dat laaste wordt ook wel per capita genoemd). Als we deze parameter in het veld zouden willen meten, zouden we het aantal vertrekkende herten per uur moeten meten gedeeld door het totaal aantal herten.\n\n\n\n\n\n\nODEs doen belangrijke aannames\n\n\n\n\n\nZoals in de introductie uitgelegd, maken alle modellen aannames. Bij ODEs maken we ook een paar stevige aannames, namelijk:\n\nPopulatiegroottes zijn continu. Daarom worden ze meestal als dichtheden (en niet aantallen individuen) geïnterpreteerd. \nEr is geen variatie binnen de populatie  Elk hert is gelijk, dus dezelfde migratiesnelheid en vertrekkans, ongeacht leeftijd, geslacht, etc.\nDe populatie is goed gemengd (well-mixed assumption)Er is dus niet zoiets als een ruimtelijk patroon, waarbij bijvoorbeeld herten aan de rand van een bos meer kans hebben op sterfte door predatie dan herten in het midden van het bos.\n\n\n\n\n\nOefening 11.1 (Plastic in de oceaan) \nWe omschrijven hoe de hoeveelheid plastic in de oceaan verandert (kilo’s per jaar) met de volgende vergelijking:\n\\[\\begin{align}\n\n\\mathchoice{\\frac{\\mathrm{d}P}\n{\\mathrm{d}t}}{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n= k - \\delta P\n\\end{align}\\]\n\nWelke twee processen worden beschreven met de twee individuele termen? Beschrijf in je eigen woorden.\nBepaal de eenheid van de parameter \\(k\\)\nBepaal ook de eenheid van de parameter \\(\\delta\\)\nWelk van de twee termen (\\(k\\) of \\(\\delta P\\)) denk je dat groter is, gegeven het huidige gedrag van mensen?",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#evenwichten",
    "href": "Modellen/odes_basis.html#evenwichten",
    "title": "11  Modelleren met ODEs",
    "section": "11.9 Evenwichten",
    "text": "11.9 Evenwichten\nZoals hierboven uitgelegd is het vaak (relatief) eenvoudig om een ODE (bijvoorbeeld \\(\n\\mathchoice{\\frac{\\mathrm{d}H}\n{\\mathrm{d}t}}{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n= m - dH\\)) op te stellen, maar niet zo eenvoudig om de algemene oplossing (\\(H(t) = ...\\)) te vinden. In dit deel gaan we een ODE-model van de konijnen in Australië bestuderen, en zal je zien dat we die oplossing ook helemaal niet nodig hebben om inzichten te vergaren.\nEen mogelijk ODE-model voor de exponentiële groei van konijnen ziet er zo uit:\n\\[\\begin{equation}\n    \\frac{\\mathrm{d}N(t)}{\\mathrm{d}t} = r \\cdot N(t)\n\\end{equation}\\]\nWederom laten we het vermenigvuldigingsteken en de \\((t)\\) weg, zodat het iets leesbaarder wordt:\n\\[\\begin{equation}\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} = rN\n\\end{equation}\\]\nDe rechterzijde van deze vergelijking lijkt heel erg op de differentievergelijking uit het vorige hoofdstuk, maar let op, de interpretatie is net anders. Hier staat dat de groeisnelheid gelijk is aan \\(rN\\), en niet de populatiegrootte in “de volgende tijdstap”. Dat betekent dat bij deze ODE elke positieve waarde van \\(r\\) (ook \\(r=0.1\\)) resulteert in groei, terwijl er in de differentievergelijking alleen groei is wanneer \\(r&gt;1\\). Ondanks deze verschillen, kunnen we ook met ODEs de groei beperken door kleine uitbreidingen te doen. In het volgende hoofdstuk zullen we bijvoorbeeld – zoals in opgave Oefening 10.2 – geboorte- (\\(b\\), birth) en sterfte- (\\(d\\), death) processen gaan toevoegen. Maar eerst gaan we onze ODE op een andere manier uitbreiden:\n\\[\\begin{equation}\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} = rN \\cdot f(N)\n\\end{equation}\\]\nMet de functie \\(f(N)\\) kunnen we de ODE uitbreiden, bijvoorbeeld door de groeisnelheid van een populatie afhankelijk te maken van de huidige populatiedichtheid.\nAls \\(f(N)\\) bijvoorbeeld afneemt bij toenemende \\(N\\), zal de groeisnelheid van de populatie ook afnemen naarmate \\(N\\) groter wordt. Stel dat we \\(f(N) = 1 - \\frac{N}{100}\\) kiezen. Deze functie wordt gelijk aan \\(0\\) als \\(N = 100\\):\n\n\nCode\n# Define the function\nf &lt;- function(N) {\n  1 - N / 100\n}\n\n# Generate a sequence of N values\nN_values &lt;- seq(0, 120, by = 1)  # Extended range to visualize the function around 100\n\n# Compute f(N)\nf_values &lt;- f(N_values)\npar(mar=c(2,2,2,2))\n# Plot the function\nplot(\n  N_values, f_values, type = \"l\", col = \"blue\", lwd = 2,\n  xlab = \"N\", ylab = \"f(N)\", main = \"Plot van f(N) = 1 - N/100\",\n  ylim = c(-0.2, 1.4), xlim = c(-10, 140), axes=F\n)\nabline(v=0,lwd=2)\nabline(h=0,lwd=2)\n# Add the vertical line below the x-axis\nsegments(\n  x0 = 100, y0 = par(\"usr\")[3],  # par(\"usr\")[3] gives the lower limit of the y-axis\n  x1 = 100, y1 = 0, col = \"grey\", lty = 3,lwd=1.2\n)\n# Annotate the points (100, 0) and (0, 1)\ntext(100, -0.37, labels = \"100\", col = \"black\", cex=0.7, xpd=T)\ntext(-10, 1, labels = \"1\", col = \"black\")\ntext(-15, 1.3, labels = \"f(N)\", col = \"grey\", cex=0.9, xpd=T)\ntext(140, -0.15, labels = \"N\", col = \"grey\", cex=0.9, xpd=T)\n\n\n\n\n\n\n\n\n\nAls we onze ODE vermenigvuldigen met deze functie, betekent dit dat de snelheid van verandering \\(0\\) wordt wanneer er \\(100\\) konijnen zijn. Dit model impliceert dat de populatie niet meer kan groeien als \\(N \\geq 100\\), omdat de groeisnelheid dan \\(0\\) of zelfs negatief is. Simpel gezegd: er is een limiet aan de groei (en dus de grootte) van de populatie. Algemener kunnen we het getal \\(100\\) vervangen door een parameter die we het draagvermogen (carrying capacity, \\(K\\)) noemen. Het draagvermogen stelt de maximale populatiegrootte voor die de omgeving kan ondersteunen. Onze uiteindelijke ODE wordt dan:\n\\[\n\\begin{equation}\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} = rN \\left(1-\\frac{N}{K}\\right)\n\\end{equation}\n\\tag{11.5}\\]\n\n\n\n\n\n\nParameters zijn vaak kleine letters, maar niet altijd\n\n\n\n\n\nOver het algemeen gebruiken we voor variabelen hoofdletters (\\(R\\), \\(N\\)) en voor parameters kleine letters (\\(r\\), \\(d\\)). Dit is echter niet altijd zo, zoals bij de parameter \\(K\\), die in de ecologie veel wordt gebruikt voor de carrying capacity.\n\n\n\nAls een populatie groeit volgens vergelijking Vergelijking 11.5, wanneer is er dan een evenwicht? Wanneer verandert de populatie niet meer? Met een ODE, is het antwoord daarop vrij eenvoudig te vinden: wanneer de snelheid van verandering (\\(\\frac{\\mathrm{d}N}{\\mathrm{d}t}\\)) gelijk is aan 0:\n\\[\\begin{equation}\n    0 = rN \\left(1-\\frac{N}{K}\\right)\n\\end{equation}\\]\nHet gelijkstellen aan \\(0\\) levert een enorm voordeel op: we raken de vreemde \\(\n\\mathchoice{\\frac{\\mathrm{d} }\n{\\mathrm{d}t}}{\\mathrm{d} /\\mathrm{d}t}\n{\\mathrm{d} /\\mathrm{d}t}\n{\\mathrm{d} /\\mathrm{d}t}\n\\) helemaal kwijt, en hebben daardoor ineens te maken met een normale algebraïsche vergelijking! Nu kunnen we eenvoudig uitzoeken bij welke dichtheid (\\(N\\)) de vergelijking klopt, met andere woorden we lossen op voor \\(N\\):\n\\[\\begin{align*}\n    rN \\left(1-\\frac{N}{K}\\right) &= 0 \\quad \\text{ als...}\\\\\n    \\color{blue} \\bar{N} & \\color{blue} = 0  \\color{black} \\quad \\text{ of als...}\\\\\n    \\left(1-\\frac NK \\right) &= 0 \\rightarrow \\color{blue} \\bar{N}=K \\\\\n\\end{align*}\\]\nBlauw-gedrukt staan de twee oplossingen van onze vergelijking, die de evenwichten of steady states van de populatie geven. Soms (maar lang niet altijd) worden populaties in evenwicht aangegeven met een streepje boven de variabele, in dit geval \\(\\bar{N}\\). Uit deze analyse kunnen we concluderen dat de populatie konijnen niet kan groeien wanneer \\(N=0\\) (als er geen konijnen zijn) of als \\(N=K\\) (als de populatie gelijk is aan \\(K\\): de carrying capacity van het systeem. Het eerste evenwicht (\\(N=0\\)) wordt vaak een “triviaal” evenwicht genoemd: als populaties niet bestaan kunnen ze ook niet groeien. Het tweede evenwicht (\\(N=K\\)) is echter biologisch meer relevant: de populatie groeit totdat de carrying capacity is bereikt.\nWe kunnen dezelfde strategie gebruiken om te controleren of pure exponentiële groei een evenwicht heeft:\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n&= rN = 0 \\quad \\text{ als...}\\\\\n    N &= 0 &\n\\end{align*}\\]\nExponentiële groei heeft dus alleen een zogezegd triviaal evenwicht (\\(N = 0\\)).\n\n\n\n\n\n\nTip 11.3: Parameters zijn niet nul\n\n\n\n\n\nODEs kunnen ook gelijk zijn aan nul als parameters 0 zijn. Echter zijn dit vaak onzinnige inzichten (een model van exponentiële groei zonder groei is niet nuttig). Daarom bekijken we vooral bij welke populatiegroottes (of dichtheden) er evenwichten zijn.\n\n\n\nLaten we ook kijken of ons hertenfeestje evenwichten heeft:\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}H}\n{\\mathrm{d}t}}{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n&= m = 0 \\quad \\text{ als...}\\\\\n\\end{align*}\\]\nZoals uitgelegd in Tip 11.3 nemen we aan dat parameters niet \\(0\\) zijn (een model van hertenmigratie zonder migratie is geen model), en zijn we dus vooral geïnteresseerd in welke waarden voor \\(H\\) een evenwicht geven. Voor deze vergelijking bestaat er dus geen evenwicht, want welke waarde voor \\(H\\) je ook invult, de populatie blijft met een constante snelheid \\(m\\) veranderen. Voor het feestje waarbij ook herten vertrekken, ligt dat net anders:\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}H}\n{\\mathrm{d}t}}{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n{\\mathrm{d}H/\\mathrm{d}t}\n&= m - dH = 0 \\quad \\text{ als...}\\\\\n    dH &= m & \\\\\n    \\bar{H} &= \\frac{m}{d} &\n\\end{align*}\\]\nDe populatie herten op het feestje zal dus uiteindelijk uitkomen op een evenwicht (\\(\\bar{H}\\)) van \\(\\frac{m}{d}\\) herten. Op dit moment gaan er kennelijk evenveel herten naar huis als er naar het bos toe migreren.\n\nConclusie evenwichten\nDus: als we willen weten waar het evenwicht van een een ODE (bijv. \\(\n\\mathchoice{\\frac{\\mathrm{d}X}\n{\\mathrm{d}t}}{\\mathrm{d}X/\\mathrm{d}t}\n{\\mathrm{d}X/\\mathrm{d}t}\n{\\mathrm{d}X/\\mathrm{d}t}\n\\)) ligt, stellen we de ODE gelijk aan \\(0\\) en lossen we de vergelijking op voor \\(X\\). Als de vergelijking geen \\(X\\) bevat (of als \\(X\\) wegvalt), en je dus alleen constanten overhoudt, is er geen evenwicht.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#opgaven",
    "href": "Modellen/odes_basis.html#opgaven",
    "title": "11  Modelleren met ODEs",
    "section": "11.10 Opgaven",
    "text": "11.10 Opgaven\n\nOefening 11.2 (Plastic in de oceaan (evenwicht)) \nBekijk nogmaals de volgende vergelijking voor hoe snel de hoeveelheid plastic in de oceaan verandert:\n\\[\\begin{align}\n\n\\mathchoice{\\frac{\\mathrm{d}P}\n{\\mathrm{d}t}}{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n= k - \\delta P\n\\end{align}\\]\n\nBepaal bij welke hoeveelheid plastic er sprake is van een evenwichtssituatie (steady state)\nIs er een triviaal (\\(P=0\\)) evenwicht?\nStel we vissen morgen (op een magische manier) alle plastic uit de oceaan. Schets met pen en paper wat er daarna zal gebeuren.\n\n\n\nOefening 11.3 (Rode bloedcellen)  \n\n\n\nRode bloedcellen, of rode CUTEcellen? (gegenereerd met ChatGPT4-o)\n\n\nRode bloedcellen worden in het beenmerg geproduceerd met een snelheid \\(p\\) cellen per dag. Elke rode bloedcel kan sterven met een kans \\(d\\) per dag.\n\nDit process levert dezelfde ODEs op als het bovengenoemde model voor plastic in de oceaan. Schrijf de vergelijking (\\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n= \\dots\\)) op.\nWat zijn de eenheden van de parameters \\(p\\) en \\(d\\)?\nReken uit hoeveel bloedcellen er in het evenwicht zijn.\nStel je doneert een halve liter bloed. Maak met pen en papier een schets van de hoeveelheid bloedcellen over de tijd vlak na de donatie.\nStel nu dat je juist bloed ontvangt. Maak nog een schets van de hoeveelheid bloedcellen over de tijd.\nWelke van deze twee parameters denk je dat de snelheid van het herstel bepaalt?\n\nJe hebt geleerd dat het vinden van algemene oplossingen van ODEs heel moeilijk kan zijn (met andere woorden, de exacte functie \\(B(t)\\) vinden die aan onze bloedcellen-ODE voldoet is lastig). We kunnen echter een specifieke oplossing van een ODE wel berekenen, als we tenminste de begin-hoeveelheid en de parameters van het model invullen. Dan kunnen we met R numeriek doorrekenen wat er gaat gebeuren. Analyseer het onderstaande script regel voor regel, en lees de comments en zorg dat je begrijpt wat er gebeurt.\n\n# Stap 1: stel parameters in\np &lt;- 2e11    \nd &lt;- 1/120   \n\n# Stap 2: stel het beginaantal B in\nB &lt;- p/d\n\n# Stap 3: maak functie die B, p, en d gebruikt om de verandering uit te rekenen\nverandering &lt;- function (B, p, d){\n  delta &lt;- p - d*B\n  return(delta)\n}\n\n# Stap 4: een test of de functie werkt\nverandering(B=p/d, p=p, d=d) \n\n# Stap 5: maak een vector van 1 lang met het begin-aantal erin\nB &lt;- c(0.9*p/d)\n\n# Stap 6: reken 500 keer de volgende hoeveelheid B uit\nfor (t in 1:500) {\n  B[t+1] &lt;- B[t] + verandering(B=B[t], p=p, d=d)\n}\n\n# Stap 7: plot de tijdserie\nplot(B, xlab=\"Tijd in dagen\", ylab=\"Aantal rode bloedcellen\", type=\"l\", col=\"seagreen\", lwd=2)\n\n\nIn ‘Stap 4’ rekent het script de hoeveelheid verandering in \\(B\\) uit. Waarom geeft de functie \\(0\\) terug?\nDe code in de for-loop produceert een specifieke oplossing, dat wil zeggen het rekent één van de mogelijke tijd-series uit voor \\(B(t)\\). Dit gebeurt op een zeer grove manier door in stappen de integraal (de opsomming van kleine veranderingen) door te rekenen. Om dit netjes te doen, gebruik je normaal gesproken integrators die automatisch zorgen dat de tijdstap niet te groot is1. Leg uit waarom dat belangrijk kan zijn (hint: denk aan het vorige hoofdstuk).\nSchat met behulp van de grafiek in hoe lang het duurt om de helft van het bloedverlies te herstellen.\nStel dat je slechts een beetje bloed verliest (0.1%). Hoe lang duurt het om hiervan de helft te herstellen?\nWat bepaalt denk je hoe snel je van bloedverlies herstelt (\\(p\\), \\(d\\), of beide)?\nGebruik het script om te bepalen welke parameter (\\(p\\) of \\(d\\)) de snelheid van herstel bepaalt. Komt dit overeen met je eerdere inschatting?\n\n\n\nOefening 11.4 (Een differentie- en differentiaalvergelijking doorrekenen met R) \nWe hebben eerder een R-script bekeken die een tijdserie produceert van een differentievergelijking voor logistische konijnengroei. We kunnen in deze differentievergelijking ook de parameter \\(K\\) gebruiken om de groei te stoppen. De code ziet er dan ongeveer zo uit:\n\n# SIMPEL SCRIPT VOOR DIFFERENTIEVERGELIJKING\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24    # aantal konijnen\nr &lt;- 2     # groei per jaar\nK &lt;- 10^9  # schaalt de dichtheidsafhankelijkheid\n\n# Stap 2: bereken het aantal konijnen in [t+1] 40 keer\nfor (t in 1:40){\n  N[t+1] &lt;- r*N[t]*(1-(N[t]/K))\n}\n\n# Stap 3: bekijk resultaten\nN[20] # Aantal na 19 jaar (N[1] is jaar 0!)\nplot(N,type=\"o\",xlab=\"Tijd (jaren)\", ylab=\"Aantal konijnen\")\n\nWe kunnen een vergelijkbaar script gebruiken om de ODE (differentiaalvergelijking) van konijnengroei door te rekenen. Let op: ODEs hebben in werkelijkheid geen “tijdstappen” (tijd is een continue variabele), maar een computer werkt eigenlijk altijd in stappen. We moeten dus in ieder geval zorgen dat we kleine stapjes nemen. Neem de onderstaande code over en zorg dat je de regels zo goed mogelijk begrijpt.\n\n# SIMPEL SCRIPT VOOR DIFFERENTIAALVERGELIJKING\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24 \nr &lt;- 2\nK &lt;- 10^9\n\n# Stap 2, definieer tijdstappen en maak een dataframe aan\ndelta_t &lt;- 0.01 # grootte van de tijdstap \ntijdstapjes &lt;- seq(0,20,by=delta_t)\ntijdserie &lt;- data.frame(t=tijdstapjes,konijnen=N)\n\n# Stap 3: Reken in kleine stapjes de volgende N uit\nfor (t in 1:length(tijdstapjes)-1){\n  groeiN &lt;- delta_t * r*N*(1-N/K)  \n  N &lt;- N + groeiN \n  tijdserie[t+1,\"konijnen\"] &lt;- N\n}\n\n# Stap 3: bekijk resultaten\ntijdserie[20,] # Aantal na 0.19 jaar\nplot(tijdserie$t, tijdserie$konijnen, type=\"l\",xlab=\"Tijd (jaren)\", ylab=\"Aantal konijnen\")\n\nHet bovenstaande script is iets anders geschreven dan het eerste script. Simpele scripts kunnen vaak op heel veel manieren geschreven worden. Zo genereert de bovenstaande code niet een tijdserie-vector (zoals het vorige voorbeeld), maar een tijdserie-dataframe. Het voordeel hiervan is dat we ook een tweede kolom kunnen bijhouden: de hoeveelheid tijd die is verstreken.\n\nBestudeer het eerste R-script (voor de differentievergelijking). Voer het script uit voor veel verschillende waarden van \\(r\\). Wat gebeurt er met \\(r&lt;1\\)? Wat gebeurt er met \\(r&gt;3.7\\)? \nBestudeer ook het tweede R-script (voor de differentiaalvergelijking, waarbij we kleine stapjes nemen). Wat gebeurt er met \\(r&lt;1\\)? Wat gebeurt er nu met \\(r&gt;3.7\\)? Welke waarde van \\(r\\) geeft afname? Welke Bij welke waarde van \\(r\\) krijg je chaotische fluctuaties?\nMaak de tijdstap voor de differentiaalvergelijking heel klein (bijv delta_t = 0.0001), en voer het hele script uit. Wat valt je op? (hint: R-studio heeft rechtsboven in de console een grote rode STOP-knop)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#terminologie",
    "href": "Modellen/odes_basis.html#terminologie",
    "title": "11  Modelleren met ODEs",
    "section": "11.11 Terminologie",
    "text": "11.11 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nDifferentiaalvergelijking / ODE\nDifferential equation / ODE\nEen wiskundige vergelijking die omschrijft hoe snel een variabele (bijvoorbeeld een populatiegrootte) verandert.\n\n\nContinue variabelen\nContinuous variables\nVariabelen die elke waarde op een schaal kunnen aannemen, inclusief decimalen (denk aan lengte, temperatuur, of gewicht)\n\n\nDiscrete variabelen\nDiscrete variables\nVariabelen die een beperkt aantal (specifieke) waarden kunnen aannemen. Vaak zijn dit gehele getallen (denk aan een aantal cellen of een aantal mutaties)\n\n\nSpecifieke oplossing van een ODE\nSpecific solution of an ODE\nEén van de vele mogelijke oplossingen van een ODE, bijvoorbeeld door specifieke parameters / begin-hoeveelheden in te vullen\n\n\nAlgemene oplossing\nGeneral solution\nDe wiskundige vergelijking waar alle specifieke oplossingen aan voldoen. Meestal moeilijk te verkrijgen.\n\n\nEvenwicht\nEquilibrium / steady state\nWe spreken van een evenwichtssituatie als alle processen elkaar opheffen, zodat de variabelen van het systeem niet meer veranderen.\n\n\nTriviaal evenwicht\nTrivial equilibrium\nEen evenwichts-situatie die biologisch gezien niet interessant is, bijvoorbeeld een evenwicht bij \\(0\\) konijnen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_basis.html#footnotes",
    "href": "Modellen/odes_basis.html#footnotes",
    "title": "11  Modelleren met ODEs",
    "section": "",
    "text": "Hiervoor gaan we later in de cursus een R-script genaamd Grind.R inladen↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Modelleren met ODEs</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html",
    "href": "Modellen/dichtheidseffecten.html",
    "title": "12  Dichtheidseffecten",
    "section": "",
    "text": "12.1 Leerdoelen\nNa dit hoofdstuk, moet je het volgende kunnen:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#leerdoelen",
    "href": "Modellen/dichtheidseffecten.html#leerdoelen",
    "title": "12  Dichtheidseffecten",
    "section": "",
    "text": "Uitleggen wat dichtheidsafhankelijke geboorte (density dependent birth) en dichtheidsafhankelijke sterfte (density dependent death) zijn, en deze herkennen in een ODE.\nEen faseportret kunnen lezen, en corresponderende oplossing schetsen.\nBediscussiëren wat de voor- en nadelen zijn van het afschieten van dieren in termen van welzijn op populatieniveau.\n\n\n\n\n\n\n\n\n(afbeelding gegenereerd met ChatGPT4-o)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#geboorte-en-sterfte",
    "href": "Modellen/dichtheidseffecten.html#geboorte-en-sterfte",
    "title": "12  Dichtheidseffecten",
    "section": "12.2 Geboorte en sterfte",
    "text": "12.2 Geboorte en sterfte\nIn het vorige hoofdstuk hebben we dichtheidsafhankelijkheid ingebouwd zodat de populatie langzamer gaat groeien bij grote dichtheden:\n\\[\n\\frac{\\mathrm{d}N}{\\mathrm{d}t} = rN\\left(1-\\frac{N}{K}\\right)\n\\] Deze ODE voor logistische groei kom je veel tegen in biologische modellen. De parameter \\(r\\) in deze vergelijking staat bekend als de intrinsieke groeisnelheid (intrinsic growth rate) van de populatie. Als \\(r\\) positief is, is er groei (ook als \\(r=0.1\\)!). Als \\(r\\) negatief is, is de groei negatief. Maar biologisch gezien is “negatieve groei” natuurlijk een beetje vreemd. Bedoelen we niet eigenlijk dat de hoeveelheid sterfte (hierna: death) hoger is dan geboorte (hierna: birth)? Een gebrek aan voedsel kan bijvoorbeeld een verhoogde death rate opleveren (zoals we eerder modelleerden d.m.v. een kwadratische death rate in de vorm \\(-dN^2\\)), terwijl birth rate per individu gelijk blijft (\\(bN\\) is per individu één en dezelfde birth rate van \\(b\\)). Het zou ook zo kunnen zijn dat individuen met minder voedsel minder reproduceren (dus een verlaagde birth rate krijgen). Om deze verbale begrippen in onze ODE te verwerken, moeten we weer afstappen van de parameter \\(r\\), en deze toch weer uitsplitsen in birth (\\(b\\)) en death (\\(d\\)), zoals we bij het eerste werkcollege ook hebben gedaan. Neem bijvoorbeeld weer ons model van exponentiële groei:\n\\[\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} = rN\n\\]\nNogmaals: in dit model is er exponentiele groei wanneer \\(r&gt;0\\), en exponentiele afname wanneer \\(r&lt;0\\). Als we r vervangen door het verschil in birth (\\(b\\)) en death (\\(d\\)), dan krijgen we:\n\\[\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} = ( {\\color{#2a53f7}b} - {\\color{red}d} )N\n\\tag{12.1}\\]\n\n\n\n\n\n\nLet op! Vergelijking 12.1 geeft ook gewoon exponentiele groei (of afname)!\n\n\n\nHoewel we de birth en death parameters hebben geintroduceerd, is er vooralsnog weinig veranderd aan ons model. Net als dat \\(r&gt;0\\) en \\(r&lt;0\\) respectievelijk leidde tot groei en afname, is er bij \\(b&gt;d\\) en \\(b&lt;d\\) ook sprake van exponentiële groei of afname:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#dichtheidsafhankelijke-geboorte",
    "href": "Modellen/dichtheidseffecten.html#dichtheidsafhankelijke-geboorte",
    "title": "12  Dichtheidseffecten",
    "section": "12.3 Dichtheidsafhankelijke geboorte",
    "text": "12.3 Dichtheidsafhankelijke geboorte\nHoewel onze nieuwe vergelijking voor groei zich nog niet anders gedraagt, kunnen we met deze aanpassing wel na gaan denken over birth en death processen. Stel je voor dat we experimenteel hebben bepaald dat een soort dichtheidsafhankelijke geboorte heeft (density dependent birth), zie bijvoorbeeld Figuur 12.1.\n\n\n\n\n\n\nFiguur 12.1: Reproductiesucces neemt vaak af met dichtheid (© 2014 Pearson Education Inc.)\n\n\n\nWaar we deze afname eerder in het algehele groei-process hadden verwerkt, gaan we nu een nieuw model bekijken waar alleen de birth verandert bij grotere dichtheden. Hiervoor is het handig om eerst de birth en death termen op te splitsen:\n\\[\\begin{align}\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} &= ({\\color{#2a53f7}b}-{\\color{red}d})N\\\\\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} &= {\\color{#2a53f7}b}N - {\\color{red}d}N\n\\end{align}\\]\nNu kunnen we ervoor kiezen om de geboorteterm te vermenigvuldigen met een nieuwe functie die afhangt van de populatiedichtheid (\\(f(N)\\)):\n\\[\\begin{align}\n    {\\color{#2a53f7}b} & \\rightarrow {\\color{#2a53f7}b} \\cdot f(N)\n\\end{align}\\]\nBijvoorbeeld dezelfde functie die we eerder hebben gebruikt:\n\\[\\begin{align}\n    {\\color{#2a53f7}b} & \\rightarrow {\\color{#2a53f7}b}\\left(1-\\frac{N}{K}\\right)\n\\end{align}\\]\nDat wil zeggen, de constante parameter \\(b\\) wordt vervangen door een term die afneemt met \\(N\\). De parameter \\(b\\) staat nu niet meer voor de birth rate, maar voor de maximale birth rate die alleen bereikt wordt bij kleine populatiegroottes. Als we dit in de gehele ODE invullen, krijgen we nu:\n\\[\\begin{align}\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} &= {\\color{#2a53f7}b}\\left(1-\\frac{N}{K}\\right)N - {\\color{red}d}N\n\\end{align}\\]\n\nOefening 12.1 (Andere functies voor dichtheidseffecten) \nHierboven vermenigvuldigen we de birth rate met een functie \\(f(N)=1-\\frac{N}{K}\\), zodat de birth rate afneemt bij hogere populatiegroottes. Stel je in plaats daarvan voor dat we de birth met één van de onderstaande functies hadden aangepast. Beschrijf wat er dan met de birth zou gebeuren bij toenemende populatiegroottes.\n\\[\\begin{align}\n    {\\color{#2a53f7}b} & \\rightarrow {\\color{#2a53f7}b} \\cdot f(N)\n\\end{align}\\]\n\n\\(b \\rightarrow b \\cdot f(N) \\quad \\textrm{met} \\quad f(N)=\\frac{N}{K} + 1\\)\n\\(b \\rightarrow b \\cdot f(N) \\quad \\textrm{met} \\quad f(N)= 1 - cN\\)\n\\(b \\rightarrow b \\cdot f(N) \\quad \\textrm{met} \\quad f(N)= 1 - cN^2\\)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#het-faseportret",
    "href": "Modellen/dichtheidseffecten.html#het-faseportret",
    "title": "12  Dichtheidseffecten",
    "section": "12.4 Het faseportret",
    "text": "12.4 Het faseportret\nZoals je in het vorige hoofdstuk geleerd hebt, kunnen we ODEs eenvoudig analyseren door ons af te vragen: wanneer is er geen groei meer? Wanneer is \\(\n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n\\) gelijk aan \\(0\\)? Deze relatief eenvoudige berekening wordt weergegeven in de linkerzijde van Figuur 12.2. De rechterzijde geeft visueel weer wat deze berekening nou eigenlijk heeft bepaald, door de groeisnelheid (dus: de ODE) als functie van de dichtheid van de populatie te schetsen. Als we de ODE uitvermenigvuldigen zien we een negatieve tweede-orde term (\\(-bN^2/k\\)) en twee eerste-orde termen (\\(bN\\) en \\(dN\\) zijn niet gekwadrateerd). Dit vormt een bergparabool1, een functie die op twee punten gelijk is aan \\(0\\). Op deze punten is de populatie in evenwicht: deze kan niet groeien of krimpen.\n\n\n\n\n\n\nFiguur 12.2: Rekenen aan evenwichten, of deze visualiseren in een faseportret\n\n\n\nEr is nog iets wat je heel snel aan een faseportret af kan lezen. We weten dat er groei is als \\(\n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n\\) groter is dan \\(0\\) en dat de populatie afneemt als \\(\n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n\\) kleiner is dan \\(0\\) (en zoals gezegd: dat er een evenwicht is als \\(\n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n\\) gelijk is aan \\(0\\)). In het figuur staan deze punten aangegeven op de x-as. Pijltjes naar rechts geven aan dat er groei is (pijltje wijst naar “meer N”), pijltjes naar links geven aan dat er afname is, en cirkels geven aan dat er een evenwicht is. Als de pijltjes naar dit evenwicht toewijzen, dan zal het systeem daar op ten duur naartoe gaan. Dit stabiele evenwicht (aangegeven met een ingevulde cirkel) vormt een zogeheten attractor voor het systeem: als je lang genoeg wacht zal de populatie hier uit komen. Het evenwicht bij \\(N=0\\) heeft alleen pijltjes die ervan wegwijzen, en is dus een instabiel evenwicht (en is dus geen attractor). Deze worden vaak aangegeven met een open cirkel. Dankzij deze visualisatie is het relatief eenvoudig om te bedenken hoe het systeem zich over de tijd zal ontwikkelen. Voor specifieke begin-waarden, kunnen we dus specifieke oplossingen schetsen!\n\n\n\n\n\n\nNegatieve populaties zijn biologisch niet interessant.\n\n\n\nHoewel er links van het instabiele evenwicht in Figuur 12.2 (voor negatieve \\(N\\)) sprake is van “afname naar min-oneindig”, is dat biologisch gezien natuurlijk niet relevant. Dit kunnen we als bioloog daarom met een gerust hart negeren.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#dichtheidsafhankelijke-sterfte",
    "href": "Modellen/dichtheidseffecten.html#dichtheidsafhankelijke-sterfte",
    "title": "12  Dichtheidseffecten",
    "section": "12.5 Dichtheidsafhankelijke sterfte",
    "text": "12.5 Dichtheidsafhankelijke sterfte\nOp een vergelijkbare manier als hierboven, zouden we ook een populatie kunnen modelleren die dichtheidsafhankelijke sterfte (density dependent death) ondergaat:\n\\[\\begin{align}\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} &= {\\color{#2a53f7}b}N-{\\color{red}d}N, \\quad \\text{met } \\quad {\\color{red}d} \\rightarrow {\\color{red}d}\\left(1+\\frac{N}{K}\\right) \\\\\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} &= {\\color{#2a53f7}b}N - {\\color{red}d}\\left(1+\\frac{N}{K}\\right)N\n\\end{align}\\]\nLet op dat we hier de sterfte laten toenemen met de dichtheid (er staat een \\(+\\) in plaats van een \\(-\\)).\n\nOefening 12.2 (Rekenen aan dichtheidsafhankelijke sterfte) \nHierboven hebben we een ODE opgesteld voor dichtheidsafhankelijke sterfte, namelijk: \\[\n\\frac{\\mathrm{d}N}{\\mathrm{d}t} = {\\color{#2a53f7}b}N - {\\color{red}d} \\left( 1+\\frac{N}{K}\\right)N\n\\] Bekijk nog eens Figuur 12.2, waar de evenwichten voor dichtheidsafhankelijke geboorte worden berekend en gevisualiseerd.\n\nBereken zelf waar de evenwichten liggen met de dichtheidsafhankelijke sterfte.\nSchets het faseportret en geef aan waar eventuele evenwichten liggen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#andere-dichtheidseffecten",
    "href": "Modellen/dichtheidseffecten.html#andere-dichtheidseffecten",
    "title": "12  Dichtheidseffecten",
    "section": "12.6 Andere dichtheidseffecten",
    "text": "12.6 Andere dichtheidseffecten\nIn de natuur zal het vaak zo zijn dat zowel geboorte als sterfte door de populatiegrootte worden beïnvloed, dus moeten we ook beide in ons model opnemen. Dan krijgen we:\n\\[\\begin{align}\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} &= {\\color{#2a53f7}b}\\left(1-\\frac{N}{K_b}\\right)N - {\\color{red}d}\\left(1+\\frac{N}{K_d}\\right)N\\\\\n\\end{align}\\]\nHier schaalt \\(K_b\\) de dichtheidsafhankelijke geboorte, en \\(K_d\\) de dichtheidsafhankelijke sterfte. In het werkcollege zullen jullie zien dat dit simpele model inzicht kan geven in belangrijke beleidsbeslissingen met betrekking tot dierenwelzijn.\nEr zijn vele andere mogelijke dichtheidseffecten mogelijk (teveel om te benoemen). Als we het over ecosystemen hebben, zullen er ook effecten zijn die afhangen van de dichtheid van een andere soort. We kunnen ons bijvoorbeeld voorstellen dat de konijnen (\\(N\\)) door vossen (\\(V\\)) worden opgegeten. Hoe meer konijnen en vossen, hoe waarschijnlijker het wordt dat konijnen worden weggegeten:\n\\[\\begin{align}\n    \\frac{\\mathrm{d}N}{\\mathrm{d}t} &= {\\color{#2a53f7}b}\\left(1-\\frac{N}{K_b}\\right)N - {\\color{red}d}\\left(1+\\frac{N}{K_d}\\right)N - cNV\\\\\n\\end{align}\\]\nDeze vergelijking begint er aardig ingewikkeld uit te zien, maar doordat we het stapje voor stapje hebben opgebouwd, zie je wellicht goed in wat elke term betekent. In de laatste (nieuwe term), staat \\(c\\) voor de predatiesnelheid is en \\(V\\) de hoeveelheid vossen. Maar vossen zouden zelf dan toch ook van populatiegrootte moeten veranderen? In Hoofdstuk 14 ga je zien hoe we ons model kunnen uitbreiden om zowel konijnen (prooi) als vossen (predator) te kunnen beschrijven.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#opgaven",
    "href": "Modellen/dichtheidseffecten.html#opgaven",
    "title": "12  Dichtheidseffecten",
    "section": "12.7 Opgaven",
    "text": "12.7 Opgaven\n\nOefening 12.3 (Bacteriën in het bloed) \n\n\n\nAfbeelding gegenereerd met ChatGPT4-o\n\n\nElke keer dat je je tanden poetst, komt er een kleine hoeveelheid bacteriën in je bloed. Omdat bloed een erg voedselrijke omgeving is voor bacteriën, zouden ze hier onmiddelijk exponentieel kunnen groeien. Gelukkig hebben we neutrofielen in ons bloed die de bacteriën snel opruimen. Hier zouden we een simpel ODE model voor kunnen opstellen:\n\\[\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n=rB-kNB \\]\nHier is B de hoeveelheid bacterien in je bloed is, N de hoeveelheid neutrofielen in je bloed, \\(r\\) de groeisnelheid van de bacteriën (per uur), en k de snelheid waarmee neutrofielen bacteriën opruimen.\n\nLeg uit waar je denkt dat iedere term in de ODE voor staat (\\(rB\\) en \\(kNB\\)), en welke eenheden deze termen hebben.\nWat zijn de eenheden voor \\(r\\) en \\(k\\)?\n\nAls er geen bacteriën zijn (\\(B=0\\)) is er geen groei. Dit wordt een triviaal (irrelevant) evenwicht genoemd, omdat we voor dit inzicht het hele model niet hadden hoeven maken.\n\nNeem aan dat er een constante hoeveelheid neutrofielen in je bloed is (\\(N\\) is constant). Bij welke hoeveelheid neutrofielen is er een niet-triviaal evenwicht?\nChemotherapie kan een groot effect hebben op het aantal neutrofielen in het bloed, waardoor de tweede term steeds kleiner wordt. Schets de termen \\(rB\\) en \\(kNB\\) als een functie van \\(N\\) (dat wil zeggen, met \\(N\\) op de x-as, en deze termen op de y-as.\nBepaal hoeveel neutrofielen je minimaal nodig hebt om de groei van de bacteriën te stoppen.\nDe \\(kNB\\) term heet een mass-action term omdat de snelheid direct proportioneel is aan de dichtheden van \\(N\\) en \\(B\\). Wat moeten we doen als we willen weten hoeveel bacteriën er “per neutrofiel” opgeruimd worden?\nHoeveel bacteriën worden er per neutrofiel opgeruimd als er 0 bacteriën zijn? En als er oneindig veel bacteriën zijn? Is dit een redelijke aanname?\n\nBekijk de volgende uitbreiding van ons model \\[\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n=rB-\\frac{kNB}{h+B}  \\] De vernieuwde (tweede) term ziet er misschien wat ingewikkeld uit. Om te begrijpen wat er gebeurt is het wederom handig om even na te gaan wat er gebeurt met 0 of heel veel bacterien. Als er 0 bacterien zijn is deze term 0, omdat boven de breuk een \\(B\\) staat.\n\nAls \\(B\\) heel groot is, hoe belangrijk is \\(h\\) dan nog in deze vergelijking?\nAls er dus heel veel bacterien zijn, hoeveel bacterien kunnen er dan per neutrofiel opgeruimd worden in dit nieuwe model?\nBepaal opnieuw hoeveel neutrofielen je minimaal nodig hebt om de groei van bacteriën te stoppen.\n\n\n\nOefening 12.4 (Heckrunderen) \nHeckrunderen zijn in de Oostvaardersplassen geintroduceerd als “semi-natuurlijke” grazers. Ze voorkomen dat het hele gebied begroeid raakt met bomen en struikgewas, wat belangrijk is voor het broeden van vogels in dit gebied. In 1983 is een kleine populatie heckrunderen vrijgelaten, en de populatie is na 20 jaar gestabiliseerd op 300-400 runderen.\n\n\n\n\n\n\nFiguur 12.3: Heckrunderen op de Oostvaardersplassen\n\n\n\nOmdat er veel dieren van de honger doodgaan, zijn er veel debatten geweest over dierenwelzijn. Een mogelijke oplossen is het afschieten van dieren. Dit zou hun populatiegrootte kunnen verkleinen en daardoor de overgebleven individuen een prettiger leven geven.\n\nBekijk bovenstaande metingen van de geboorte- en sterfte van heckrunderen. Hoeveel heckrunderen zou je op basis van deze data verwachten in evenwicht?\n\nDe data laat zien dat zowel geboorte als sterfte dichtheidsafhankelijk zijn. In het hoofdstuk hebben we hier al een model voor besproken:\n\\[\n\\frac{\\mathrm{d}N}{\\mathrm{d}t} = {\\color{#2a53f7}b}\\left(1-\\frac{N}{K_b}\\right)N - {\\color{red}d}\\left(1+\\frac{N}{K_d}\\right)N\n\\tag{12.2}\\]\nUit het figuur kunnen we zien dat geboorte per rund hoogstens 0.4 per jaar is (als de populatie klein is), en dat deze bij 400 runderen gehalveerd is.\n\nBepaal met deze informatie wat de waarden van de parameters \\(b\\) en \\(K_b\\) is.\nIn de figuur zien we ook dat sterfte minimaal 0.03 is, en dat deze 0.33 is bij een populatiegrootte van 500. Wat zijn dan de parameters \\(d\\) en \\(K_d\\)?\nVul de parameterwaarden die hebt gevonden in, en bepaal bij welke populatiegrootte er een evenwicht is.\nHoeveel dieren gaan er in dit evenwicht per jaar dood?\n\nOm het afschieten van runderen in dit model te betrekken, kunnen we een extra term aan de ODE toevoegen: \\[\n      \\frac{\\mathrm{d}N}{\\mathrm{d}t} = {\\color{#2a53f7}b}(1-\\frac{N}{K_b})N - {\\color{red}d}(1+\\frac{N}{K_b})N - kN\n  \\] Waarbij \\(k\\) de fractie runderen is die we afschieten. Bekijk het volgende R-script:\n\n# Stap 1: Een functie die verandering uitrekent\nverandering &lt;- function (N){\n  delta &lt;- b*(1-(N/Kb))*N - d*(1+(N/Kd))*N - k*N\n  return(delta)\n}\n\n# Stap 2: stel begin-aantal / parameters in\nN &lt;- 10\nb &lt;- 0.4    \nd &lt;- 0.03\nKb &lt;- 800\nKd &lt;- 50\nk &lt;- 0.0\n\n# Stap 3, definieer tijdstappen en maak een dataframe aan\ndelta_t &lt;- 0.1 # grootte van de tijdstap\ntijdstapjes &lt;- seq(0,50,by=delta_t)\ntijdserie &lt;- data.frame(t=tijdstapjes,runderen=N,sterfte=NA)\n\nfor (t in 1:length(tijdstapjes)-1) {\n  if(t&gt;300) k &lt;- 0.05\n  sterfte &lt;- N*d*(1+N/Kd) + k*N\n  N &lt;- N + delta_t*verandering(N)\n  tijdserie[t+1,] &lt;- c(t=t*delta_t, runderen=N, sterfte=sterfte)\n}\n\n# Plot het totaal aantal heckrunderen door de tijd\nplot(tijdserie$t, tijdserie$runderen, xlab=\"Tijd in jaren\", ylab=\"Aantal heckrunderen\", type=\"l\", col=\"brown\", lwd=2)\n# Plot het aantal stervende heckrunderen\nlines(tijdserie$t, tijdserie$sterfte, col=\"red\", lty=2)\n# Voeg legenda toe\nlegend(40, 270, legend=c(\"Totaal\", \"Sterfte\"), col=c(\"brown\", \"red\"), lty=1:2)\n\n\nNa hoeveel jaar wordt er begonnen met schieten? Welk percentage van de heckrunderen wordt afgeschoten?\n\nMet tijdserie$runderen/tijdserie$sterfte kunnen we de sterfte-kolom delen door de kolom met het totaal aantal runderen om uit te rekenen welk percentage van de populatie op elk tijdstap sterft (let op: sterfte is inclusief afschieten!). Deze zouden we ook kunnen toevoegen aan ons dataframe, en apart kunnen plotten:\n\ntijdserie$percentage_sterfte = tijdserie$sterfte/tijdserie$runderen\nplot(tijdserie$t, tijdserie$percentage_sterfte, type=\"l\")\n\n\nBekijk het nieuwe dataframe met View(tijdserie), en vergelijk het percentage sterfte in jaar 30 en 50. Wat valt je op?\nMet het percentage stervende dieren kunnen we inschatten hoe lang de dieren gemiddeld leven. Als 10% van de dieren jaarlijks overlijdt, dan leeft een dier gemiddeld 10 jaar. Als je dit combineert met je antwoord op de vorige vraag, zou je het afschieten van dieren dan aanmoedigen of afraden?\nAls je de verwachte levensduur zo min mogelijk wil beinvloeden, wat voor beleid zou je dan nog meer kunnen bedenken?",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#terminologie",
    "href": "Modellen/dichtheidseffecten.html#terminologie",
    "title": "12  Dichtheidseffecten",
    "section": "12.8 Terminologie",
    "text": "12.8 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nIntrinsieke groeisnelheid\nIntrinsic growth rate\nDe netto snelheid waarmee een populatie groeit (bijvoorbeeld alle birth minus alle death). Voor deze parameter wordt meestal de letter \\(r\\) gebruikt. Door groei te versimpelen als intrinsieke (netto) groei, is meestal niet gedefiniëerd wat de precieze geboorte- en sterftesnelheden zijn.\n\n\nDichtheidsafhankelijk\nDensity dependent\nWanneer een process sneller of langzamer gaat als de dichtheid van de populatie verandert. In latere hoofdstukken gaan we ook modellen bestuderen waarbij de dichtheid van andere populaties ook een rol speelt.\n\n\nFaseportret\nPhase portrait\nEen visuele manier om van een ODE weer te geven waar de eventuele evenwichten liggen, en of deze instabiel/stabiel zijn\n\n\nEvenwicht\nSteady state\nEen conditie waarbij een systeem niet verandert. Bijvoorbeeld, een populatiegrootte waarbij er geen groei/afname is.\n\n\nStabiel evenwicht\nStable steady state\nEen evenwicht waar het systeem naartoe beweegt, bijvoorbeeld wanneer de groeisnelheid toeneemt bij afname, en afneemt bij toename.\n\n\nInstabiel evenwicht\nUnstable steady state\nEen evenwicht waar het systeem van weg beweegt, bijvoorbeeld wanneer de groeisnelheid toeneemt bij toename, en afneemt bij afname. Dit zijn dus weliswaar evenwichten, maar elk mogelijke verstoring zal het systeem ervandaan bewegen!\n\n\nAttractor\nAttractor\nWaar het systeem naartoe gaat als je lang genoeg wacht. Vaak is dit een stabiel evenwichtspunt, maar er zijn ook andere soorten attractoren mogelijk.\n\n\nMassawerking\nMass action\nMass action (het Nederlandse begrip is ongebruikelijk) is een aanname dat interacties tussen individuen/moleculen direct proportioneel is aan de dichtheden/concentraties.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/dichtheidseffecten.html#footnotes",
    "href": "Modellen/dichtheidseffecten.html#footnotes",
    "title": "12  Dichtheidseffecten",
    "section": "",
    "text": "Als je functies schetsen toch nog lastig vindt, kijk dan nog even naar hoofdstuk 10. Je kan het ook altijd even controleren met de website Desmos.com↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Dichtheidseffecten</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html",
    "href": "Modellen/ruimtelijkegroei.html",
    "title": "13  Ruimtelijke groei",
    "section": "",
    "text": "13.1 Leerdoelen\nIn dit hoofdstuk, gaan we na denken over hoe populaties (of het nu bomen, bacteriën, of tumorcellen zijn) groeien in de ruimte. Dit doen we door kennis te maken met individual-based modelling, wat aanneemt dat organismen discrete individuen zijn, eventueel met hun eigen omgeving en gedrag. Aan het eind van dit hoofdstuk, moet je begrijpen:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#leerdoelen",
    "href": "Modellen/ruimtelijkegroei.html#leerdoelen",
    "title": "13  Ruimtelijke groei",
    "section": "",
    "text": "Wat er bedoelt wordt met ‘omschrijvingsniveau’.\nDat je naast populatiegroottes ook vanuit het individu kan denken.\nDat interacties lokaal zijn, dus dat de posities van individuen ertoe kunnen doen.\nHoe het komt dat sommige ruimtelijke modellen een “ingebouwd” draagvermogen hebben.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#wat-is-individual-based-modelling",
    "href": "Modellen/ruimtelijkegroei.html#wat-is-individual-based-modelling",
    "title": "13  Ruimtelijke groei",
    "section": "13.2 Wat is individual-based modelling?",
    "text": "13.2 Wat is individual-based modelling?\nIndividual-based modelling (IBMs, ook wel agent-based modelling of ABMs genoemd), is een modeltechniek waarbij organismen als discrete entiteiten (individuen) worden beschouwd. Hierdoor kunnen we niet louter en alleen populatiegroottes bestuderen, maar ook de eigenschappen en gedragingen van individuen binnen de populatie. Formeler gezegd kunnen we stellen dat individual-based modellen een ander omschrijvingsniveau hebben dan ODEs/differentievergelijkingen. Dit omschrijvingsniveau bepaalt ook welke modeluitkomsten we kunnen verwachten: als we alleen de populatiegroottes bestuderen, kunnen we geen inzichten over individuele verschillen verwachten. Laten we hiermee kennis maken door te denken aan een bacteriekolonie die zich over een agarplaat verspreidt.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#individuen-en-hun-posities",
    "href": "Modellen/ruimtelijkegroei.html#individuen-en-hun-posities",
    "title": "13  Ruimtelijke groei",
    "section": "13.3 Individuen en hun posities",
    "text": "13.3 Individuen en hun posities\nStel je voor dat in het midden van een agarplaat een enkele (paarse) bacteriecel begint met delen (zie Figuur 13.1). Deze cel groeit met een bepaalde snelheid, en kan op een bepaald moment delen. Maar reproductie is (meestal) een lokaal proces, dat wil zeggen, de dochtercel zal naast de oudercel geplaatst worden. We kunnen ons dus voorstellen dat, wanneer dit proces stap voor stap doorspeelt, de kolonie bij benadering in een cirkelvorm zal uitgroeien. Als er ook een kans is dat de dochtercel een mutatie heeft (waardoor deze bijvoorbeeld geel wordt), dan ontstaat er over de tijd zelfs een interessant patroon (zie Figuur 13.1, rechter zijde). Door het perspectief in te nemen van de cel (in plaats van de totale populatie), kunnen we dus gaan nadenken over individuele verschillen in positie, kleur, groeisnelheid, etc.\n\n\nCode (voor de leuk, dit is geen leerstof)\n# Functie om het grid te visualiseren als punten\nplot_grid &lt;- function(grid) {\n  par(mar = c(1, 1, 1, 1))\n  plot(1, 1, type = \"n\", xlim = c(1, nrow(grid)), ylim = c(1, ncol(grid)), xlab = \"\", ylab = \"\", axes = FALSE, asp = 1)\n  \n  points(which(grid == 1, arr.ind = TRUE), col = \"black\", bg = \"purple\", pch = 21, lwd=0.2, cex = 0.5)\n  points(which(grid == 2, arr.ind = TRUE), col = \"black\", bg = \"gold\", pch = 21,lwd=0.2, cex = 0.5)\n}\n\n# Functie om de groei-regels over het hele grid toe te passen. Deze regel werkt zo:\n# Voor elk lege punt (0), pak een \nupdate_grid &lt;- function(grid) {\n  size &lt;- nrow(grid)\n  new_grid &lt;- grid\n  \n  for (i in 1:size) {\n    for (j in 1:size) {\n      if (grid[i, j] == 1 || grid[i, j] == 2) {\n        neighbors &lt;- cbind(c(i-1, i+1, i, i), c(j, j, j-1, j+1))\n        for (k in 1:nrow(neighbors)) {\n          ni &lt;- neighbors[k, 1]\n          nj &lt;- neighbors[k, 2]\n          if (ni &gt; 0 && ni &lt;= size && nj &gt; 0 && nj &lt;= size && grid[ni, nj] == 0) {\n            if (runif(1) &lt; 0.5) {  # Geboortekans van 50%\n              new_grid[ni, nj] &lt;- grid[i, j]  # Kleur wordt overgedragen\n              if(runif(1) &lt; 0.01) grid[i,j] &lt;- 2\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  return(new_grid)\n}\n\n# Maak een grid van 0-en met één 1tje in het midden\ngrid &lt;- matrix(0, nrow = 100, ncol = 100)\ngrid[50,50] &lt;- 1\nset.seed(59)\n\n# Loop om het grid bij te werken en te visualiseren\nlayout(matrix(c(1,2,2,3,3,4,4),nrow=1))\nfor (t in 1:75) {\n  if(t==2 || t%%22==0) plot_grid(grid)\n  if(t==2) arrows(20,20,40,40,length=0.06,lwd=2)\n  grid &lt;- update_grid(grid)\n  \n  Sys.sleep(0.1)  # Korte vertraging om de veranderingen zichtbaar te maken\n}\ntitle(\"Een groeiende bacteriekolonie met (gele) mutanten\", cex.main=2,line = -2, outer = TRUE)\n\n\n\n\n\n\n\n\nFiguur 13.1: Paarse stippen staan voor wildtype bacteriën, terwijl gele stippen bacteriën zijn met een mutatie. Door lokale celdeling onstaat er een “taartpunt” van mutanten, zoals waargenomen in Fusco et. al (2016)\n\n\n\n\n\nDe ruimtelijke structuur die in de IBM van Figuur 13.1 ontstaat is een geheel nieuw type model-resultaat, en staat ons toe om vele nieuwe vragen te stellen: hoe verspreiden mutaties zich in een bacteriekolonie? Hoe belangrijk is zuurstof-beperking voor de groei van een tumor? Hoe behouden we diverse ecosystemen wanneer bossen de heide overgroeien? Hoewel IBMs ook zonder ruimtelijke structuur gemodelleerd kunnen worden, is een dergelijke structuur natuurlijk wel een belangrijk component van biologische systemen! Maar hoe pakken we dat dan aan, individuen in de ruimte modelleren?",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#geboorte-in-lege-hokjes",
    "href": "Modellen/ruimtelijkegroei.html#geboorte-in-lege-hokjes",
    "title": "13  Ruimtelijke groei",
    "section": "13.4 Geboorte in “lege hokjes”",
    "text": "13.4 Geboorte in “lege hokjes”\nNu we het belang inzien van individuen en hun positie, hoe verwerken we dit dan in een model? De meest eenvoudig vorm is wellicht een 2-dimensionale ruimte, waarin elk individu een x- en een y-coordinaat heeft. We kunnen bijvoorbeeld een dataframe maken met daarin twee individuen:\n\n# Maak twee individuen met een positie en een kleur\nindividual1 &lt;- data.frame(x=6,y=6,col=\"brown\")\nindividual2 &lt;- data.frame(x=7,y=6,col=\"orange\")\n# Zet ze samen in een dataframe als 'beginpopulatie'\npopulation &lt;- rbind(individual1, individual2)\npopulation\n\n  x y    col\n1 6 6  brown\n2 7 6 orange\n\n\nOm het extra simpel te houden, nemen we aan dat de x-y coordinaten altijd gehele getallen zijn (\\(x=1,2,3,\\dots,W\\) en \\(y=1,2,3,\\dots,H\\)), zodat we ons de volledige ruimte kunnen voorstellen als een simpel grid dat \\(W\\) breed is en \\(H\\) hoog (een soort schaakbord dus, maar dan zonder die oneindige berg rijst). Nu zouden we elk individu in deze lijst “regels” kunnen geven voor hun voortplanting. Elk individu zou bijvoorbeeld zich in een leeg buur-hokje kunnen voortplanten met een kans van 60%, en kunnen sterven met een kans van 5%. Laten we even stellen dat de kleur van het individu niet uitmaakt voor deze regels: deze is alleen voor de visualisatie. Als we dit simuleren in R, zouden we zoiets kunnen zien:\n\n\nCode (geen leerstof!)\n# Maak een 12x12 grid\ngrid_size &lt;- 12\ngrid &lt;- matrix(0, nrow = grid_size, ncol = grid_size)\n# Maak twee individuen met een positie en een kleur\nindividual1 &lt;- data.frame(x=6,y=6,col=\"brown\")\nindividual2 &lt;- data.frame(x=7,y=6,col=\"orange\")\n# Zet ze samen in een dataframe als 'beginpopulatie'\npopulation &lt;- rbind(individual1, individual2)\ngrid[6, 6] &lt;- 1 # 6,6 zit vol\ngrid[6, 7] &lt;- 1 # 7,6 zit vol (let op dat row=y en col=x)\n\n# Groei-simulatie functie\nsimulate_growth &lt;- function(geboorte = 0.6, sterfte=0.1) {\n  deaths &lt;- c() # Houd bij wie er dood gaan, zodat deze aan het einde uit de populatie gehaald kunnen worden\n  for (i in 1:nrow(population)) {\n    ind &lt;- population[i,]\n    if(runif(1) &lt; geboorte){\n      new_x &lt;- ind$x + sample(c(-1:1),1)\n      new_y &lt;- ind$y + sample(c(-1:1),1)\n      if(new_x&lt;1 || new_x &gt; grid_size || new_y &lt; 1 || new_y &gt; grid_size) next\n      if(grid[new_y,new_x] == 0){\n        grid[new_y,new_x] &lt;&lt;- 1\n        population &lt;&lt;- rbind(population,data.frame(x=new_x,y=new_y,col=ind$col))\n      }\n    }\n    if(runif(1) &lt; sterfte){\n      grid[ind$y,ind$x] &lt;&lt;- 0\n      deaths &lt;- c(deaths, i)\n    }\n  }\n  if(length(deaths) &gt; 0) population &lt;&lt;- population[-deaths,]\n}\n\n# Functie om het grid als bruine stipjes op een grid te plotten. \nplot_grid &lt;- function(grid, time) {\n  plot(1:grid_size, 1:grid_size, type = \"n\", xlab = \"\", ylab = \"\", axes = FALSE)\n  # Grijze lijntjes\n  for (i in 0:(grid_size)+1) {\n    abline(h = i-0.5, col = \"grey\", lty = 1)\n    abline(v = i-0.5, col = \"grey\", lty = 1)\n  }\n  # Bruine stipjes\n  for (i in 1:nrow(population)) {\n    ind &lt;- population[i,]\n    points(ind$x, ind$y, pch = 16, col = ind$col)\n  }\n  title(paste(\"Tijdstap\",time))\n}\n\n# Start een random nummer generator (gerandeert reproduceerbaarheid)\n#set.seed(591)\n\npar(mfrow=c(3,5),mar=c(1,1,2,2))\n# Simuleer een x-aantal tijdstappen (x=iterations)\niterations &lt;- 28\nplot_grid(grid,0)\nfor (i in 1:iterations) {\n  if(i%%2==0) plot_grid(grid,i)\n  simulate_growth(0.6, 0.1)\n}\n\n\n\n\n\n\n\n\nFiguur 13.2: Simulatie van groei op een grid, waarbij “individuen” kunnen reproduceren in lege buur-hokjes met een kans van 60%, en sterven met een vaste kans van 5%. De kleur heeft hier geen invloed op, en dient alleen ter illustratie.\n\n\n\n\n\nHoewel het R-script geen dichtheidsafhankelijke afname van de geboortekans gebruikt (deze blijft altijd 60%), zal de populatie toch niet meer toenemen zodra het grid vol zit. De reden dat er toch een draagvlak aanwezig is, is simpelweg doordat individuen alleen kunnen voortplanten in lege hokjes. De daadwerkelijke geboortekans is dus helemaal niet constant, want op een vol grid is die veel kleiner dan op een leeg grid! Als we hadden aangenomen dat individuen ook kunnen voortplanten in bezette hokjes, dan zou de populatie inderdaad exponentiëel blijven groeien.\n\n\n\n\n\n\nIs ruimte beperkend voor groei?\n\n\n\n\n\nDe aanname dat ruimte een intrinsieke beperking is voor groei hangt sterk af van het biologische scenario: voor planten die licht moeten opvangen geldt dit waarschijnlijk wel, maar voor de grazers die deze planten eten wellicht niet. Vergelijkbaar hebben bacteriën op een agarplaat of tumorcellen alleen voedingsstoffen aan de rand, wat een vergelijkbaar effect oplevert waarbij er alleen in “lege ruimte” groei mogelijk is. Dergelijke overwegingen zijn heel belangrijk als we biologische systemen goed willen kunnen voorspellen!\n\n\n\nEen ander belangrijk verschil met onze eerdere (wiskundige) modellen is dat we nu gebruik maken van stochasticiteit, dat wil zeggen kansprocessen. Specifieker zijn birth en death geen snelheden meer, maar kansprocessen. Als in deze simulatie birth veel hoger is dan death (\\(b\\gg d\\)), zal de populatie natuurlijk gewoon uitgroeien totdat een groot deel van het grid vol zit (Figuur 13.3 (a)). Daarna zal de populatie een beetje rond een evenwicht fluctueren, waarbij death wordt gecompenseerd door birth.\nWanneer het verschil tussen \\(b\\) en \\(d\\) veel kleiner is, groeit het grid minder vol. Ook zie je dat de fluctuaties rond het evenwicht wat sterker zijn geworden (Figuur 13.3 (b)). Daarnaast zie je in deze simulatie dat er aan het einde, door toeval, alleen nog oranje individuen over zijn!\nAls \\(b\\) slechts een klein beetje groter is dan \\(d\\) (Figuur 13.3 (c)), zien we zelfs dat de kleine start-populatie van 2 cellen door stomme pech uit zou kunnen sterven. Ook dit was niet mogelijk in de ODEs, waar \\(b&gt;d\\) altijd exponentiële groei geeft.\n\n\nCode\n# Maak een 12x12 grid\ngrid_size &lt;- 32\ngrid &lt;- matrix(0, nrow = grid_size, ncol = grid_size)\n# Maak twee individuen met een positie en een kleur\nindividual1 &lt;- data.frame(x=16,y=16,col=\"brown\")\nindividual2 &lt;- data.frame(x=17,y=16,col=\"orange\")\n# Zet ze samen in een dataframe als 'mbeginpopulatie'\npopulation &lt;- rbind(individual1, individual2)\ngrid[16, 16] &lt;- 1 # 6,6 zit vol\ngrid[16, 17] &lt;- 1 # 7,6 zit vol (let op dat row=y en col=x)\n\n# Groei-simulatie functie\nsimulate_growth &lt;- function(geboorte = 0.6, sterfte=0.1) {\n  deaths &lt;- c() # Houd bij wie er dood gaan, zodat deze aan het einde uit de populatie gehaald kunnen worden\n  for (i in 1:nrow(population)) {\n    ind &lt;- population[i,]\n    if(runif(1) &lt; geboorte){\n      new_x &lt;- ind$x + sample(c(-1:1),1)\n      new_y &lt;- ind$y + sample(c(-1:1),1)\n      if(new_x&lt;1 || new_x &gt; grid_size || new_y &lt; 1 || new_y &gt; grid_size) next\n      if(grid[new_y,new_x] == 0){\n        grid[new_y,new_x] &lt;&lt;- 1\n        population &lt;&lt;- rbind(population,data.frame(x=new_x,y=new_y,col=ind$col))\n      }\n    }\n    if(runif(1) &lt; sterfte){\n      grid[ind$y,ind$x] &lt;&lt;- 0\n      deaths &lt;- c(deaths, i)\n    }\n  }\n  if(length(deaths) &gt; 0) population &lt;&lt;- population[-deaths,]\n}\n\n# Functie om het grid als bruine stipjes op een grid te plotten. \nplot_grid &lt;- function(grid, time) {\n  plot(1:grid_size, 1:grid_size, type = \"n\", xlab = \"\", ylab = \"\", axes = FALSE)\n  # Grijze lijntjes\n  for (i in 0:(grid_size)+1) {\n    abline(h = i-0.5, col = \"grey\", lty = 1)\n    abline(v = i-0.5, col = \"grey\", lty = 1)\n  }\n  # Bruine stipjes\n  for (i in 1:nrow(population)) {\n    ind &lt;- population[i,]\n    points(ind$x, ind$y, pch = 16, col = ind$col,cex = 1)\n  }\n  title(paste0(\"Grid op t=\",time))\n}\n\n# Start een random nummer generator (gerandeert reproduceerbaarheid)\nset.seed(596)\n#par(mfrow=c(1,2),mar=c(3,3,1,1))\nlayout.matrix &lt;- matrix(c(1, 2), nrow = 1, ncol = 2)\nlayout(mat = layout.matrix, widths=c(2.5,1))\npar(mar=c(4,4,1,1))\npopulation &lt;- rbind(individual1, individual2)\ngrid &lt;- matrix(0, nrow = grid_size, ncol = grid_size)\ngrid[16, 16] &lt;- 1 # 6,6 zit vol\ngrid[16, 17] &lt;- 1 # 7,6 zit vol (let op dat row=y en col=x)\n# Simuleer een x-aantal tijdstappen (x=iterations)\niterations &lt;- 300\npopsize &lt;- nrow(population)\nfor (i in 1:iterations) {\n  simulate_growth(0.6, 0.1)\n  popsize[i+1] &lt;- nrow(population)\n}\nts.plot(popsize, xlab=\"Tijd\", ylab=\"Populatiegrootte\", lwd=2, main=\"\")\npar(mar=c(1,1,1,1))\nplot_grid(population,300)\n\npar(mar=c(4,4,1,1))\npopulation &lt;- rbind(individual1, individual2)\ngrid &lt;- matrix(0, nrow = grid_size, ncol = grid_size)\ngrid[16, 16] &lt;- 1 # 6,6 zit vol\ngrid[16, 17] &lt;- 1 # 7,6 zit vol (let op dat row=y en col=x)\n# Simuleer een x-aantal tijdstappen (x=iterations)\niterations &lt;- 300\npopsize &lt;- nrow(population)\nfor (i in 1:iterations) {\n  simulate_growth(0.3, 0.1)\n  popsize[i+1] &lt;- nrow(population)\n}\nts.plot(popsize, xlab=\"Tijd\", ylab=\"Populatiegrootte\", lwd=2, main=\"\")\npar(mar=c(1,1,1,1))\nplot_grid(population,300)\n\npar(mar=c(4,4,1,1))\npopulation &lt;- rbind(individual1, individual2)\ngrid &lt;- matrix(0, nrow = grid_size, ncol = grid_size)\ngrid[16, 16] &lt;- 1 # 6,6 zit vol\ngrid[16, 17] &lt;- 1 # 7,6 zit vol (let op dat row=y en col=x)\n# Simuleer een x-aantal tijdstappen (x=iterations)\niterations &lt;- 300\npopsize &lt;- nrow(population)\nfor (i in 1:iterations) {\n  simulate_growth(0.12, 0.1)\n  popsize[i+1] &lt;- nrow(population)\n  if(popsize[i+1]==0) break\n}\nts.plot(popsize, xlab=\"Tijd\", ylab=\"Populatiegrootte\", lwd=2, main=\"\")\npar(mar=c(1,1,1,1))\nplot_grid(population,300)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Simulatie met b=0.6, d=0.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Simulatie met b=0.3, d=0.1\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) Simulatie met b=0.12, d=0.1\n\n\n\n\n\n\n\nFiguur 13.3: Simulaties van groei op een grid met verschillende birth rates (en dezelfde death rates).",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#lokale-interacties-en-samenwerken",
    "href": "Modellen/ruimtelijkegroei.html#lokale-interacties-en-samenwerken",
    "title": "13  Ruimtelijke groei",
    "section": "13.5 Lokale interacties en samenwerken",
    "text": "13.5 Lokale interacties en samenwerken\nIn de biologie is vaak sprake van samenwerking (ook wel coöperatie genoemd). Wolven jagen samen, planten zenden chemische signalen uit om anderen te waarschuwen voor herbivoren, en bacteriën scheiden enzymen uit die suikers beschikbaar maken voor nabijgelegen bacteriën. Dergelijke samenwerkingen zouden we kunnen verwerken in onze simulatie in een vorm van dichtheidsafhankelijkheid.\nAls we positieve dichtheidsafhankelijke effecten willen gebruiken in een IBM op een grid, zouden we de totaalpopulatie kunnen meten en de kans op geboorte (\\(b\\)) hiermee aan kunnen aanpassen. Echter hoeft het helemaal niet zo te zijn dat iedereen de vruchten plukt van samenwerkingen. Als een individu in grid-punt (10,10) anderen helpt (bijvoorbeeld de bacterie maakt suikers vrij), zal een individu in gridpunt (25,20) daar geen direct voordeel van hebben. In plaats daarvan, zouden we bijvoorbeeld de geboortekans van de 8 buren van (10,10) kunnen verhogen. Dit noemen we een lokale interactie. Bijvoorbeeld, de oranje en rode individuen kunnen de volgende geboortekansen krijgen:\n\\[ \\text{Geboortekans({\\color{red}rood})} = b+c\\cdot \\left(\\sum{\\text{aantal \\color{orange}oranje  buren}}\\right)\\] \\[\\text{Geboortekans({\\color{orange}oranje})} = b+c\\cdot \\left(\\sum{\\text{aantal \\color{red} rode  buren}}\\right)\\]\nEen voorbeeld van de bovenstaande regels zouden bacteriën kunnen zijn die van elkaar afhankelijk zijn voor de productie van essentiële aminozuren1. Dergelijke cross-feeding komt veel voor in de microbiële wereld, maar ook dieren, planten, en andere organismen kunnen vergelijkbare afhankelijkheden hebben.\nHieronder zie je een interactieve simulatie van het systeem (je moet nog wel even op start drukken), waarbij je de parameters \\(b\\), \\(c\\), en \\(d\\), en de begin-dichtheid kan instellen. De parameters zijn zo ingesteld dat \\(b\\) maar een klein beetje groter is dan \\(d\\), maar doordat de individuen elkaar helpen groeien ze toch prima uit totdat het hele grid vol is.\n\n\n\n\n\n\nWat opvalt aan de bovenstaande simulatie is dat de populatie uitgroeit, maar dat als we naar de grafiek kijken, dit niet exponentieel lijkt te beginnen (met andere woorden, we zien geen duidelijke sigmoïde curve). Dit zou kunnen komen doordat we met een vrij hoge dichtheid van cellen beginnen, waardoor we onmiddellijk al in het steile deel van de groeicurve zitten. In het werkcollege zul je deze simulatie verder bestuderen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#de-parasiet",
    "href": "Modellen/ruimtelijkegroei.html#de-parasiet",
    "title": "13  Ruimtelijke groei",
    "section": "13.6 De parasiet",
    "text": "13.6 De parasiet\nAls we het hebben over samenwerking, kunnen we ons afvragen wat er zou gebeuren als iemand valsspeelt. Wat nu als er bijvoorbeeld een derde bacteriesoort is die energieke kosten bespaart op de productie van aminozuren, maar daardoor afhankelijk is van de andere soorten? Laten we de bovenstaande simulaties eens uitbreiden met een derde soort: die we voor de eenvoud de parasiet zullen noemen. In het Engels worden samenwerkers vaak cooperators worden genoemd, en heten de parasieten vaak cheaters of defectors. We nemen aan dat de parasiet geen hulp geeft, maar wordt geholpen door zowel de rode als oranje individuen:\n\\[ \\text{Geboortekans({\\color{red}rood})} = b+c\\cdot \\left(\\sum{\\text{aantal {\\color{orange}oranje}  buren}}\\right)\\] \\[\\text{Geboortekans({\\color{orange}oranje})} = b+c\\cdot \\left(\\sum{\\text{aantal {\\color{red} rode}  buren}}\\right)\\] \\[\\text{Geboortekans({\\color{#2a53f7}blauw})} = b+c\\cdot \\left(\\sum{\\text{aantal {\\color{red} rode}  plus {\\color{orange}oranje}  buren}}\\right)\\]\nDit levert de volgende dynamica op:\n\n\n\n\n\nZoals je ziet heeft deze verandering een enorme impact! Waar eerst de simulatie niet veel meer veranderde nadat het grid was volgegroeid, zien we nu dat het systeem alsmaar in beweging blijft. De cheaters overgroeien steeds de cooperators, maar omdat ze daarna zichzelf niet helpen sterven ze lokaal uit. Overgebleven cooperators kunnen de “lege ruimte” die daardoor is ontstaan weer veroveren, waarna er weer cheaters komen, etc.. Zo gaat de simulatie alsmaar door. Als je echter na iedere stap alle individuen op een willekeurige plek plaatst (dat gebeurt met het vinkje ‘mengen’, je roert als het ware het systeem heel goed door), zul je zien dat er iets heel anders gebeurt: de cheaters nemen de hele simulatie over en daarna sterft alles uit. Als alles is uitgestorven, is het natuurlijk game over.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#de-eindeloze-mogelijkheden-van-ibms",
    "href": "Modellen/ruimtelijkegroei.html#de-eindeloze-mogelijkheden-van-ibms",
    "title": "13  Ruimtelijke groei",
    "section": "13.7 De eindeloze mogelijkheden van IBMs",
    "text": "13.7 De eindeloze mogelijkheden van IBMs\nNu je een klein beetje een beeld hebt gekregen van individual-based modelling, kun je je misschien voorstellen dat de mogelijkheden eindeloos zijn. Hokjes kunnen namelijk niet alleen individuen bevatten, maar ook voedsel, antibiotica, andere organismen, uitgescheiden eiwitten, windrichtingen en noem zo maar op. Bovendien hoeven individuen natuurlijk helemaal niet in hokjes te zitten, maar zouden ze vrij door een continue ruimte kunnen lopen, zoals de mieren in de simulatie hieronder:\n\n\n\n\n\n\nSimulatie van mieren die foerageren voor voedsel. De witte cirkel is voedsel (“suiker”), en de grijze cirkel het nest waarin wordt weergegeven hoeveel suiker er is verzameld. De rode en blauwe paden zijn feromonen waarmee de mieren signaleren naar elkaar waar het nest en het voedsel te vinden is. We zullen deze simulatie in een later hoofdstuk ook nog bespreken.\n\nJe begrijpt nu wellicht dat je met IBMs allerlei dingen simuleren: (“the sky is the limit!”)! Maar dat is misschien niet altijd even wenselijk. Met modellen proberen we natuurlijk (zoals in de introductie uitgelegd) de biologie enigszins te versimpelen, dus het is de kunst om de modellen niet te complex te maken. Aan de andere kant kunnen modellen die te simpel zijn de plank enorm misslaan. De balans tussen een simpel en een complex model is helemaal niet eenvoudig op te maken. Albert Einstein begreep dit ook:\n\n“A model should be as simple as possible, but no simpler” – Albert Einstein2",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#opgaven",
    "href": "Modellen/ruimtelijkegroei.html#opgaven",
    "title": "13  Ruimtelijke groei",
    "section": "13.8 Opgaven",
    "text": "13.8 Opgaven\n\nOefening 13.1 (Samenwerken en het Allee effect)  We bestuderen in deze opgave de simulatie van samenwerkende individuen nog wat verder.\n\n\n\n\n\n\nZoals je kunt zien, laat deze populatie geen duidelijk logistische groei zien (er is geen duidelijke S-curve). Wellicht komt dit doordat we met een te hoge initiële dichtheid zijn begonnen.\n\nPas met de sliders de begindichtheid aan. Laat de andere parameters op hun standaard waarde staan (\\(b=0.11\\), \\(d=0.10\\), en \\(c=0.3\\)). Herstart de simulatie een aantal keer. Vind je nu wel logistische groei?\nWat valt je op bij hele lage begin-dichtheden (\\(&lt;0.002\\))?\nGebruik een begin-dichtheid van \\(0.002\\), en herhaal je experiment 20 keer. Houd voor iedere keer bij of het de populatie lukt om uit te groeien (ja/nee).\nActiveer “mengen”, en herhaal je experiment uit b nogmaals 20 keer. Houd wederom bij of de populatie succesvol kan uitgroeien\nHeb je een verschil gevonden? Zou dit verschil misschien toeval kunnen zijn?\n\n\n\nOefening 13.2 (De simpelste ODE met coöperatie)  In een eerder hoofdstuk hebben we geleerd dat we in ODEs de birth- of death-rates afhankelijk kunnen maken van de dichtheid. In dit hoofdstuk hebben we kennis gemaakt met coöperatie: groei die juist bevorderd wordt door een hogere dichtheid. Dit zouden we in een simpele ODE kunnen verwerken als een een birth rate die kwadratisch afhangt van de dichtheid:\n\\[\\begin{align}\n    \n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n&= bN^2 - dN\n\\end{align}\\]\n\nBereken bij welke dichtheden \\(N\\) er sprake is van evenwicht.\nSchets \\(\n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n\\) als een functie van \\(N\\). Bepaal met behulp van dit faseportret de stabiliteit van de evenwichten.\nSchets oplossingen voor de initiële conditie waar \\(N\\) klein is, en de initiele conditie waar \\(N\\) groot is. Wat valt je op?\nWaarom was het fenomeen uit vraag c. geen probleem in het individual-based model?\n\n\n\nOefening 13.3 (Logistische groei met sexuele reproductie)  Je hebt geleerd dat logistische groei in eerste instantie exponentiëel is, waarna het afvlakt tot een plateau. In de cooperatie-vragen heb je gezien dat hele lage dichtheden een probleem kunnen opleveren. Ditzelfde geldt voor sexuele reproductie: bij lage dichtheden is het moeilijk een paringspartner te vinden. Beschouw de volgende ODE vergelijking:\n\\[\\begin{align}\n    \n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n&= bN^c(1-\\frac{N}{K}) - dN\n\\end{align}\\]\nDit model lijkt erg op vergelijkingen die we al hebben gezien voor logistische groei: \\(b\\) staat voor de (maximale) geboortesnelheid, \\(k\\) schaalt de dichtheidsafhankelijke afname van de geboorte, en \\(d\\) geeft een constante sterfte. Maar er staat ook een nieuwe parameter (\\(c\\)) in de vergelijking, die staat voor het coöperatie-effect (dit kan staan voor zowel sex als andere vormen van samenwerking). Hoe werkt deze parameter precies? Laten we eerst aannemen dat \\(c=1\\). Omdat \\(N^1\\) gewoon \\(N\\) is, blijft de ODE dan gelijk aan de groeimodellen die we al kennen.\n\nSchets de groeisnelheid \\(\n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n\\) als een functie van \\(N\\). Teken onder je schets een faseportret met pijltjes om aan te geven bij welke dichtheden de populatie kan groeien, en bij welke de populatie zal krimpen.\n\nNu nemen we aan dat \\(c=2\\). De functie krijgt nu de vorm \\(bN^2 - \\frac{bN^3}{K} - dN\\), die wat lastiger te schetsen is. We kunnen de \\(N\\) buiten haakjes halen, en dan de ABC-formule kunnen gebruiken om de nulpunten van het deel binnen de haakjes uit te rekenen… Maar we kunnen ook een stukje R-code schrijven om de grafiek te plotten, of de grafiek plotten in Desmos (beide opties staan hieronder weergegeven).\n\n\n\n\n\nCode voor het tekenen van de functie met R\nb=0.2\nK=10\nd=0.1\nc=2\n\nfN &lt;- function(N){\n return(b*N^c*(1-N/K) - d*N)\n}\n\nx &lt;- seq(0,11,by=0.01)\ny &lt;- fN(x)\n\nplot(x,y, type='l',lwd=3,col='seagreen', ylim=c(-0.1,3),\n       ylab=\"dN/dt\",xlab=\"N\",\n       main=\"dN/dt als een functie van N\")\nabline(h=0)\n\n\n\nNeem de grafiek uit R of Desmos over op papier, en schets opnieuw een faseportret met pijltjes eronder. Geef met open of gesloten cirkels respectievelijk instabiele en stabiele evenwichten aan.\nSchets in 1 figuur hoe de populatie door de tijd zal groeien voor verschillende begin-waarden van \\(N\\). Schets elke kwalitatief verschillende oplossing (er zijn drie mogelijkheden).\n\n\n\nOefening 13.4 (Het mengen van een kringloop)  \n\n\n\n\n\n\n\nGestern, heute und morgen folgen nicht aufeinander. Sie sind in einem ewigen Kreis miteinander verbunden. Alles ist miteinander verbunden.\n\n\nIn dit hoofdstuk hebben we een voorbeeld gezien van een “cheater”, die wanneer het systeem goed gemengd is kan leiden tot grote problemen voor de cooperators. Maar wat nu als de cooperators “terug cheaten”? Of wat als er meer complexe afhankelijkheden ontstaan, zoals weergegeven in de cyclus in bovenstaande figuur? De geboortekansen volgens deze kringloop kunnen we definiëren als:\n\\[\\begin{align}\n{Geboortekans({\\color{red}rood})} = b+c\\cdot \\left(\\sum{\\text{aantal {\\color{orange}oranje}  buren}}\\right) \\\\\n{Geboortekans({\\color{#2a53f7}blauw})} = b+c\\cdot \\left(\\sum{\\text{aantal {\\color{red}rode}  buren}}\\right) \\\\\n{Geboortekans({\\color{orange}oranje})} = b+c\\cdot \\left(\\sum{\\text{aantal {\\color{#2a53f7}blauwe}  buren}}\\right)\n\\end{align}\\]\nEen simulatie met de bovenstaande interacties vind je hieronder.\n\n\n\n\nBestudeer het modelvoor de standaardparameters \\(b=0.13, c=0.11, d=0.1\\), en beschrijf in biologische begrippen hoe dit systeem reageert op meer/minder mengen. Contrasteer je bevindingen met wat we gezien hebben voor het “cheater-cooperator” model.\n\nIn de onderstaande simulatie zijn er niet 3, maar 6 soorten die elkaar in een vergelijkbare cyclus helpen met reproduceren.\n\nOmschrijf het ruimtelijke patroon wat ontstaat en de dynamica van het aantal individuen per type.\nHeeft mengen altijd een positieve invloed op een cyclus?",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#terminologie",
    "href": "Modellen/ruimtelijkegroei.html#terminologie",
    "title": "13  Ruimtelijke groei",
    "section": "13.9 Terminologie",
    "text": "13.9 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nIndividual-based modellen\nIndividual-based models\nModellen waarbij de eigenschappen en het gedrag van individuen wordt beschreven.\n\n\nOmschrijvingsniveau\nLevel of description\nHet belangrijkste aspect dat een model omschrijft wordt vaak het omschrijvingsniveau genoemd. Voor modellen van groei (bijvoorbeeld ODEs) is vaak de populatiegrootte het omschrijvingsniveau, terwijl bij een individual-based model het individu het omschrijvingsniveau is.\n\n\nModeluitkomsten\nModel outcomes\nHet omschrijvingsniveau bepaalt sterk welke uitkomsten een model kan hebben: een model dat alleen populatiegroottes omschrijft, kan geen inzichten geven in individuele verschillen.\n\n\nStochasticiteit\nStochasticity\nStochastischiteit verwijst naar de mate van willekeur of onzekerheid in een proces of in een systeem. Zodoende zijn de uitkomsten niet volledig voorspelbaar, maar variëren door toeval of willekeurige invloeden. In dit hoofdstuk gebruiken we geboorte- en sterfte-kansen, waardoor bijvoorbeeld groeiende populaties ook door domme pech uit kunnen sterven!\n\n\nLokale interactie\nLocal interaction\nInteracties tussen individuen die alleen plaatsvinden wanneer zij zich binnen een bepaalde nabije afstand van elkaar bevinden.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/ruimtelijkegroei.html#footnotes",
    "href": "Modellen/ruimtelijkegroei.html#footnotes",
    "title": "13  Ruimtelijke groei",
    "section": "",
    "text": "Dal Co, A., van Vliet, S., Kiviet, D.J. et al. Short-range interactions govern the dynamics and functions of microbial communities. Nat Ecol Evol 4, 366–375 (2020). https://doi.org/10.1038/s41559-019-1080-2↩︎\nEigenlijk is dit helemaal niet een werkelijke citaat van Einstein, maar wel de boodschap achter een vrij complex relaas over irreducible basic elements en adequate representations, wat toch iets minder catchy bleek te zijn.↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Ruimtelijke groei</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html",
    "href": "Modellen/predatorprooi.html",
    "title": "14  Predator-prooi interacties",
    "section": "",
    "text": "14.1 Leerdoelen\nDe leerdoelen van dit onderdeel zijn:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#leerdoelen",
    "href": "Modellen/predatorprooi.html#leerdoelen",
    "title": "14  Predator-prooi interacties",
    "section": "",
    "text": "Begrijpen hoe met ODEs interacties tussen populaties kunnen worden beschreven.\nBeschrijven hoe een fase-ruimte in elkaar zit, en de belangrijkste onderdelen kunnen benoemen (nullclines, vectorveld, trajectory, evenwichten).\nBiologische vraagstukken kunnen vertalen naar parameter veranderingen.\nDe consequenties van parameter veranderingen kunnen aflezen aan een faseruimte.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#konijnen-en-vossen",
    "href": "Modellen/predatorprooi.html#konijnen-en-vossen",
    "title": "14  Predator-prooi interacties",
    "section": "14.2 Konijnen en vossen",
    "text": "14.2 Konijnen en vossen\nIn het vorige hoofdstuk hebben we populaties gemodelleerd waarbij de groei wordt beperkt door de dichtheid, resulterend in een draagvermogen (de carrying capacity). We zouden echter ook kunnen modelleren dat er een dichtheidsafhankelijk effect is van een andere populatie. Bijvoorbeeld, als er heel veel predatoren zijn, zullen er meer konijnen dood gaan door predatie. Door de consumptie van deze prooidieren, zal deze predatorpopulatie zelf kunnen toenemen. Laten we dit modelleren voor konijnen en vossen, met de volgende aannames:\n\nDe konijnen hebben dichtheidsafhankelijke geboorte \\(b\\)\nDe konijnen sterven met een vaste snelheid \\(d\\)\nPredatie gebeurt met snelheid \\(a\\). Hoe meer konijnen en vossen, hoe meer predatie er zal plaatsvinden.\nDe groeisnelheid van vossen wordt uitsluitend bepaald door predatie\nOok vossen sterven met een vaste snelheid \\(\\delta\\)\n\nWe kunnen elk van deze aannames vertalen naar een wiskundige functie die beschrijft hoe populaties reageren op hun eigen dichtheid, of die van een ander (Figuur 14.2).\n\n\n\n\n\n\nFiguur 14.2: Eenvoudige functies die we kunnen gebruiken in een predator/prooi model. Op de y-as staan de geboorte van prooi (a), sterfte van prooi (b), de predatie van prooi (c), de groei van predatoren (d) en de sterfte van predatoren (e). Al deze begrippen zijn gedefinieerd per capita (p.c.), dus “per prooi” voor a en b, en “per predator” voor en c, en d, en e.\n\n\n\nDe eerste twee processen (Figuur 14.2 a+b, de reproductie en sterfte van konijnen) kennen we al van het vorige hoofdstuk. Hoewel we de konijnen eerder \\(N\\) hadden genoemd, is het in het predator-prooi model dat we gaan bespreken gebruikelijk om de prooi R te noemen. Onze groeivergelijking voor prooidieren (met dichtheidsafhankelijke geboorte) ziet er dan dus zo uit:\n\\[\\begin{align*}\n    \\frac{\\mathrm{d}{\\color{#2d43fc}R}}{\\mathrm{d}t} &= b\\left(1-\\frac{{\\color{#2d43fc}R}}{K}\\right){{\\color{#2d43fc}R}} - d{\\color{#2d43fc}R}\n\n\\end{align*}\\]\nHieraan gaan we toevoegen dat vossen de konijnen opeten. De predator wordt in dit model vaak aangegeven met een \\(N\\). We gaan ervan uit dat predatie direct proportioneel is aan de dichtheden konijnen en vossen (dus \\(R\\cdot N\\)), en vermenigvuldigen dit met een nieuwe vrije parameter (\\(a \\cdot R\\cdot N\\)) om daarmee de predatie omhoog of omlaag te kunnen schroeven (zie Figuur 14.2 c). Deze nieuwe term noemen we de predatieterm. Als we de predatieterm toevoegen aan onze vergelijking, krijgen we:\n\\[\\begin{align*}\n  \\frac{\\mathrm{d}{\\color{#2d43fc}R}}{\\mathrm{d}t} &= b\\left(1-\\frac{{\\color{#2d43fc}R}}{K}\\right){{\\color{#2d43fc}R}} - d{{\\color{#2d43fc}R}} - a{{\\color{#2d43fc}R}}\\color{#ff7700}N\n\\end{align*}\\]\nZoals je ziet is de variabele \\(N\\) oranje gekleurd, om aan te geven dat dit de predatorpopulatie is. Nu gaan we een tweede vergelijking schrijven voor het aantal vossen. Zoals gezegd wordt hun groeisnelheid alleen bepaald door de hoeveelheid geconsumeerde prooi. Hiervoor kunnen we dus de predatieterm (\\(aRN\\)) uit de konijnen vergelijking hergebruiken (Figuur 14.2 d). Echter, omdat de biomassa van konijnen natuurlijk niet 1 op 1 vertaalt in biomassa voor vossen, kunnen we wederom een nieuwe vrije parameter toevoegen (\\(c \\cdot aRN\\)). Meestal nemen we aan dat \\(c \\leq 1\\), dat wil zeggen: er wordt niet meer dan 1 vos geboren per geconsumeerd konijn. Als laatste voegen we een eenvoudig sterfteterm toe voor de predator, en zo wordt ons uiteindelijke model:\n\\[\n\\begin{align*}\n    \\frac{\\mathrm{d}{\\color{#2d43fc}R}}{\\mathrm{d}t} &= \\underbrace{b\\left(1-\\frac{{\\color{#2d43fc}R}}{K}\\right){\\color{#2d43fc}R}}_{\\text{geboorte konijnen}} -\n\\underbrace{d{\\color{#2d43fc}R}}_{\\text{sterfte konijnen}} - \\underbrace{a{\\color{#2d43fc}R}\\color{#ff7700}N}_{\\text{predatie}}\\\\\n\\frac{\\mathrm{d}\\color{#ff7700}N}{\\mathrm{d}t} &= \\underbrace{ca{\\color{#2d43fc}R}\\color{#ff7700}N}_{\\text{geboorte vossen}} - \\underbrace{\\delta \\color{#ff7700}N}_{\\text{sterfte vossen}}\n\\end{align*}\n\\tag{14.1}\\]\nHet bovenstaande model staat bekend als het Lotka-Volterra predator-prooi model, vernoemd naar de ontdekkers Alfred Lotka en Vito Volterra. De vergelijking bestaat uit 2 ODEs die van elkaar afhankelijk zijn, en wordt daarom een 2 dimensioneel (2D) ODE systeem genoemd. We spreken van een systeem van differentiaalvergelijkingen wanneer de variabelen in elkaars vergelijking terugkomen, waardoor de dynamica van de variabelen gekoppeld (en niet onafhankelijk) is. Hierbij nemen we dus aan dat de organismen in hetzelfde (eco)systeem voorkomen, want konijnen op de Veluwe en konijnen op een eiland in Zweden beïnvloeden elkaar niet (tenzij ze het vliegtuig nemen).\nWe zouden het systeem natuurlijk nog verder uit kunnen breiden. We zouden bijvoorbeeld een top predator (adelaars) kunnen toevoegen, en dan hebben we een 3 dimensioneel (3D) ODE systeem1. We zouden zelfs een heel ecosysteem kunnen opbouwen, en een 10D of 100D systeem bestuderen. Voor deze “hoogdimensionele” systemen kunnen we vaak alleen numeriek (met de computer) uitrekenen wat er gebeurt. Maar voor 2D systemen kunnen we nog best veel met pen en papier voor elkaar krijgen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#evenwichtsanalyse-van-2d-systemen",
    "href": "Modellen/predatorprooi.html#evenwichtsanalyse-van-2d-systemen",
    "title": "14  Predator-prooi interacties",
    "section": "14.3 Evenwichtsanalyse van 2D systemen",
    "text": "14.3 Evenwichtsanalyse van 2D systemen\nIn het vorige hoofdstuk hebben we geleerd dat een populatie in evenwicht is wanneer er geen verandering meer is: als de ODE gelijk is aan \\(0\\). Als je werkt met meerdere ODEs, moet dit voor elke ODE waar zijn. Dit is biologisch ook wel te begrijpen: de prooi is in evenwicht als alle processen (alle termen) elkaar opheffen, maar als ondertussen de predator nog verandert is deze balans onmiddelijk weer verstoord!\nWe moeten dus uitzoeken wanneer zowel de prooi vergelijking als de predator vergelijking \\(0\\) zijn. Door de ODEs beide aan 0 gelijk te stellen, krijgen we een stelsel van twee algebraïsche vergelijkingen met 2 onbekenden. Deze kunnen we proberen op te lossen om te ontdekken bij welke hoeveelheid konijnen/vossen er een evenwicht is, maar dit geeft eigenlijk maar weinig inzicht in hoe de populaties veranderen over de tijd. Maar dit is nou juist wat we graag willen weten, zodat we goed kunnen voorspellen wat er zou kunnen gebeuren als je plotseling een wolf op de Veluwe loslaat. Hoe gaan de populaties precies veranderen? Gaat het naar een stabiel evenwicht? Dit kunnen we bestuderen door gebruik te maken van faseruimtes.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#wat-zijn-faseruimtes",
    "href": "Modellen/predatorprooi.html#wat-zijn-faseruimtes",
    "title": "14  Predator-prooi interacties",
    "section": "14.4 Wat zijn faseruimtes?",
    "text": "14.4 Wat zijn faseruimtes?\nOmdat we te maken hebben met 2 variabelen, zijn er allerlei combinaties mogelijk: weinig konijnen en weinig vossen, weinig konijnen en veel vossen, veel konijnen en weinig vossen, en veel konijnen en veel vossen, en alles daartussenin. We zouden de gehele ruimte van mogelijkheden kunnen weergeven in een assenstelsel:\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n\n}\n\nN &lt;- 1:100\n\nR &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\n\nplot(R,N,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"R\", side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\n\nmtext(\"N\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\n\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\n\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\n\nAxis(side=2, labels=FALSE)\n\n\n\n\n\n\n\n\n\nCode\n#vectorfield(6,10,10,-10)\n\n\nAls we nu naar onze vergelijkingen kijken, kunnen we voor extreme waarden van R en N proberen te beredeneren wat er gebeurt. Laten we bijvoorbeeld kijken wat er gebeurt als er heel weinig prooien en predatoren zijn. Omdat ODEs meestal de dichtheden van de populaties beschrijven (bijvoorbeeld “vossen per vierkante kilometer”), kan deze dichtheid ook kleiner zijn dan 1. Wat als er een dichtheid is van 0.001 konijnen, en 0.001 vossen?\nAls we de geboorteterm van prooien \\(b(1- \\frac{bR}{K})R\\) uitvermenigvuldigen krijgen we \\(bR - \\frac{bR^2}{K}\\). Omdat we aannemen dat \\(R=0.001\\), is de tweede term extra klein (want \\(0.001^2 = 10^{-6}\\)). Deze tweede term is onder deze omstandigheden dus verwaarloosbaar. Biologisch gesproken kunnen we zeggen dat wanneer er weinig konijnen zijn, dan is dichtheidsafhankelijke afname van groei verwaarloosbaar. Ditzelfde principe kunnen we toepassen op de predatieterm (\\(aRN\\)), waar de kleine \\(R\\) en kleine \\(N\\) met elkaar vermenigvuldigd worden, dus dat wordt ook een extra klein getal.\nSamengevat verwachten we bij lage dichtheden dus hetvolgende:\n\\[\\begin{align*}\n  \\frac{\\mathrm{d}{{\\color{#2d43fc}R}}}{\\mathrm{d}t} &=\\underbrace{b{{\\color{#2d43fc}R}}}_{\\text{klein}} -\n    \\underbrace{b{{\\color{#2d43fc}R}}^2}_{\\text{verwaarloosbaar klein}} -\n   \\underbrace{d{{\\color{#2d43fc}R}}}_{\\text{klein}} - \\underbrace{a{{\\color{#2d43fc}R}}{\\color{#ff7700}N}}_{\\text{verwaarloosbaar klein}}\n\\end{align*}\\]\nAls we de negeerbare termen weglaten (we gaan ze dus daadwerkelijk negeren), wordt onze konijnenvergelijking:\n\\[\\begin{align*}\n   \\frac{\\mathrm{d}{{\\color{#2d43fc}R}}}{\\mathrm{d}t} &= b{{\\color{#2d43fc}R}} -\n   d{{\\color{#2d43fc}R}}\n\\end{align*}\\]\nAangenomen dat \\(b&gt;d\\), een zeer redelijke aanname2, kan de konijnenpopulatie dus groeien. Als we ook in de predatorvergelijking kijken wat er gebeurt bij hele kleine populatiegroottes, zien we dit:\n\\[\\begin{align*}\n\\frac{\\mathrm{d}{\\color{#ff7700}N}}{\\mathrm{d}t} &=\n    \\underbrace{a{{\\color{#2d43fc}R}}{\\color{#ff7700}N}}_{\\text{verwaarloosbaar klein}} -\n    \\underbrace{d{\\color{#ff7700}N}}_{\\text{klein}}\n\\end{align*}\\]\nWaardoor voor de predatoren bij kleine dichtheden de vergelijking teruggebracht wordt tot:\n\\[\\begin{align*}\n\\frac{\\mathrm{d}{\\color{#ff7700}N}}{\\mathrm{d}t} &= -d{\\color{#ff7700}N}\n\\end{align*}\\]\nVoor de predator is er bij kleine dichtheden dus alleen sterfte over. Dit is ook wel logisch, want er is dus helemaal geen prooi aanwezig om op te kunnen eten. De predatorpopulatie zal in deze omstandigheid dus afnemen. Om onze inzichten samen te vatten, kunnen we linksonderin (voor lage dichtheden van beide populaties) twee pijltjes tekenen in onze faseruimte:\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n}\n\nN &lt;- 1:100\nR &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\n\nplot(R,N,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"R\", side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\nmtext(\"N\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nvectorfield(5,10,10,-10)\n\n\n\n\n\n\n\n\n\nOke, dus we weten nu dat er met weinig prooien/predators, toename van de prooi zal zijn en afname van de predator. We weten ook dat er met meer en meer prooi, steeds meer negatieve dichtheidseffecten zullen zijn voor de prooi: de birth rate gaat omlaag en er worden meer konijnen opgegeten. De predator heeft juist alleen maar voordeel bij meer prooi. Met andere woorden, we kunnen rechtsonderin ons diagram (meer prooi maar evenveel predator als het vorige scenario) een pijltje tekenen die de afname van prooi, en de toename van predatoren weergeeft:\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n}\n\nN &lt;- 1:100\nR &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\n\nplot(R,N,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"R\", side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\nmtext(\"N\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nvectorfield(5,10,10,-10)\nvectorfield(95,5,-10,10)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#nullclines-en-vectorvelden",
    "href": "Modellen/predatorprooi.html#nullclines-en-vectorvelden",
    "title": "14  Predator-prooi interacties",
    "section": "14.5 Nullclines en vectorvelden",
    "text": "14.5 Nullclines en vectorvelden\nUit het bovenstaande diagram kunnen we aflezen dat ergens tussen de pijltjes links onderin en de pijltjes rechts onderin, beide pijltjes van richting zijn veranderd. Neem bijvoorbeeld de groei van de predator (de oranje pijltjes): eerst is de groei negatief, maar met genoeg prooi wordt deze, op een bepaald punt, positief. Kunnen we precies bepalen waar dit oranje pijltje is omgeklapt, zodat het nu naar boven wijst? Hiervoor moeten we bepalen waar in deze faseruimte de groeisnelheid van de predatorpopulatie 0 is: aan de ene kant van 0 liggen namelijk positieve nummers, en aan de andere kant negatieve nummers. Dit is dus waar de pijl is omgeklapt. Om dit punt te bepalen, stellen we de predatorvergelijking gelijk aan 0:\n\\[\\begin{align*}\n    ca{{\\color{#2d43fc}R}}{\\color{#ff7700}N} - \\delta {\\color{#ff7700}N} &= 0\\\\\n    {\\color{#ff7700}N} \\big( ca{{\\color{#2d43fc}R}} - \\delta \\big) &= 0 \\\\\n    {\\color{#ff7700}N} &= 0 \\qquad \\text{Oplossing 1} \\\\\n    {{\\color{#2d43fc}R}} &= \\frac{\\delta}{ca} \\quad \\text{Oplossing 2}\n\\end{align*}\\]\nDeze twee oplossingen, geven aan waar \\(\n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n\\) gelijk is aan 0, en kunnen we als lijnen tekenen in ons diagram. \\(N=0\\) is een horizontale lijn op de x-as, en \\(R=\\frac{\\delta}{ca}\\) een verticale lijn bij een bepaalde (positieve) waarde van \\(R\\). Waar de verticale lijn precies ligt, ligt dus aan de parameters van het model. Maar één ding weten we zeker: dit is waar het oranje pijltje omklapt. De lijn moet dus tussen onze eerder getekende pijlen liggen:\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n}\n\nN &lt;- 1:100\nR &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\nplot(R,N,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"R\", side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\nmtext(\"N\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nvectorfield(5,12,10,-10)\nvectorfield(95,6,-10,10)\nabline(h=0, lwd=2, col=\"#f2790f\")\nabline(v=40, lwd=2, col=\"#f2790f\")\n\n\n\n\n\n\n\n\n\nDe lijnen die we hierboven geschetst hebben heten nullisoclines, of kortgezegd: nullclines. Een nullcline is een lijn in de faseruimte waar de verandering van één van de variabelen (in dit geval de groei van de predator populatie) nul is. We kunnen ook de nullclines voor de prooi bepalen:\n\\[\\begin{align*}\n    b\\left(1-\\frac{{\\color{#2d43fc}R}}{K}\\right){\\color{#2d43fc}R} - d{\\color{#2d43fc}R} - a{\\color{#2d43fc}R}\\color{#ff7700}N &= 0 \\\\\n    {\\color{#2d43fc}R} \\left( b\\left(1-\\frac{{\\color{#2d43fc}R}}{K}\\right) - d - a{\\color{#ff7700}N} \\right) &= 0\\\\\n    {\\color{#2d43fc}R} &= 0 \\quad \\text{(oplossing 1)} \\\\\n    b\\left(1-\\frac{{\\color{#2d43fc}R}}{K}\\right) - d - a\\color{#ff7700}N &= 0 \\\\\n    a\\color{#ff7700}N &= b\\left(1-\\frac{{\\color{#2d43fc}R}}{K}\\right) - d  \\\\\n    \\color{#ff7700}N &= \\frac{b\\left(1-\\frac{{\\color{#2d43fc}R}}{K}\\right) - d}{a} \\\\\n    \\color{#ff7700}N &= \\frac{b-d}{a} - \\frac{b}{aK}{\\color{#2d43fc}R} \\quad \\text{(oplossing 2)}\n\n\\end{align*}\\]\nDe eerste nullcline ligt dus bij R=0 (en is dus verticaal). De tweede nullcline ziet er wat ingewikkelder uit, want hier is \\(N\\) een functie van \\(R\\) (met andere woorden \\(N=f(R)\\)). Dit is conceptueel niet heel anders dan “y als een functie van x”, zoals je misschien gewend bent. Je ziet dat \\(N\\) lineair afneemt met \\(R\\), dus deze nullcline zal een schuine lijn naar beneden vormen in ons assenstelsel. Met alle nullclines bij elkaar, zien we dus:\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n}\n\nN &lt;- 1:100\nR &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\nplot(R,N,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"R\", side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\nmtext(\"N\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nvectorfield(5,12,10,-10)\nvectorfield(95,6,-10,10)\n\nabline(h=0, lwd=2, col=\"#f2790f\")\nabline(v=40, lwd=2, col=\"#f2790f\")\nabline(v=0, lwd=2, col=\"#2d43fc\",)\nabline(a=80,b=-1, lwd=2,col=\"#2d43fc\")\n\n\n\n\n\n\n\n\n\nDe pijltjes in ons diagram geven het zogenoemde “vectorveld” aan. We weten dat op de nullclines één van de populaties niet groeit, omdat de corresponderende differentiaalvergelijking hier gelijk is aan 0. Vergelijkbaar is de groeisnelheid van deze populatie steeds lager naarmate je dichter bij de nullcline kijkt. Als je de nullcline passeert, passeer je de 0 en zal het pijltje (de richting van groei) andersom staan. Met deze informatie kunnen we het puzzeltje oplossen, en de andere gebieden van het vectorveld ook invullen:\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n}\n\nN &lt;- 1:100\nR &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\n\nplot(R,N,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"R\", side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\nmtext(\"N\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nvectorfield(5,12,10,-10)\nvectorfield(95,6,-10,10)\nvectorfield(50,6,10,10)\nvectorfield(15,95,-10,-10)\n\nabline(h=0, lwd=2, col=\"#f2790f\")\n\nabline(v=40, lwd=2, col=\"#f2790f\")\n\nabline(v=0, lwd=2, col=\"#2d43fc\",)\n\nabline(a=80,b=-1, lwd=2,col=\"#2d43fc\")\n\n\n\n\n\n\n\n\n\nLaten we even stil staan bij wat het diagram dat we net hebben geconstrueerd eigenlijk betekent. In het diagram worden alle mogelijke toestanden3 weergegeven voor onze prooi- en predatordichtheden (toestanden wordt ook wel fasen genoemd, vandaar het woord faseruimte). Met dit diagram kunnen we aflezen hoe de populaties zullen veranderen over de tijd. In het vorige hoofdstuk hebben we besproken dat het vinden van algemene oplossingen (de functie die precies omschrijft hoe populaties veranderen) vaak te moeilijk is. Voor het bovenstaande predator-prooi model is dat zelfs onmogelijk. Gelukkig kunnen we met behulp van faseruimtes (zelfs met pen en papier!) specifieke oplossingen aflezen. Dat wil zeggen: gegeven een bepaalde begintoestand, waar zal het systeem zich heen bewegen? In Figuur 14.3 zie je dat we op die manier een “traject” (trajectory) door de ruimte kunnen tekenen, wat direct vertaalt in een specifieke oplossing. Zo kunnen we toch voorspellen wat het systeem gaat doen!\n\n\n\n\n\n\nFiguur 14.3: Vanuit een faseruimte kunnen we aflezen hoe de populaties zich door de tijd zullen veranderen, en zo specifieke oplossingen schetsen!",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#stabiele-en-instabiele-evenwichten-in-2d-systemen",
    "href": "Modellen/predatorprooi.html#stabiele-en-instabiele-evenwichten-in-2d-systemen",
    "title": "14  Predator-prooi interacties",
    "section": "14.6 Stabiele en instabiele evenwichten in 2D systemen",
    "text": "14.6 Stabiele en instabiele evenwichten in 2D systemen\nZoals je ziet spiraliseert het systeem in Figuur 14.3 richting het kruispunt tussen de twee nullclines. Dit is ook wel logisch, want de nullclines geven aan waar de individuele populaties niet meer veranderen, dus een snijpunt van twee nullclines van verschillende populaties geeft aan waar beide populaties niet meer veranderen. Maar zoals we voor 1D systemen geleerd hebben: niet elke evenwichtsituatie is stabiel. Met andere woorden, niet elk snijpunt van twee verschillende nullclines is ook een attractor van het systeem. Hoe kunnen we aflezen of een evenwicht stabiel of instabiel is? Om dit te bepalen, moeten we voor elk evenwicht analyseren wat er rond het evenwicht gebeurt. Laten we beginnen met alle evenwichten annoteren met een nummer:\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n}\n\nN &lt;- 1:100\nR &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\nplot(R,N,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"R\", side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\nmtext(\"N\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nvectorfield(5,22,10,-10)\nvectorfield(95,16,-10,10)\nvectorfield(50,6,10,10)\nvectorfield(15,95,-10,-10)\n\nabline(h=0, lwd=2, col=\"#f2790f\")\nabline(v=40, lwd=2, col=\"#f2790f\")\nabline(v=0, lwd=2, col=\"#2d43fc\",)\nabline(a=80,b=-1, lwd=2,col=\"#2d43fc\")\npoints(40,40,cex=1.3,pch=19)\ntext(55,45,\"Evenwicht 3\", cex=0.7)\npoints(0,0,cex=1.3)\ntext(15,5,\"Evenwicht 1\", cex=0.7)\npoints(80,0,cex=1.3)\ntext(90,8,\"Evenwicht 2\", cex=0.7)\n\n\n\n\n\n\n\n\nFiguur 14.4: Complete fase-ruimte van het predator-prooi systeem, waarbij open cirkels instabiele evenwichten weergeven, en het stabiele evenwicht is weergegeven met een gesloten (ingevulde) cirkel\n\n\n\n\n\nLaten we beginnen bij evenwicht 1, waar beide populaties 0 zijn. Een dergelijk evenwicht noemen we triviaal, omdat geen van de relevante variabelen (predator/prooi) aanwezig is. In dit punt is er dus ook geen verandering in de prooi- en predatorpopulatie. Maar wat als we, vanaf dit punt (\\(0,0\\)), een beetje predator toevoegen? Kan de predator dan groeien? In dit geval kijken we vlak boven het evenwicht, want dat is het punt waar er “een beetje predator” aanwezig is. We zien dat in dit gebied de oranje pijl naar beneden wijst, dus kan de predatorpopulatie alleen maar weer afnemen. Biologisch betekent dit het volgende: predatoren kunnen niet groeien als er geen prooien zijn (dit is het equivalent van vossen vrijlaten op Australië voordat er konijnen waren!). We moeten natuurlijk ook controleren wat er gebeurt als we een beetje prooi toevoegen. Om dit te bestuderen, kijken we rechts van dit evenwicht. Hier is de groeisnelheid van de prooi positief, en kan de prooipopulatie dus gaan groeien (ook dit is logisch, want dit is precies wat er gebeurde met de vrijgelaten konijnen in Australië!). Een evenwicht is alleen stabiel als het systeem na elke verstoring terug gaat naar het evenwicht. Dus we moeten hierbij concluderen dat het evenwicht bij (\\(0,0\\)) instabiel is.\nVoor evenwicht 2 en 3 kunnen we dezelfde analyse toepassen. Prooi toevoegen aan evenwicht 2 resulteert in afname van de prooipopulatie, maar predator toevoegen resulteert in toename van de predator. Vergelijkbaar met evenwicht 1 is ook dit dus ook een instabiel evenwicht. Voor evenwicht 3 geldt wederom dat prooi toevoegen resulteert in afname. Echter zien we dat we bij het toevoegen van predatoren (vlak boven evenwicht 3) we precies op de nullcline zitten, en de groeisnelheid van de predator dus 0 blijft. Omdat evenwicht 3 robust is voor het toevoegen van prooi (de verstoring neemt af) en ook voor het toevoegen van predator (de verstoring vergoot in ieder geval niet), kunnen we concluderen dat dit evenwicht stabiel is. Daarom staat hij in figuur Figuur 14.4 aangegeven met een gesloten cirkel.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#verhoogde-death-rates-van-predatoren",
    "href": "Modellen/predatorprooi.html#verhoogde-death-rates-van-predatoren",
    "title": "14  Predator-prooi interacties",
    "section": "14.7 Verhoogde death rates van predatoren",
    "text": "14.7 Verhoogde death rates van predatoren\nNu we onze faseruimte hebben uitgewerkt, is het heel makkelijk om biologisch relevante vragen te stellen. We zouden ons bijvoorbeeld af kunnen vragen wat er gebeurt met een verhoogde sterfte van de predatoren. Om het effect hiervan te begrijpen, nemen we de eerder gevonden vergelijkingen voor de nullclines er weer even bij:\n\\[\\begin{align*}\n    {{\\color{#2d43fc}R}}_{1} \\rightarrow {{\\color{#2d43fc}R}} &= 0 \\\\\n    {\\color{#2d43fc}R}_{2} \\rightarrow {\\color{#ff7700}N} &= \\frac{b(1-\\frac{{\\color{#2d43fc}R}}{K}) - d}{a} \\\\\n    {\\color{#ff7700}N}_{1} \\rightarrow {\\color{#ff7700}N} &= 0 \\\\\n    {\\color{#ff7700}N}_{2} \\rightarrow \\frac{\\delta}{ca}\n\\end{align*}\\]\n\n\n\n\n\n\nEen nullcline gegeven door X = …, is niet altijd de nullcline voor X!\n\n\n\nBij nullclines heb je vaak te maken met twee variabelen, dus kun je ze op meerdere manieren opschrijven. Bijvoorbeeld, de vergelijkingen \\(y=x^2\\) en \\(x=\\sqrt y\\) bevatten dezelfde informatie en zien er hetzelfde uit in een grafiek.\nHet is vaak handig om nullclines op te schrijven als functie van de variabele op de x-as (in het predator-prooi systeem, schrijven we dus \\(N=f(R)\\)). Dit is omdat we gewend zijn om y als functie van x te schetsen, en niet andersom. Dit is een conventie en kan omgedraaid worden — de prooi hoeft natuurlijk niet op de x-as te staan!\n\n\nKijkende naar de vier nullclines hierboven, kunnen we zien dat slechts 1 ervan afhangt van de sterfte van predatoren (\\(\\delta\\)). Als deze verhoogd, wordt de fractie \\(\\frac{\\delta}{ca}\\) hoger, en verschuift dus de nullcline naar rechts. Let op! Dit kan ook veranderen hoe het vectorveld precies loopt, en waar eventuele snijpunten liggen! In Figuur 14.5 (a) zie je bijvoorbeeld hoe de faseruimte eruit ziet als predatoren een hoge death rate hebben. In dit geval zien we dat er geen stabiel evenwicht meer is voor zowel predator als prooi. In plaats daarvan is er alleen een evenwicht met prooi overgebleven, en hoewel dit evenwicht voorheen instabiel was, is deze nu (kijkend naar het vectorveld) stabiel geworden! Dus: als de death rate te hoog is kunnen predatoren (zoals je eigenlijk wel verwacht) niet overleven. Maar let op, niet elke parameter-verandering heeft intuïtieve effecten! Als we bijvoorbeeld dezelde analyse doen voor een verhoogde birth rate van de prooi (Figuur 14.5 (b)), zien we dat er in evenwicht precies evenveel prooien zullen zijn, en alleen maar meer predatoren.\nZoals ik in de introductie al heb benadrukt: onze intuïtie is niet altijd genoeg!\n\nCode\nN &lt;- 1:100\nR &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,3.3,1,1))\nplot(R,N,  col.axis=\"#FF7F50\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\nmtext(\"R\", font=2,side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\nmtext(\"N\", font=2,side=2, line=2, col=\"#FF7F50\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", font=2,side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", font=2,side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\nabline(h=0, lwd=3, col=\"#FF7F50\")\nabline(v=40, lwd=2, col=\"#FF7F50\", lty=8)\narrows(45, 70, 85, 70, length = 0.07, angle = 20, col=\"grey\",lwd=2)\ntext(65,80,\"Verschuiving \\npredator-nullcline\",cex=0.7)\nmtext(\"Effect hogere death rate predator\", font=2,side=3, line=1, col=\"black\", cex=1.0, at=50)\nabline(v=90, lwd=3, col=\"#FF7F50\")\nabline(v=0, lwd=3, col=\"#2d43fc\")\nabline(a=80,b=-1, lwd=3,col=\"#2d43fc\")\npoints(0,0,cex=1.3)\npoints(80,0,cex=1.3,pch=19)\nadd_vector &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+dx, y, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n  arrows(x, y, x, y+dy, length = 0.07, angle = 20, col=\"#FF7F50\",lwd=2)\n}\n\nadd_vector(10,20,10,-10)\nadd_vector(85,30,-10,-10)\nadd_vector(102,20,-10,10)\n\nN &lt;- 1:100\nR &lt;- 1:100\n\nplot(R,N,  col.axis=\"#FF7F50\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"R\", font=2,side=1, line=2, col=\"#2d43fc\", cex=1.5, at=90)\nmtext(\"N\", font=2,side=2, line=2, col=\"#FF7F50\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", font=2,side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", font=2,side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nabline(h=0, lwd=3, col=\"#FF7F50\")\nabline(v=40, lwd=3, col=\"#FF7F50\")\n\narrows(20, 63, 20, 73, length = 0.07, angle = 20, col=\"grey\",lwd=2)\ntext(20,45,\"Verschuiving \\nprooi-nullcline\",cex=0.7)\n\narrows(15,50,19,65,length=0,lty=3,lwd=0.5)\nmtext(\"Effect hogere birth rate prooi\", font=2,side=3, line=1, col=\"black\", cex=1.0, at=50)\n\nabline(v=0, lwd=3, col=\"#2d43fc\",)\nabline(a=80,b=-1, lwd=2,lty=8,col=\"#2d43fc\")\nabline(a=100,b=-1.15, lwd=3,col=\"#2d43fc\")\n\npoints(0,0,cex=1.3)\npoints(40,54,cex=1.3,pch=19)\npoints(80,0,cex=1.3)\n\nadd_vector &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+dx, y, length = 0.07, angle = 20, col=\"#2d43fc\",lwd=2)\n  arrows(x, y, x, y+dy, length = 0.07, angle = 20, col=\"#FF7F50\",lwd=2)\n}\n\nadd_vector(10,30,10,-10)\nadd_vector(50,10,10,10)\nadd_vector(30,95,-10,-10)\nadd_vector(90,30,-10,10)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Effect van een verhoging van de death rate van de predators zorgt dat de predator niet meer kan overleven: een intuïtief resultaat!\n\n\n\n\n\n\n\n\n\n\n\n(b) Effect van een verhoging van de birth rate van de prooi levert alleen meer predatoren op: een tegenintuïtief resultaat!\n\n\n\n\n\n\n\nFiguur 14.5\n\n\n\nOp een vergelijkbare manier kunnen we het effect van andere parameterveranderingen bestuderen. Zodoende kunnen ecologen voorspellen of soorten dreigen uit te sterven, of epidemiologen voorspellen of een virus zal uitbreiden, etc.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#opgaven",
    "href": "Modellen/predatorprooi.html#opgaven",
    "title": "14  Predator-prooi interacties",
    "section": "14.8 Opgaven",
    "text": "14.8 Opgaven\n\nOefening 14.1 (Zieke zeehonden) \n\n\n\n\n\n\n\n(Afbeelding gegenereerd met ChatGPT-4o)\n\n\nLaten we aannemen dat zeehonden (\\(Z\\)) in de waddenzee groeien met dichtheidsafhankelijke geboorte (maximale geboorte \\(b\\), dichtheidseffect \\(k\\)) en constante sterfte (\\(d\\)). Een deel van deze zeehonden is geïnfecteerd met een ziekte waardoor ze na een korte tijd dood gaan. De geïnfecteerde zeehonden noemen we \\(I\\). Zodoende kunnen we het volgende systeem van ODEs opstellen:\n\\[\\begin{align*}\n\n\\mathchoice{\\frac{\\mathrm{d}Z}\n{\\mathrm{d}t}}{\\mathrm{d}Z/\\mathrm{d}t}\n{\\mathrm{d}Z/\\mathrm{d}t}\n{\\mathrm{d}Z/\\mathrm{d}t}\n&= bZ(1-Z/k)-dZ-\\beta ZI \\text{,} \\quad \\text{en} \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}I}\n{\\mathrm{d}t}}{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n&= \\beta ZI - \\delta I \\quad \\text{met } \\delta \\gg d\n\\end{align*}\\]\n\nWaar staan de parameters \\(\\beta\\) en \\(\\delta\\) voor? Hoe zou je de \\(\\beta ZI\\) term noemen?\nNaast de ODE voor \\(I\\) staat een extra aanname, namelijk \\(\\delta \\gg d\\). Gegeven de modelomschrijving hierboven, vind je dit een redelijke aanname?\nWe gaan eerst het model bekijken zonder infectie. Als er geen infectie aanwezig is (\\(I=0\\)), versimpelt de vergelijking in een 1D populatiegroei model. Wat is in dit geval het evenwicht van de gezonde zeehondenpopulatie?\nPCB’s (polychloorbifenylen) zijn schadelijke stoffen die de geboortesnelheid van zeehonden kunnen beinvloeden. Stel dat er nog steeds geen infectie aanwezig is, en dat de PCB’s de geboortesnelheid (\\(b\\)) halveren. Wordt de populatie gezonde zeehonden kleiner?\nWe gaan bestuderen wat er gebeurt als er een ziekte wordt geïntroduceerd in deze populatie. Om het 2D systeem te analyseren, maken we een faseruimte. Zet de gezonde zeehonden op de x-as, en de zieke zeehonden op de y-as. Schets twee kwalitatief verschillende faseruimtes: één waar de ziekte verspreidt en de zeehonden chronisch geinfecteerd blijven, en één waar de ziekte uitsterft.\nBestudeer de stabiliteit van alle evenwichten (snijpunten tussen verschillende nullclines) in de faseruimtes uit e. Als je dit nog niet gedaan hebt, moet je hiervoor ook het vectoveld bepalen (de richtingen van de pijltjes).\nWelke parameters bepalen in welk scenario van de vorige vraag we ons bevinden?\nGa er opnieuw vanuit dat PCB’s de geboorte van gezonde zeehonden (\\(b\\)) halveren, en schets de nieuwe nullcline samen met de oude nullcline in 1 faseruimte.\nHoeveel kleiner wordt de gezonde zeehondenpopulatie in evenwicht?\n\n\n\nOefening 14.2 (Lotka Volterra (in space!))  \n\n\n\n\n\n\nFiguur 14.6: Regels van een simpel “Lotka Volterra” model in de ruimte\n\n\n\nIn Hoofdstuk 10 hebben we een miniatuur Australië bestudeerd waarin konijnen zich konden verspreiden. Hierbij zagen we enkele verschillen tussen het wiskundige model (de differentievergelijking / ODEs) en het ruimtelijke model. We gaan nu bestuderen of Lotka-Volterra in een vergelijkbaar ruimtelijk model ook belangrijke verschillen heeft.\nWederom delen we de ruimte op in verschillende types hokjes: lege hokjes (zwart), prooidierhokjes (geel), en predatorhokjes (rood). (zie Figuur 14.6). Prooidieren kunnen een leeg, nabijgelegen hokje in een prooidierhokje veranderen (dit stelt geboorte voor). Als er geen leeg hokje beschikbaar is, kan de prooi niet reproduceren. De predator kan alleen reproduceren als er een nabijgelegen prooihokje is, en verandert deze dan in een predatorhokje. Beide types individuen sterven met 4% kans, waarna het hokje weer leeg wordt.\nNet als bij de konijnen in Australië, hoeven we geen extra dichtheidseffect in te bouwen omdat deze automatisch bestaat: het aantal hokjes is eindig.\n\n\n\n\nIn dit “toy-model” wordt predatie versimpeld tot 1 prooihokje in 1 predatorhokje veranderen.\n\nWat zegt dit over de parameter \\(c\\) zoals je die in dit hoofdstuk hebt leren kennen?\n\nBekijk de simulatie en de grafieken.\n\nCorrespondeert dit resultaat met de inwaardse spiraal die we in de faseruimte van dit hoofdstuk gezien hebben?\nBij hoeveel prooi/predator stabiliseert het systeem ongeveer? Kun je voorbeelden bedenken van predator-prooi systemen die een dergelijke verhouding hebben?\n\nGebruik de knoppen onderaan de simulatie om de populatie te mengen, en wacht tot deze nieuwe situatie in evenwicht is. Start de simulatie ook een keer opnieuw onder gemengde onstandigheden.\n\nBij welke populatiegroottes stabilseert het systeem nu?\nEen van de populaties lijkt veel meer gebaat bij een gemengd systeem dan de ander. Waarom is dat denk je?\n\nGa terug naar de ongemengde simulatie. Wacht tot de populatie is gestabiliseerd, en gebruik daarna de knoppen om de death rate van de predator te halveren.\n\nOmschrijf wat er gebeurt (halveer zo nodig de death rate van de predatoren nog eens).\nWat gebeurt er als de death rate van de predator heel laag is (bijvoorbeeld 0.001)? Denk je dat dit ook in de ODEs zou gebeuren?\n\n\n\nOefening 14.3 (Virus-uitbraak) \nAls een nieuw virus ontstaat, kan deze zich vroeg in de epidemie vaak enorm hard uitbreiden: veel individuen zijn nog niet resistent. Over de tijd zullen individuen echter resistent worden. Zodoende hebben we te maken met drie type individuen: vatbare individuen (susceptibles, \\(S\\)), geinfecteerde individuen (infected, \\(I\\)), en resistente individuen (recovered, \\(R\\)). De totale populatiegrootte (\\(S\\)+\\(I\\)+\\(R\\)), kunnen we \\(N\\) noemen. Nu kunnen we een systeem van drie ODEs opstellen:\n\\[\\begin{align}\nN &= S+I+R\\\\\n\n\\mathchoice{\\frac{\\mathrm{d}S}\n{\\mathrm{d}t}}{\\mathrm{d}S/\\mathrm{d}t}\n{\\mathrm{d}S/\\mathrm{d}t}\n{\\mathrm{d}S/\\mathrm{d}t}\n&= b(1-\\frac{N}{K})S - dS - \\beta S I \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}I}\n{\\mathrm{d}t}}{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n&= \\beta SI - (d+\\delta)I - rI \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}R}\n{\\mathrm{d}t}}{\\mathrm{d}R/\\mathrm{d}t}\n{\\mathrm{d}R/\\mathrm{d}t}\n{\\mathrm{d}R/\\mathrm{d}t}\n&= rI - dR\n\\end{align}\\]\nBekijk de vergelijkingen hierboven.\n\nWelke van de drie individuen (susceptible, infected, recovered) kan zich individueel voortplanten?\nIn welke eenheden wordt de \\(\\delta\\) parameter uitgedrukt? Wat is de biologische interpretatie van deze parameter?\n\nAangenomen dat de parameters positief zijn (en dat de infectie zich kan verspreiden), kunnen we een oplossing met de computer doorrekenen. Omdat dit 3 ODEs zijn, geeft dit ook 3 grafiekjes (zie Figuur hieronder).\n\nWaarom is de eerste piek van de rode lijn het hoogst?\n\n\n\nCode\npar(mar=c(4,4,0,2))\n\nmodel &lt;- function(t, state, parms){\n  with(as.list(c(state,parms)),{\n    N &lt;- S+I+R\n    dS &lt;- b*(1-N/K)*S - d*S - beta*S*I\n    dI &lt;- beta*S*I - (d+delta)*I - r*I\n    dR &lt;- r*I - d*R\n    return(list(c(dS,dI,dR)))\n  })\n}\n\ncolors[1] = \"#4E1681\"\ncolors[2] = \"#F05D5D\"\ncolors[3] = \"#e2d5cb\"\n\np &lt;- c(b=0.7,beta=0.3,r=0.1,d=0.1,delta=0.1,K=4)\ns &lt;- c(S=3.5,I=0.001,R=0.0)\n\nplot &lt;- run(tmax=100,ylab=\"Dichtheden\",xlab=\"Tijd\")\n\n\n\n\n\n\n\n\n\nTijdens de Covid-19 pandemie hebben we gezien dat twee maatregelen zeer effectief waren: 1.) social distancing (mensen waarmee je contact hebt proberen niet te besmetten) en 2) contactbeperkingen (het aantal mensen waarmee je contact hebt reduceren). Hieronder zie je een interactieve simulatie van bovenstaande interacties in een ruimtelijk model. Met de ‘mengen’ optie worden na elke tijdstap alle individuen volledig gehusseld.\n\nControleer of onder gemengde omstandigheden dit model zich zoals het ODE model gedraagt.\nIs het effect in deze simulatie (zonder mengen) meer vergelijkbaar met social distancing of met contactbeperkingen?\n\n\n\n\n\n\nMaak de \\(\\beta\\)-parameters van het virus hoger (bijvoorbeeld 0.1, maar je kan ook andere waarden proberen). Beschrijf in je eigen woorden wat er gebeurt voor zowel gemengde als ongemende omstandigheden.\n\n\n\nOefening 14.4 (Een 3D systeem)  Bekijk het volgende 3D ODE systeem van een voedselketen (B eet A, C eet B):\n\\[\\begin{align*}\n\n\\mathchoice{\\frac{\\mathrm{d}A}\n{\\mathrm{d}t}}{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n&= rA(1-A/k)-cAB \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n&= cAB - dB - eBC \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}C}\n{\\mathrm{d}t}}{\\mathrm{d}C/\\mathrm{d}t}\n{\\mathrm{d}C/\\mathrm{d}t}\n{\\mathrm{d}C/\\mathrm{d}t}\n&= eBC - fC\n\\end{align*}\\]\n\nWat betekent het dat de term \\(cAB\\) in precies dezelfde vorm terugkomt in \\(\n\\mathchoice{\\frac{\\mathrm{d}A}\n{\\mathrm{d}t}}{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n\\) en \\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n\\)?\nGa ervan uit dat alle drie de populaties in evenwicht aanwezig zijn. Bepaal voor deze situatie de hoeveelheid \\(B\\) in evenwicht (hint: denk eerst even goed na, dit is namelijk heel makkelijk!)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#terminologie",
    "href": "Modellen/predatorprooi.html#terminologie",
    "title": "14  Predator-prooi interacties",
    "section": "14.9 Terminologie",
    "text": "14.9 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nSysteem van differentiaalvergelijkingen\nSystem of differential equations\nWanneer we met meerdere differentiaalvergelijkingen werken, waarbij de variabelen elkaar beïnvloeden, spreken we van een systeem van differentiaalvergelijkingen.\n\n\nFaseruimte\nPhase space\nDe ruimte van alle mogelijke toestanden van een systeem. Voor 2 vergelijkingen, is deze ruimte weer te geven in een 2D grafiek, met op elke as één van de variabelen.\n\n\nNullcline\nNullcline\nEen lijn in de faseruimte waarop één van de variabelen niet verandert (de snelheid van verandering voor deze variabele is 0)\n\n\nVectorveld\nVector field\nDe richting van verandering in elk punt in de faseruimte wordt het vectorveld genoemd. Meestal versimpelen we deze tot 2 pijltjes per sector in de faseruimte om de leesbaarheid te vergroten.\n\n\nParameterverandering\nParameter change\nWe spreken van een parameterverandering als één van de parameters van het systeem verandert. Deze veranderingen hebben een biologische betekenis: meer sterfte voor predatoren, een verhoogde birth rate voor de prooi, een sneller replicerend virus, etc.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/predatorprooi.html#footnotes",
    "href": "Modellen/predatorprooi.html#footnotes",
    "title": "14  Predator-prooi interacties",
    "section": "",
    "text": "3D slaat hier dus niet op ruimtelijke dimensies, maar op de hoeveelheid variabelen van het ODE systeem↩︎\nAls maximale geboorte niet groter is dan minimale sterfte, kan een populatie namelijk nooit groeien…↩︎\nDat wil zeggen: alle mogelijke combinaties van hoeveelheden predator en prooi↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Predator-prooi interacties</span>"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html",
    "href": "Modellen/odes_grind.html",
    "title": "ODEs modelleren in R",
    "section": "",
    "text": "Leerdoelen\nMisschien is het je opgevallen dat dit hoofdstuk geen nummer heeft. Dit hoofdstuk is inhoudelijk namelijk wat korter, en is vooral bedoeld om kennis te maken met het R-script grind.R. De overige leerdoelen zijn:",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#leerdoelen",
    "href": "Modellen/odes_grind.html#leerdoelen",
    "title": "ODEs modelleren in R",
    "section": "",
    "text": "Begrijpen hoe een simpel model (zoals het Lotka-Volterra model) kan worden uitgebreid door extra details toe te voegen (bijvoorbeeld een predator die verzadigd raakt).\nEen Hill-functie herkennen, en de kenmerken kunnen benoemen (initiële helling, half-waarde, maximum).\nR kunnen gebruiken om faseruimtes met nullclines en trajectories te tekenen, en de daarbij horende oplossingen.",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#de-verzadigde-predator",
    "href": "Modellen/odes_grind.html#de-verzadigde-predator",
    "title": "ODEs modelleren in R",
    "section": "De verzadigde predator",
    "text": "De verzadigde predator\nIn ons eerdere Lotka-Volterra model namen we aan dat predatie lineair proportioneel is aan de dichtheden van de predator en prooi. Dit deden we door gebruik te maken van een simpele predatieterm: \\(aRN\\). Mede dankzij deze eenvoud waren de nullclines zo eenvoudig: een stel rechte lijnen waarvan het makkelijk te bepalen is waar/of ze snijden. Echter heeft deze eenvoud ook zijn beperkingen. Dit lineaire verband betekent dat per predator (ookwel: per capita) in totaal \\(aR\\) prooi gegeten kan worden (nogmaals, “per” kun je lezen als “gedeeld door”, dus \\(\\frac{aRN}{N} = aR\\)). Bij oneindig hoge prooidichtheden, kan elke predator dus oneindig veel prooi eten. In het echt zal een predator eigenlijk een tijd bezig zijn met het verwerken en verteren van de prooi. Zodoende zal de predatie-term bij hele hoge prooi-dichtheden eigenlijk moeten verzadigen. Om dit te bestuderen met ons model, zouden we de predatie-term aan kunnen passen:\n\\[\\begin{align*}\n\\frac{\\mathrm{d}\\color{#2a53f7}R}{\\mathrm{d}t} &= \\underbrace{b(1-\\frac{\\color{#2a53f7}R}{K})\\color{#2a53f7}R}_{\\text{geboorte prooi}} - \\underbrace{d\\color{#2a53f7}R}_{\\text{sterfte prooi}} - \\underbrace{\\frac{\\color{black}a\\color{#2a53f7}R\\color{orange}N}{h+\\color{#2a53f7}R}}_{\\text{nieuwe predatieterm}}\\\\\n\\frac{\\mathrm{d}\\color{orange}N}{\\mathrm{d}t} &= \\underbrace{\\frac{ca\\color{#2a53f7}R\\color{orange}N}{h+\\color{#2a53f7}R\\color{black}}}_{\\text{geboorte predator}} - \\underbrace{\\delta \\color{orange}N}_{\\text{sterfte predator}}\n\\end{align*}\\]\nWat is met deze nieuwe predator-term de per capita predatie? Dat wil zeggen: hoeveel prooi kan een enkele predator per tijdseenheid opeten? Hiervoor delen we wederom de predatie-term door \\(N\\), waardoor we functie \\(\\frac{aR}{h+R}\\) krijgen. Deze functie wordt de functionele respons van de predator genoemd. Om een beeld van deze functie te krijgen, is het handig om deze even te schetsen.",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#vorm-van-de-nieuwe-predatieterm",
    "href": "Modellen/odes_grind.html#vorm-van-de-nieuwe-predatieterm",
    "title": "ODEs modelleren in R",
    "section": "Vorm van de nieuwe predatieterm",
    "text": "Vorm van de nieuwe predatieterm\nLaten we eerst even naar de noemer te kijken, en vooral naar de balans tussen \\(h\\) en \\(R\\). Als \\(R\\) heel klein is, heeft \\(h\\) de overhand in de noemer, waardoor \\(R\\) verwaarloosbaar is. Dus voor kleine \\(R\\) nadert de functie \\(\\frac{aR}{h}\\), wat een lineaire toename is. Dus voor kleine prooi-dichtheden, neemt predatie lineair toe met de prooi-dichtheid, net zoals in het eerdere model. Maar als \\(R\\) alsmaar groter wordt, wordt \\(h\\) juist verwaarloosbaar ten opzichte van \\(R\\). Daarom nadert deze functie bij hoge \\(R\\) de waarde \\(\\frac{aR}{R} = a\\). Dus: zelfs bij hele hoge prooidichtheiden kan een enkele predator per tijdseenheid (bijv. per dag) hoogstens \\(a\\) prooi eten. Tussen deze twee extreme waarden zit nog een laatste bijzondere punt: het punt waar \\(R\\) precies gelijk is aan \\(h\\). Op dit punt is de functie gelijk aan \\(\\frac{aR}{R+R}=\\frac{aR}{2R}=\\frac{a}{2}\\). De parameter \\(h\\) geeft dus de prooi-dichtheid waar de predatieterm half-maximaal is. Nu kunnen we de functie schetsen, zoals weergegeven in Figuur 1 (a).",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#hill-functies",
    "href": "Modellen/odes_grind.html#hill-functies",
    "title": "ODEs modelleren in R",
    "section": "Hill-functies",
    "text": "Hill-functies\nFuncties van deze vorm worden “Hill-functies” genoemd (vernoemd naar Archibald Hill, niet naar het feit dat het een soort heuveltje is). Met een kleine aanpassing aan deze Hill-functie (\\(\\frac{aR^2}{h^2+R^2}\\)), kun je deze respons ook sigmoïde (S-vormig) laten verlopen (Figuur 1 (b)).\n\nCode\na=1\nh=1\npar(mar=c(4,3,3,3))\nfunc &lt;- function(x){\n  return(a*x/(x+h))\n}\n\ncurve(func,0,8,lwd=2,ylim=c(0,1.), xaxt=\"n\", yaxt=\"n\",\n      ylab=\"Predatie\",xlab=\"Hoeveelheid prooi (R)\",col=\"seagreen\",\n      main=\"Hill-functie (Type 2)\")\n\naxis(1, labels = FALSE, at=c(h)) # x-axis\naxis(2, labels = FALSE, at=c(0.5,1.0)) # x-axis\nabline(h=a,lty=2,col=\"grey\")\nabline(v=h,lty=2,col=\"grey\")\nmtext(\"h\",side=1,at=h,line=0.7)\nmtext(\"0\",side=1,line=0.5,at=0)\nmtext(\"0\",side=2,line=0.5,at=0)\ntext(-2.0,1,\"a\",xpd=NA)\ntext(-2.0,0.5,\"a/2\",xpd=NA)\n\nfunc &lt;- function(x){\n  return(a*x^2/(x^2+h^2))\n}\n\ncurve(func,0,3,lwd=2,ylim=c(0,1.), xaxt=\"n\", yaxt=\"n\",\n      ylab=\"Predatie\",xlab=\"Hoeveelheid prooi (R)\",col=\"seagreen\",\n      main=\"Hill-functie (Type 3)\")\n\naxis(1, labels = FALSE, at=c(h)) # x-axis\naxis(2, labels = FALSE, at=c(0.5,1.0)) # x-axis\nabline(h=a,lty=2,col=\"grey\")\nabline(v=h,lty=2,col=\"grey\")\nmtext(\"h\",side=1,at=h,line=0.7)\nmtext(\"0\",side=1,line=0.5,at=0)\nmtext(\"0\",side=2,line=0.5,at=0)\ntext(-0.6,1,\"a\",xpd=NA)\ntext(-0.6,0.5,\"a/2\",xpd=NA)\n\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\nFiguur 1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNu we kennis hebben gemaakt met Hill-functies (zie ook Tip 1), gaan we terug naar het Lotka-Volterra model. Omdat het Lotka-Volterra model is uitgebreid met deze verzadigingsterm, moeten we opnieuw de nullclines uitrekenen en schetsen (ook die zijn veranderd!). Maar zoals je je wellicht kan voorstellen worden de nullclines iets ingewikkelder door deze non-lineaire term in onze vergelijkingen. Naar mate we onze modellen meer en meer uitbreiden, wordt het natuurlijk steeds lastiger om alles met de hand te doen. Daarom gaan we in dit hoofdstuk de faseruimte en het vectorveld laten tekenen door grind.R, een Rscript dat deze analyses een fluitje van een cent maakt!\n\n\n\n\n\n\nTip 1: Veel gebruikte Hill-functies\n\n\n\n\n\n\n\n\n\n\n\n\n\nNaam\nVergelijking\nGrafiek\n\n\n\n\nType II\n\\[\\frac{x}{x+h}\\]\n\n\n\nType III\n\\[\\frac{x^2}{x^2+h^2}\\]\n\n\n\nType II (afnemend)\n\\[1-\\frac{x}{x+h} = \\frac{1}{x/h+1}\\]\n\n\n\nType III (afnemend)\n\\[1-\\frac{x^2}{x^2+h^2} = \\frac{1}{\\frac{x^2}{h^2}+1}\\]",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#grind-tutorial",
    "href": "Modellen/odes_grind.html#grind-tutorial",
    "title": "ODEs modelleren in R",
    "section": "Grind tutorial",
    "text": "Grind tutorial\nGrind (GReat INtegrator Differential equations) is een Rscript geschreven door Rob de Boer (https://tbb.bio.uu.nl/rdb), wat het heel makkelijk maakt om faseruimtes, vectorvelden, en oplossingen te berekenen en plotten. Ook kun je Grind gebruiken om modellen te fitten aan experimentele data, zodat je op basis van metingen in het veld parameters als \\(b\\), \\(d\\), \\(K\\), en \\(h\\) zou kunnen schatten. Dat laatste is heel relevant wanneer modellen gebruikt worden voor (bijvoorbeeld) belangrijke beleidsbeslissingen, maar in deze cursus gaan we het vooral gebruiken om gemakkelijk faseruimtes met nullclines te schetsen, en oplossingen te bestuderen. De volledige handleiding en introductie tot Grind vind je hier.\nVoordat je Grind kan gebruiken, moet je eenmalig een paar “packages” in R installeren:\n\n# Installeer de packages (hoeft maar 1 keer!)\ninstall.packages(\"FME\", \"deSolve\",\"coda\",\"rootSolve\") \n\nNadat deze packages zijn geinstalleerd, moeten we het grind.R script inladen. Dit kan je vanaf de website doen:\n\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\nOf vanaf je eigen computer als je het script hebt gedownload:\n\nsource(\"C:/Student/Modellen/grind.R\")\n\nAls het laden van het script goed is gegaan, krijg je een melding:\n\n\ngrind.R (25-06-2024) was sourced\n\n\nNu kunnen we grind.R gebruiken. De differentiaalvergelijkingen staan in een functie genaamd ‘model’1:\n\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dR &lt;- b*R*(1 - R/K) -d*R - a*R*N/(R+h)\n    dN &lt;- c*a*R*N/(R+h) - delta*N\n    return(list(c(dR, dN)))  \n  }) \n}  \n\nEn vervolgens geef je de parameters en begin-waarden (initial condition) voor de variabelen aan:\n\np &lt;- c(b=1,d=0.01,K=1,a=1,c=1,delta=0.3,c=1,h=1)  #parameters\ns &lt;- c(R=1.1,N=0.25) #begin-dichtheden van R en N  \ncolors[1] = \"blue\"\ncolors[2] = \"#FF7F50\"\n\nHierboven geef ik ook even de nieuwe kleuren aan voor de ‘eerste’ en ‘tweede’ vergelijking, zodat dit overeenkomt met de kleuren die we tot nu toe hebben gebruikt. Dit is niet noodzakelijk, maar zo raken we niet in de war.\nNu kun je met met de functie run eenvoudig een oplossing uitrekenen:\n\nrun()\n\n\n\n\n\n\n\n\n        R         N \n0.4285768 0.8163156 \n\n\nZoals je ziet genereert Grind een grafiek (een oplossing), en vertelt het ook meteen wat de eind-waarden zijn van je variabelen.\nWe kunnen ook argumenten aan run meegeven, bijvoorbeeld om wat langer door te rekenen (tmax, deze optie is standaard 100) en een optie om y-as logaritmisch te schalen:\n\nrun(tmax=200,log = \"y\") \n\n\n\n\n\n\n\n\n        R         N \n0.4285714 0.8163265 \n\n\nZoals je ziet zijn de waarden na tijdstip 100 niet meer veel veranderd. Het systeem was dus eigenlijk al (bijna) in evenwicht.\nWe kunnen ook een faseruimte maken met de functie plane:\n\nplane() \n\n\n\n\n\n\n\n\nOok deze functie kunnen we weer argumenten meegeven, bijvoorbeeld om de assen iets verder te vergroten en een vectorveld te tekenen:\n\nplane(xmax=1.5, ymax=1.5,vector = T) \n\n\n\n\n\n\n\n\nAls laatste willen we (net als in het vorige hoofdstuk) weten of de evenwichten stabiel of instabiel zijn. Hiervoor geven we Grind een geschatte waarde dichtbij een evenwicht mee, en gebruiken we de functie newton:\n\nplane(xmax=1.5, ymax=1.5,vector = T)\nnewton(state=c(R=0.0,N=0.0),plot=T)\nnewton(state=c(R=1.0,N=0.0),plot=T)\nnewton(state=c(R=0.4,N=0.8),plot=T)\nrun(traject = T,tstep=0.1)\n\n\n\n\n\n\n\n\nDe laatste regel gebruikt run met de optie traject=T om een trajectorie door de faseruimte te tekenen. Dit vertaalt het grafiekje door de tijd die we eerder hebben uitgerekend, naar een mooie inwaardse spiraal. Er zijn nog veel meer opties in grind.R. Als je wil zien welke argumenten een functie allemaal kent, kun je gebruik maken van args:\n\nargs(plane)\n\nfunction (xmin = -0.001, xmax = 1.05, ymin = -0.001, ymax = 1.05, \n    xlab = \"\", ylab = \"\", log = \"\", npixels = 500, state = s, \n    parms = p, odes = model, x = 1, y = 2, time = 0, grid = 5, \n    eps = NULL, show = NULL, addone = FALSE, portrait = FALSE, \n    vector = FALSE, add = FALSE, legend = TRUE, zero = TRUE, \n    lwd = 2, col = \"black\", pch = 20, ...) \nNULL\n\n\nZo zie je bijvoorbeeld dat je de legenda zou kunnen verbergen met de legend optie, of de lijndikte (lwd) zou kunnen aanpassen. Met andere woorden: met R kunnen we zonder al te veel rekenwerk prachtige figuren genereren en wiskundige modellen doorrekenen!",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#lotka-volterra-in-grind",
    "href": "Modellen/odes_grind.html#lotka-volterra-in-grind",
    "title": "ODEs modelleren in R",
    "section": "Lotka-Volterra in Grind",
    "text": "Lotka-Volterra in Grind\nAls je de bovenstaande tutorial hebt gevolgd (en de packages hebt geïnstalleerd), kun je nu het volgende script overnemen en aan de slag met het uitbreiding van het Lotka-Volterra model waar de predatieterm verzadigt:\n\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dR &lt;- b*R*(1 - R/K) - d*R - a*R*N/(R+h)\n    dN &lt;- c*a*R*N/(R+h) - delta*N\n    return(list(c(dR, dN)))  \n  }) \n}  \np &lt;- c(b=1,d=0.1,K=2,a=1,c=1,delta=0.3,c=1,h=1)  #parameters\ns &lt;- c(R=1.1,N=0.1) #begin-dichtheden van R en N  \n\ncolors[1] = \"blue\" #optioneel, default = 'red'\ncolors[2] = \"#FF7F50\" #optioneel, default = 'blue'\npar(mfrow=c(1,2)) # optioneel, maakt 2 plotjes naast elkaar\n\nplane(xmax=3,ymax=2)\nrun(tstep=0.5, legend=F)\n\n\n\n\n\n\n\n\n        R         N \n0.2995413 1.1041111 \n\n\nDoor te oefenen met dit R-script, naast de pen en papier opgaven, is het de bedoeling dat je een goed gevoel ontwikkelt voor ODEs: wiskundige modellen die veel in de biologische literatuur voorkomen. Hieronder volgt een korte vraag, om met zowel pen en papier als Grind te oefenen.\n\nOefening 1 (De nieuwe nullcline voor de prooi) \nHierboven hebben we nullclines gegenereerd van het vernieuwde Lotka-Volterra model (met een verzadigbare predator). Zoals je ziet is dit geen rechte lijn meer.\n\nBepaal met pen en papier aan welke functie de vernieuwde nullcline voor de prooi voldoet.\nWat is het effect van de \\(K\\) parameter op de ligging van deze nullcline?\nNeem het R-script hierboven over met het Lotka-Volterra model met verzadigbare predator. Verdubbel de waarde van \\(K\\). Wat valt je op?",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#bifurcaties-van-evenwichten",
    "href": "Modellen/odes_grind.html#bifurcaties-van-evenwichten",
    "title": "ODEs modelleren in R",
    "section": "Bifurcaties van evenwichten",
    "text": "Bifurcaties van evenwichten\nHet model met verzadigbare predator heeft een interessante eigenschap: afhankelijk van de parameters kan het type evenwicht veranderen. Iets dergelijks zagen we ook al eerder terug: de predator kon alleen samenleven met de prooi als de parameters dat toelieten. Deze transitie zien we ook terug in dit vernieuwde model (van Figuur 2 (a) naar Figuur 2 (b)). Deze bifurcatie (van geen samenleving naar wél samenleving) wordt een kritische transitie genoemd. Echter is er met dit vernieuwde model een tweede bifurcatie mogelijk: de predator-nullcline kan de prooi-nullcine links of rechts van de top van de parabool snijden (van Figuur 2 (b) naar Figuur 2 (c)). Als het snijpunt links van de top van de parabool ligt, zien we voortdurende oscillaties van predator en prooi, waarbij de populaties om het instabiele evenwicht heen blijven draaien. Eerder hadden we al gezegd dat attractoren niet altijd hetzelfde zijn als het evenwichtspunt, en hier zie je dat heel goed! Deze attractor, waarbij de populaties constant om het evenwicht heen blijven draaien, heet een limietcyclus. De overgang van de stabiele spiraal (snijpunt rechts van de parabool) naar de instabiele spiraal (snijpunt links van de parabool) staat bekend als de Hopf-bifurcatie.\n\nCode\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dR &lt;- b*R*(1 - R/K) - d*R - a*R*N/(R+h)\n    dN &lt;- c*a*R*N/(R+h) - delta*N\n    return(list(c(dR, dN)))  \n  }) \n}  \n\ncolors[1] = \"blue\" #optioneel, default = 'red'\ncolors[2] = \"#FF7F50\" #optioneel, default = 'blue'\n\np &lt;- c(b=1,d=0.0,K=0.4,a=1,c=1,delta=0.3,c=1,h=1)  #parameters\ns &lt;- c(R=0.7,N=0.2) #begin-dichtheden van R en N  \nplane(xmax=0.8,ymax=2)\nrun(tstep=0.5, traject=T,col=\"grey\")\nnewton(state=c(R=0.4,N=0.0),plot=T)\n\np &lt;- c(b=1,d=0.0,K=1,a=1,c=1,delta=0.3,c=1,h=1)  #parameters\ns &lt;- c(R=1,N=1) #begin-dichtheden van R en N  \nplane(xmax=2.2,ymax=2)\nrun(tstep=0.5, traject=T,col=\"grey\")\nnewton(state=c(R=0.5,N=0.5),plot=T)\n\np &lt;- c(b=1,d=0.0,K=2,a=1,c=1,delta=0.3,c=1,h=1)  #parameters\ns &lt;- c(R=1.2,N=1.3) #begin-dichtheden van R en N  \nplane(xmax=2.2,ymax=2)\nrun(tstep=0.2, traject=T,col=\"grey\")\nnewton(state=c(R=0.5,N=0.5),plot=T)\nnewton(state=c(R=0.0,N=0.0),plot=T)\nnewton(state=c(R=2.0,N=0.0),plot=T)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Als de nullclines niet snijden, is er geen evenwicht met beide populaties, en overleeft alleen de prooi.\n\n\n\n\n\n\n\n\n\n\n\n(b) Inwaartse spiraal die naar een stabiel evenwicht van predatoren en prooi gaat.\n\n\n\n\n\n\n\n\n\n\n\n(c) Voortdurende oscillaties van predatoren en prooi rond een instabiel evenwicht.\n\n\n\n\n\n\n\nFiguur 2: Verschillende faseruimtes voor het predator-prooi model met verzadigbare predator\n\n\n\nVoortdurende oscillaties tussen prooi en predator worden inderdaad waargenomen, bijvoorbeeld de oscillaties tussen hazen en lynxen in Noord Amerika (Figuur 3). Ook in experimenten zijn dergelijke oscillaties waargenomen, bijvoorbeeld door Paramecium (een-cellige protist, prooi) en Didinium (eencellige protist, predator) samen te groeien in een Erlenmeyer (Xia et al., 1992).\n\n\n\n\n\n\nFiguur 3: Populatieaantallen hazen en lynxen in Noord Amerika van medio 19e eeuw tot medio 20e eeuw (bepaald op basis van de vachtenverkoop, zie Elton & Nicholson 1942)\n\n\n\nBifurcaties kun je weergeven in een bifurcatiediagram, waarbij we de parameter die het evenwicht beïnvloedt op de x-as zetten, en de populatiegroottes in evenwicht op de y-as. Als we dit doen voor de bovenstaande bifurcaties, krijgen we dit:\n\n\nCode\nmy_theme &lt;- theme_bw() + \n  theme(panel.border = element_blank(), panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank(), axis.line = element_line(colour = \"black\"))\n\n  \nmodel &lt;- function(t, state, parms){\n  with(as.list(c(state,parms)),{\n    dR &lt;- R*(b*(1-R/K)-d) - a*R*N/(R+h)\n    dN &lt;- c*a*R*N/(R+h) - delta*N\n    return(list(c(dR,dN)))\n  })\n}  \n\n\n# all &lt;- data.frame()\n# for(k in c(0.00001,seq(0.001,4.0,by=0.001))){\n#   p &lt;- c(a=0.5,delta=0.25,b=0.5,d=0.01,c=0.99,K=k,h=1)\n#   s &lt;- c(R=0.4,N=0.4)\n#   plane(ymax=1.2,ymin=-0.1,xmin=-0.01, xmax=1.2,tstep=0.01,tmax=50)\n#   #res &lt;- newton()\n#   dat &lt;- run(table=T,step=11,tmax=1000,timeplot=F)\n#   dat$K = k\n#   all &lt;- rbind(all,tail(dat,100))\n#   cat(k,\"\\n\")\n# }\n# \n# bifurcation_data &lt;- all %&gt;% group_by(K) %&gt;% \n#   mutate(maxN=max(N)) %&gt;% \n#   mutate(minN=min(N)) %&gt;% \n#   mutate(maxR=max(R)) %&gt;% \n#   mutate(minR=min(R)) %&gt;% \n#   filter(time==1000) %&gt;% \n#   distinct()\n# \n# write.table(bifurcation_data, \"Modellering/figuren/bifurcation_data.csv\")\n\nbifurcation_data &lt;- read.table(\"figuren/bifurcation_data.csv\")\n#list.files(\"figuren\")\n\ncolors &lt;- c(\"R\" = \"blue\", \"N\" = \"#FF7F50\")\n\nbifurcation_data %&gt;%\n  ggplot(aes(x=K,y=maxN)) +\n  #geom_line(col=\"#FF7F50\",linewidth=1, aes(color=\"N\")) +\n  geom_line(aes(y=maxR,color=\"R\"),linewidth=1) +\n  geom_line(aes(y=minR,color=\"R\"),linewidth=1) +\n  geom_line(aes(y=minN,color=\"N\"),linewidth=1) +\n  geom_line(aes(y=maxN,color=\"N\"),linewidth=1) +\n  ylab(\"Population sizes\") +\n  my_theme +\n  scale_color_manual(name=\"Soort\",values = colors)\n\n\n\n\n\n\n\n\nFiguur 4: Bifurcatiediagram van het Lotka-Volterra predator-prooi model\n\n\n\n\n\nOmdat er bij hoge waarden van \\(K\\) oscillaties zijn, geven de lijnen de minimale en maximale waarde van deze oscillaties aan. Omdat de parameter \\(K\\) het draagvlak van de prooi beinvloed, geeft dit diagram dus weer wat er bijvoorbeeld zou gebeuren als we konijnen op de Veluwe gaan bijvoeren: eerst krijgen we meer konijnen, dan krijgen we alleen meer predatoren, en daarna begint het systeem harder en harder te schommelen! Zo zie je: het behoud van biodiversiteit is zelfs in dit simplistische “ecosysteem” niet triviaal!",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#grind.r-kan-nog-veel-meer",
    "href": "Modellen/odes_grind.html#grind.r-kan-nog-veel-meer",
    "title": "ODEs modelleren in R",
    "section": "grind.R kan nog veel meer",
    "text": "grind.R kan nog veel meer\nMet het R-script grind.R kan je nog veel meer dan alleen faseplaatjes en bifurcaties analyseren. Zo kan je bijvoorbeeld met een zogeheten “interactie matrix” (waarin staat hoe alle soorten interacteren met alle soorten) een heel ecosysteem doorrekenen (zie Figuur 5 voor een voorbeeld met 30 soorten), wat fascinerend complexe en onvoorspelbare dynamiek kan opleveren. Hoewel het brede scale aan functionaliteiten van grind.R leuk zijn om mee te spelen, is dit geen leerstof. De algemene boodschap is dat we voor meer ingewikkelde systemen meestal niet met pen en papier te hoeven rekenen, maar de computer het werk kunnen laten doen!\n\n\nCode\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\nset.seed(12)\nmodel &lt;- function(t, state, parms) {\n  N &lt;- state\n  S &lt;- A %*% N # R code for matrix x vector multiplication\n  dN &lt;- r*N*(1 - S)\n  return(list(dN))  \n}  \n\np &lt;- c()\nn &lt;- 30\ns &lt;- rep(0.01,n)\nnames(s) &lt;- paste(\"N\",seq(1,n),sep=\"\")\nr &lt;- abs(rnorm(n,1,0.1))\nA &lt;- matrix(runif(n*n),nrow=n,ncol=n)\ndiag(A) &lt;- 1; A\n\nrun(tmax=300,legend=F)\n\n\n\n\n\n\n\n\nFiguur 5",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#terminologie",
    "href": "Modellen/odes_grind.html#terminologie",
    "title": "ODEs modelleren in R",
    "section": "Terminologie",
    "text": "Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nHill-functies\nHill functions\nEen set wiskundige functies die verzadigen bij grote waarden (ze hebben een horizontale assymptoot).\n\n\nKritische-transitie\nCritical Transition\nEen punt waarbij een parameter-verandering het gedrag van een model fundamenteel verandert, bijvoorbeeld doordat het aantal of de stabiliteit van de evenwichten verandert. In dit hoofdstuk zien we bijvoorbeeld dat er alleen samenleving mogelijk is als \\(K\\) hoog genoeg is. Er is dus een waarde van \\(K\\) waarbij er een kritische transitie is.\n\n\nHopf-bifurcatie\nHopf-bifurcation\nEen omslagpunt waar, als je een bepaalde parameter verandert, een stabiel evenwicht overgaat in periodiek gedrag (of andersom). In dit hoofdstuk zagen we dit terug doordat het verhogen van \\(K\\) de stabiele samenleving van predator en prooi kan veranderen in periodieke oscillaties van de populatiegroottes.",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/odes_grind.html#footnotes",
    "href": "Modellen/odes_grind.html#footnotes",
    "title": "ODEs modelleren in R",
    "section": "",
    "text": "Op regel 2 zie dat dat deze ‘model’-functie zit een beetje raar zit ingepakt in een with functie. Dit heeft een technische reden (en is zeker geen leerstof), maar helpt R begrijpen hoe de variabelen/parameters heten. De enige regels die je eigenlijk hoeft aan te passen zijn degene met de vergelijkingen (hier regel 3 en 4), en zorgen dat deze vergelijkingen in de goede volgorde worden teruggegeven (regel 5).↩︎",
    "crumbs": [
      "Biologische modellen",
      "ODEs modelleren in R"
    ]
  },
  {
    "objectID": "Modellen/competitie.html",
    "href": "Modellen/competitie.html",
    "title": "15  Competitie en evolutie",
    "section": "",
    "text": "15.1 Leerdoelen\nDe leerdoelen voor dit hoofdstuk zijn:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#leerdoelen",
    "href": "Modellen/competitie.html#leerdoelen",
    "title": "15  Competitie en evolutie",
    "section": "",
    "text": "Begrijpen hoe intra- en interspecifieke interacties gemodelleerd kunnen worden.\nMogelijke evenwichten in faseruimtes van competitie kunnen benoemen, en uitleggen wat de biologische intepretaties van deze evenwichten zijn.\nEen gegeven vectorveld afmaken en daarbij horende oplossingen schetsen\nVerschillende uitkomsten van competitie aflezen aan een faseruimte\nBegrijpen hoe je met ODEs evolutionaire vragen kan stellen, en deze contrasteren met evolutionaire uitkomsten in ruimtelijke modellen",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#competitie-binnen-en-tussen-soorten",
    "href": "Modellen/competitie.html#competitie-binnen-en-tussen-soorten",
    "title": "15  Competitie en evolutie",
    "section": "15.2 Competitie binnen en tussen soorten",
    "text": "15.2 Competitie binnen en tussen soorten\nInter-specifieke competitie is competitie tussen soorten, en intra-specifieke competitie staat voor competitie binnen een soort1. Als twee soorten bijvoorbeeld voornamelijk hetzelfde voedsel eten (of transcriptiefactoren hebben dezelfde bindingsplaats), zullen ze onderling veel competitie hebben. In ecologische begrippen stellen we dan dat de niches van de soorten sterk overlappen, wat we bijvoorbeeld kunnen bepalen door precies te meten welke zaadjes verschillende soorten vogels eten (Figuur 15.1). Hoe meer de niches overlappen, hoe sterker de inter-specifieke competitie.\n\n\nCode\nn &lt;- 1\nplot_niche_overlap &lt;- function(mean1=-1, sd1=1, mean2=1, sd2=1){\n  # Define the range for the x-axis\n  x_range &lt;- seq(-5, 5, length.out = 1000)\n  \n  # Calculate the densities\n  density1 &lt;- dnorm(x_range, mean = mean1, sd = sd1)\n  density2 &lt;- dnorm(x_range, mean = mean2, sd = sd2)\n  \n  # Scale the densities to the same maximum height\n  max_height &lt;- 0.4\n  density1_scaled &lt;- density1 / max(density1) * max_height\n  density2_scaled &lt;- density2 / max(density2) * max_height\n  overlap &lt;- pmin(density1_scaled,density2_scaled)\n  # Plot the first normal distribution\n  \n  plot(x_range, density1_scaled, type = \"l\", \n       axes=F, xaxt='n', yaxt='n',yaxs=\"i\",\n       col = \"blue\", lwd = 2, ylim = c(0, max_height*1.1), \n       xlab = \"\", ylab = \"\", main = \"\")\n  polygon(x_range,overlap,col=\"#FF000033\",border = NA)\n  lines(x_range, density1_scaled, col = \"blue\", lwd = 2)\n  lines(x_range, density2_scaled, col = \"orange\", lwd = 2)\n  \n  arrows(0,0,7.5,0,xpd=NA,lwd=3,length = 0.1)\n  arrows(0,0,-7.5,0,xpd=NA,lwd=3,length = 0.1)\n  mtext(\"Kleine zaadjes\",1,at=-5.5,cex=0.6)\n  mtext(\"Grote zaadjes\",1,at=4.8,cex=0.6)\n  text(-10,0.6,paste0(LETTERS[n],')'),font=2,xpd=NA)\n  \n  overlap_pc &lt;- round(sum(overlap)/sum(density1_scaled),digits=2)*100\n#   title(main=paste0(\"N1 heeft \", \n#                     round(sum(overlap)/sum(density1_scaled),2)*100,\"%\",\n#                     \" overlap met N2\\n\",\n#                     \"N2 heeft \", \n#                     round(sum(overlap)/sum(density2_scaled),2)*100,\"%\",\n#                     \" overlap met N1\"),line = 0.5,cex.main=0.7)\n#   n &lt;&lt;- n + 1\n}\npar(mfrow=c(1,1),mar=c(4,4,0,4))\nplot_niche_overlap()\n\n\n\n\n\n\n\n\nFiguur 15.1: Als twee vogelsoorten verschillende voorkeuren voor zaadgrootte hebben, zullen ze competitie hebben om de zaadjes waar ze overlappen.\n\n\n\n\n\nDe niche overlap binnen een soort is eigenlijk per definitie 100%. Het is daarom redelijk om aan te nemen dat de competitie om voedsel binnen een soort (intra-specifieke competitie) sterker is dan de inter-specifieke competitie om voedsel. Echter kan intra-specifieke competitie ook door andere biologische processen teweeg gebracht worden. Zo kunnen bijvoorbeeld haviken uilen aanvallen om hen uit de beste jachtgebieden te verdrijven, of produceren veel schimmels toxines om bacteriën te onderdrukken. Zodoende kan het toch zijn dat de inter-specifieke competitie de overhand heeft, afhankelijk van het biologische scenario. Hoe hebben de twee bovengenoemde processen precies invloed op het wel/niet kunnen samenleven van soorten? Dit gaan we bestuderen met het Lotka-Volterra competitie model (vergelijkbaar maar niet hetzelfde als het Lotka-Volterra predator-prooi model).",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#lotka-volterra-competitie",
    "href": "Modellen/competitie.html#lotka-volterra-competitie",
    "title": "15  Competitie en evolutie",
    "section": "15.3 Lotka-Volterra competitie",
    "text": "15.3 Lotka-Volterra competitie\nLaten we aannemen dat er twee populaties bestaan die beide logistisch groeien, genaamd \\(N_1\\) en \\(N_2\\):\n\\[\\begin{align*}\n\n\\mathchoice{\\frac{\\mathrm{d}N_1}\n{\\mathrm{d}t}}{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n&= rN_1(1-\\frac{N_1}{K}) \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}N_2}\n{\\mathrm{d}t}}{\\mathrm{d}N_2/\\mathrm{d}t}\n{\\mathrm{d}N_2/\\mathrm{d}t}\n{\\mathrm{d}N_2/\\mathrm{d}t}\n&= rN_2(1-\\frac{N_2}{K})\n\\end{align*}\\]\nLet op! De bovenstaande ODEs beschrijven géén interacties tussen de soorten: de ODE voor \\(N_1\\) bevat alleen \\(N_1\\), en de ODE voor \\(N_2\\) bevat alleen \\(N_2\\). Biologisch betekent dat dus dat de groei van \\(N_1\\) niet beïnvloed wordt door de aanwezigheid van \\(N_2\\), en vice versa. Er is dus wel sprake van intraspecifieke competitie (de soorten hebben competitie met zichzelf), maar niet van interspecifieke competitie. Om ook interspecifieke comptitie te modelleren, kunnen we aannemen dat de dichtheid van beide soorten (\\(N_1\\) + \\(N_2\\)) bepaalt of het draagvlak is bereikt (en of er dus nog groei mogelijk is):\n\\[\\begin{align*}\n\n\\mathchoice{\\frac{\\mathrm{d}N_1}\n{\\mathrm{d}t}}{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n&= rN_1(1-\\frac{N_1+N_2}{K}) \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}N_2}\n{\\mathrm{d}t}}{\\mathrm{d}N_2/\\mathrm{d}t}\n{\\mathrm{d}N_2/\\mathrm{d}t}\n{\\mathrm{d}N_2/\\mathrm{d}t}\n&= rN_2(1-\\frac{N_1+N_2}{K})\n\\end{align*}\\]\nBeide populaties hebben nu een gedeeld draagvlak (\\(K\\)). Dit is biologisch goed te verdedigen: deze wordt bepaald door de hoeveelheid voedsel of ruimte. Echter ondervinden beide populaties precies dezelfde dichtheidseffecten. Maar wellicht heeft soort 1 sterkere competitie met “zichzelf” (intra), en soort 2 sterke competitie met “de ander” (inter). Om dit te kunnen bestuderen, introduceren we een set van vier nieuwe parameters die de intra- en interspecifieke competitie schalen:\n\\[\\begin{align*}\n\n\\mathchoice{\\frac{\\mathrm{d}N_1}\n{\\mathrm{d}t}}{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n&= rN_1(1-\\frac{c_{11}N_1+c_{12}N_2}{K}) \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}N_2}\n{\\mathrm{d}t}}{\\mathrm{d}N_2/\\mathrm{d}t}\n{\\mathrm{d}N_2/\\mathrm{d}t}\n{\\mathrm{d}N_2/\\mathrm{d}t}\n&= rN_2(1-\\frac{c_{22}N_2+c_{21}N_1}{K})\n\\end{align*}\\]\nHierbij schalen \\(c_{11}\\) en \\(c_{22}\\) de intraspecifieke competitie voor respectievelijk soort 1 en 2, \\(c_{12}\\) de competitie die soort 1 van soort 2 ondervindt, en \\(c_{21}\\) de competitie die soort 2 van soort 1 ondervindt. Laten we het aantal parameters beperken door aan te nemen dat \\(K=1\\), waardoor we deze kunnen weglaten uit de vergelijking. Als we \\(N_1\\) blauw kleuren, en \\(N_2\\) oranje, dan wordt ons systeem:\n\\[\\begin{align*}\n\\color{#2a53f7}\n\\mathchoice{\\frac{\\mathrm{d}N_1}\n{\\mathrm{d}t}}{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n&= r\\textcolor{#2a53f7}{N_1}(1 - c_{11}\\textcolor{#2a53f7}{N_1} - c_{12}\\textcolor{orange}{N_2})\\\\\n\\color{orange}\n\\mathchoice{\\frac{\\mathrm{d}N_2}\n{\\mathrm{d}t}}{\\mathrm{d}N_2/\\mathrm{d}t}\n{\\mathrm{d}N_2/\\mathrm{d}t}\n{\\mathrm{d}N_2/\\mathrm{d}t}\n&= r\\textcolor{orange}{N_2}(1 - c_{22}\\textcolor{orange}{N_2} - c_{21}\\textcolor{#2a53f7}{N_1})\n\\end{align*}\\]\nOm te kunnen onderzoeken of twee soorten kunnen samenleven, en onder welke voorwaarden, kunnen we weer de faseruimte analyseren. In het vorige hoofdstuk heb je geleerd hoe je dit eenvoudig met R zou kunnen doen. Echter is er ook een belangrijk voordeel aan het zelf schetsen van de faseruimte: we weten dan precies welke parameters bepalen hoe de nullclines liggen. Bovendien ontwikkel je door hiermee te oefenen een beter gevoel voor deze dynamische systemen. Daarom staat in Tip 15.1 een uitgebreid stappenplan voor het zelf tekenen van een faseruimte.\n\n\n\n\n\n\nTip 15.1: Algemeen stappenplan voor het schetsen van faseruimtes.\n\n\n\n\n\nStel, we analyseren een 2D ODE systeem bestaande uit variable \\(A\\) en \\(B\\):\n\nTeken een assenstelsen met één populatie op de x-as, en de ander op de y-as. We zetten bijvoorbeeld A op de y-as en B op de x-as.\nVind de nullcline(s) voor A. Hiervoor los je \\(\n\\mathchoice{\\frac{\\mathrm{d}A}\n{\\mathrm{d}t}}{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n=0\\) op. Je kan een aantal verschillende typen nullclines vinden:\n\n\\(A=0\\), wat gebeurt als elke term \\(A\\) bevat. Voor groeimodellen komt deze nullcline vaak (maar niet altijd!) voor.\n\\(A=C\\), een horizontale lijn bij een niet-triviale hoeveelheid \\(A\\).\n\\(B=C\\), een verticale lijn bij een niet-triviale hoeveelheid \\(B\\).\n\\(A=f(B)\\) of \\(B=f(A)\\), wat gebeurt als je beide onbekenden (\\(A\\) en \\(B\\)) overhoudt. In dit geval is het vaak makkelijk om te zoeken naar een functie die in je assenstelsel een functie y=f(x) geeft. In dit geval is dus \\(A=f(B)\\) prettiger, want we hadden ervoor gekozen \\(A\\) op de y-as te zetten.\n\nVind ook de nullclines voor B. Als je wederom twee onbekenden overhoudt, zoek dan \\(A=f(B)\\) zodat je deze makkelijk in hetzelfde assenstelsel kan schetsen.\nTeken de nullclines. Zorg dat je weet waar de nullclines (eventueel) de x- en y-as snijden, want dit kan belangrijk zijn om te bepalen of de nullclines elkaar snijden.\n\nSnijpunten met de y-as vind je door \\(x=0\\) in de vullen.\nSnijpunten met de x-as vind je door \\(f(x)=0\\) op te lossen.\n\nNeem een extreme waarde in de faseruimte, en ga in de oorspronkelijke ODEs op zoek naar termen met hoge machten (kwadratische termen zoals (\\(A^2\\), \\(B^2\\), of \\(AB\\), of misschien zelfs \\(A^3\\), \\(B^4\\), etc.). De termen met de hoogste macht hebben altijd de overhand bij extreme waarden. Dat wil zeggen: deze termen zijn extra klein als de variabelen klein zijn, en extra groot als de variabelen groot zijn. Zo kun je bepalen wie zal groeien/krimpen.\nTeken pijltjes in deze regio van de faseruimte om de richting van verandering aan te geven.\nVul de rest van het vectorveld in. De \\(A\\) en \\(B\\) nullclines geven aan waar het pijltje van richting verandert (respectievelijk voor \\(A\\) en \\(B\\))\nKies de begintoetsand waarin je geïnteresseerd bent. Schets een trajectory die de richtingen van het vectorveld volgt. Let op dat de pijlen kwalitatieve informatie geven (iets neemt toe of af), maar geen kwantitatieve informatie bevatten. We kunnen de trajectorie dus niet heel precies tekenen maar alleen schetsen. Een schets is goed als deze de richtingen van het vectorveld volgt.\nSchets eventueel de oplossing (de variabelen geplot als functie van de tijd) die hierbij hoort.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#faseruimte-van-het-competitiemodel",
    "href": "Modellen/competitie.html#faseruimte-van-het-competitiemodel",
    "title": "15  Competitie en evolutie",
    "section": "15.4 Faseruimte van het competitiemodel",
    "text": "15.4 Faseruimte van het competitiemodel\nWe volgen het hierboven genoemde stappenplan voor de analyse van ODEs, en gaan een faseruimte maken van het competitiemodel zoals eerder besproken:\n\\[\n\\begin{align}\n\n\\mathchoice{\\frac{\\mathrm{d}\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1}\n{\\mathrm{d}t}}{\\mathrm{d}\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1/\\mathrm{d}t}\n= r\\textcolor{#2a53f7}N_{\\textcolor{#2a53f7}1}\\left(1 - c_{11}\\textcolor{#2a53f7}N_{\\textcolor{#2a53f7}1} - c_{12}\\textcolor{orange}N_{\\textcolor{orange}2}\\right)\n\\end{align}\n\\tag{15.1}\\]\n\\[\n\\begin{align}\n\n\\mathchoice{\\frac{\\mathrm{d}\\textcolor{orange}N_\\textcolor{orange}2}\n{\\mathrm{d}t}}{\\mathrm{d}\\textcolor{orange}N_\\textcolor{orange}2/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{orange}N_\\textcolor{orange}2/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{orange}N_\\textcolor{orange}2/\\mathrm{d}t}\n= r\\textcolor{orange}N_\\textcolor{orange}2\\left(1 - c_{22}\\textcolor{orange}N_\\textcolor{orange}2 - c_{21}\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1\\right)\n\\end{align}\n\\tag{15.2}\\]\nZoals gezegd is het handig om eerst te kiezen wat we straks op de x- en y-as gaan zetten (deze keuze heeft geen invloed op het model zelf, alleen op de visualisatie). Laten we ervoor kiezen om \\(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1\\) op de x-as te zetten, en \\(\\textcolor{orange}N_\\textcolor{orange}2\\) op de y-as. We stellen beide ODEs gelijk aan 0, en gaan nullclines bepalen:\n\\[\\begin{align}\n\\color{#2a53f7}\n\\mathchoice{\\frac{\\mathrm{d}N_1}\n{\\mathrm{d}t}}{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n{\\mathrm{d}N_1/\\mathrm{d}t}\n&= r\\textcolor{#2a53f7}{N_1}(1 - c_{11}\\textcolor{#2a53f7}{N_1} - c_{12}\\textcolor{orange}{N_2}) = 0  \\quad \\text{als...} \\\\\n\\textcolor{#2a53f7}{N_1} &= 0 \\quad \\text{of...} \\\\\n1 - c_{11}\\textcolor{#2a53f7}{N_1} - c_{12}\\textcolor{orange}{N_2} &= 0 \\\\\n\\textcolor{orange}{N_2} &= \\frac{1 - c_{11}\\textcolor{#2a53f7}{N_1}}{c_{12}}\n\\end{align}\\]\nLet op dat dit beide nullclines zijn voor \\(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1\\). Met andere woorden: hoewel de tweede nullcline uitgedrukt is als \\(\\textcolor{orange}N_\\textcolor{orange}2=f(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1)\\), wordt dit straks een blauwe nullcline. We hadden deze nullcline ook kunnen uitdrukken als \\(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1=f(\\textcolor{orange}N_\\textcolor{orange}2)\\), maar omdat \\(\\textcolor{orange}N_\\textcolor{orange}2\\) op de y-as staat, is die laatste keuze wat minder fijn schetsen.\nOp dezelfde manier kunnen we ook de \\(\\textcolor{orange}N_\\textcolor{orange}2\\) (oranje) nullclines vinden:\n\\[\\begin{align*}\n\\textcolor{orange}{N_2} &= 0 \\quad \\text{of...} \\\\\n\\textcolor{orange}{N_2} &= \\frac{1 - c_{21}\\textcolor{#2a53f7}{N_1}}{c_{22}}\n\\end{align*}\\]\nWe vinden dus ook twee nullclines voor \\(\\textcolor{orange}{N_2}\\). We vinden wederom een nullcline voor een populatiegrootte van 0 (een populatie die niet bestaat kan ook niet groeien), en een nullcline die we uitdrukken als \\(\\textcolor{orange}N_\\textcolor{orange}2=f(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1)\\), zodat we dit kunnen schetsen in de vorm \\(y=f(x)\\).\nDe twee “triviale” nullclines (dus \\(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1=0\\) en \\(\\textcolor{orange}N_\\textcolor{orange}2=0\\)) zijn simpelweg lijnen die op de assen liggen. De andere twee nullclines zijn functies die lineair afnemen met \\(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1\\), maar let op, er staan andere parameters in de vergelijkingen. Om precies te bepalen hoe deze rechte lijnen lopen, moeten we hun snijpunten met de x- en de y-as bepalen. De nullcline van \\(N_1\\) snijdt de y-as wanneer \\(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1=0\\), dus bij \\(\\textcolor{orange}N_\\textcolor{orange}2=\\frac{1}{c_{12}}\\), en de x-as bij \\(\\frac{1 - c_{11}\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1}{c_{12}}=0\\), wat alleen 0 is als de teller 0 is, dus als \\(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1=\\frac{1}{c_{11}}\\). Vergelijkbaar, snijdt de nullcline van \\(N_2\\) de y-as bij \\(\\textcolor{orange}N_\\textcolor{orange}2=\\frac{1}{c_{22}}\\) en de x-as bij \\(\\textcolor{#2a53f7}N_\\textcolor{#2a53f7}1=\\frac{1}{c_{21}}\\).\nOm precies te weten hoe deze lijnen in de faseruimte liggen, moeten we keuzes maken over de parameters. Als we bijvoorbeeld aannemen dat interspecifieke competitie zwakker is dan intraspecifieke competitie (\\(c_{12}\\) en \\(c_{21}\\) zijn kleiner dan \\(c_{11}\\) en \\(c_{22}\\)), dan liggen de nullclines zoals weergegeven in (Figuur 15.4 (a)). Om ook het vectorveld te bepalen, kijken we altijd naar extreme waarden (heel veel of weinig van beide populaties). Voor deze vergelijkingen komen we heel ver met alleen intuïtie: als beide soorten in grote aantallen voorkomen, kunnen ze alleen maar afnemen. Ook in de vergelijkingen zie je dit terug: als je de ODEs uitvermenigvuldigd zijn er kwadratische termen voor de competitie, terwijl de groei lineair toeneemt. Als de populaties dus heel groot zijn, zal competitie de overhand hebben, en de populaties dus afnemen. Beide manieren tonen dus aan dat het vectorveld rechtsbovenin naar links/onder wijst. De andere punten van het vectorveld kunnen we simpelweg afmaken door de pijltjes om te laten klappen als je over de bijbehorende nullcline gaat. Gaan we over een \\(N_1\\) nullcline dan klapt het horizontale pijltje om (want \\(N_1\\) staat op de x-as), en gaan we over een \\(N_2\\) nullcline dan klapt het verticale pijltje om (want \\(N_2\\) staat op de y-as). Omdat alle pijltjes naar het snijpunt wijzen waarbij beide populaties overleven (Figuur 15.4 (b)), weten we dat dit evenwicht stabiel is. Voor het “triviale” evenwicht (waarbij beide soorten niet bestaan) zien we dat de pijlen er vanaf wijzen, dus dit evenwicht is instabiel. Ook de evenwichten waarbij 1 soort aanwezig is en de ander afwezig, zijn volgens deze zelfde analyse instabiel.\n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\nFiguur 15.2: Faseruimte voor het Lotka-Volterra competitie model, aangenomen dat competitie binnen soorten sterker is dan competitie tussen soorten (\\(c_{12}\\) en \\(c_{21}\\) zijn kleiner dan \\(c_{11}\\) en \\(c_{22}\\)).\n\n\n\n\nOefening 15.1 (Sterkere intraspecifieke competitie) Hierboven hebben we nullclines geschetst van het competitiemodel, onder de aanname dat interspecifieke competitie sterker is dan intraspecifieke competitie (\\(c_{12}\\) en \\(c_{21}\\) zijn kleiner dan \\(c_{11}\\) en \\(c_{22}\\)). Beginnende vanuit deze opstelling: stel dat \\(N_2\\) steeds sterkere competitie krijgt met \\(N_1\\).\n\nWelke parameter gaat er veranderen?\nWelke nullcline in deze faseruimte zal verschuiven?\n\nAls deze verschuiving doorzet, zullen de nullclines op een gegeven moment niet meer snijden.\n\nVanaf wel punt gebeurt dit?\nSchets het vectorveld in de situatie dat de nullclines niet snijden, en teken een trajectorie om aan te geven wat er zal gebeuren als je met veel van beide soorten begint.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#coexistentie-of-exclusie",
    "href": "Modellen/competitie.html#coexistentie-of-exclusie",
    "title": "15  Competitie en evolutie",
    "section": "15.5 Coexistentie of exclusie?",
    "text": "15.5 Coexistentie of exclusie?\nAfhankelijk van de parameters zien we dat de nullclines van het Lotka-Volterra competitie model anders kunnen liggen. Laten we Grind gebruiken om het bovenstaande model verder te analyseren. We nemen eerst aan dat intraspecifieke competitie sterker is dan interspecifieke competitie.\n\n\nCode\n#Laad het grind.R-script in\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\n# Definitie van model. \nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dN1 &lt;- r*N1*(1-c11*N1-c12*N2)\n    dN2 &lt;- r*N2*(1-c22*N2-c21*N1)\n    return(list(c(dN1, dN2)))  \n  }) \n}  \n\n\np &lt;- c(r=1,c11=2,c22=2,c12=1,c21=1)  #parameters met intra sterker dan inter\ns &lt;- c(N1=0.01,N2=0.001) # kleine begin-dichtheden\n\ncolors[1] = \"blue\"\ncolors[2] = \"orange\"\npar(mfrow=c(1,2)) # maak twee plot-ruimtes\nplane(vector=T,grid=3) # faseruimte \nrun(traject=F,tstep=0.1,col=\"black\",tmax=50) # numerieke oplossing\nmtext(\"LV competitie met sterke intraspecifieke competitie\", cex=1.2,font=2,side = 3, line = -3, outer = TRUE)\n\n\n\n\n\n\n\n\n\nHet bovenstaande Grind-script bevestigt wat we net met pen-en-papier al hebben aangetoond: twee soorten kunnen samenleven wanneer er sterke intraspecifieke competitie is. Het evenwicht waar beide soorten voorkomen is dus een attractor van het systeem. Je zou je deze attractor kunnen voorstellen als een kuil waar een balletje door de zwaartekracht heen zal rollen (zie linkerzijde van Figuur 15.3). Tenzij één van de soorten vanaf het begin afwezig is, krijgen we dus altijd coexistentie (coexistence).\n\n\n\n\n\n\nFiguur 15.3: Een bal die een dal in rolt en daar een stabiele plek bereikt (links) en een bal die een “zadelpunt” af rolt (rechts)\n\n\n\nOmdat we nu ons R-script klaar hebben liggen, is het eenvoudig om deze aan te passen voor een scenario waar de twee soorten juist hele sterke interspecifieke competitie hebben, bijvoorbeeld wanneer twee bacterien toxines produceren om elkaar te inhiberen:\n\n\nCode\n# Laad het grind.R-script in\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\n# Definitie van model. \nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dN1 &lt;- r*N1*(1-c11*N1-c12*N2)\n    dN2 &lt;- r*N2*(1-c22*N2-c21*N1)\n    return(list(c(dN1, dN2)))  \n  }) \n}  \n\n\np &lt;- c(r=1,c11=1,c22=1,c12=2,c21=2)  #parameters\ns &lt;- c(N1=0.01,N2=0.001) # kleine begin-dichtheden\n\ncolors[1] = \"blue\"\ncolors[2] = \"orange\"\npar(mfrow=c(1,2)) # maak twee plot-ruimtes\nplane(vector=T,grid=3) # faseruimte \nrun(traject=F,tstep=0.1,col=\"black\",tmax=50) # numerieke oplossing\nmtext(\"LV competitie met sterke interspecifieke competitie\", cex=1.2,font=2,side = 3, line = -3, outer = TRUE)\n\n\n\n\n\n\n\n\n\nZoals je ziet heeft deze parameterverandering het vectorveld veranderd: waar eerst pijltjes naar het evenwicht in het midden wezen, wijzen nu slechts twee van de vier pijltjes naar het evenwicht. De andere twee wijzen er juist van weg. Dit type evenwicht heet een zadelpunt (saddle point).\nAls we ons weer een balletje voorstellen dat naar beneden rolt, zal dit er uitzien zoals de rechterzijde van Figuur 15.3. Of het balletje naar links of naar rechts rolt, wordt eigenlijk uitsluitend bepaald door waar het balletje begon. Sterker nog, als het precies in het midden was begonnen, was het precies op het midden van het “zadel” blijven liggen (een dergelijke situatie is natuurlijk biologisch gezien niet heel reëel). Als we dit terug vertalen naar de samenleving van de twee soorten, kunnen we concluderen dat er geen coexistentie zal zijn, maar competitieve exclusie (competitive exclusion): één soort blijft over en de ander sterft uit. De soort die aanvankelijk meer voorkomt zal winnen, wat in de ecologie founder control wordt genoemd. Dit betekent dus ook dat als de andere soort invasief is (een nieuwe mutant of geïntroduceerd vanuit een ander continent), dat deze niet zal kunnen verspreiden.\nMet het bovenstaande model zien we dat, afhankelijk van de parameters, er hele andere voorspellingen uit ons model komen rollen. Bovendien zien we dat evenwichtspunten (daar waar twee nullclines snijden) er heel anders uit kunnen zien. We zagen in het Lotka-Volterra model zonder verzadigbare predator een stabiele spiraal, met verzadigbare predator dat de populaties prooi- en predator blijven oscilleren, met zwakke competitie tussen soorten samenleving, en met sterke competitie tussen soorten competitieve exclusie. Al deze verschillende evenwichtsituaties (zie Tip 15.2) kunnen we aflezen aan de gegeven faseruimtes, en dit vertalen naar hoe het systeem zich over de tijd zal ontwikkelen.\n\n\n\n\n\n\nTip 15.2: Type evenwichten\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvenwicht\nEquilibrium\nBeschrijving\nIllustratie\n\n\n\n\nStabiel punt\nStable point\nAlle pijltjes wijzen naar het evenwicht toe\n\n\n\nInstabiel punt\nUnstable point\nAlle pijltjes wijzen van het evenwicht weg.\n\n\n\nZadelpunt\nSaddle point\nIn één richting wijzen de pijlen naar het evenwicht toe, maar in de andere richting wijzen ze er juist vanaf.\n\n\n\nStabiele spiraal\nStable spiral\nHet vectorveld draait om het evenwicht heen, maar uiteindelijk beweegt het systeem naar het evenwicht toe.\n\n\n\nInstabiele spiraal\nUnstable spiral\nHet vectorveld draait om het evenwicht heen, en het systeem beweegt weg van het evenwicht.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#evolutionaire-vraagstukken",
    "href": "Modellen/competitie.html#evolutionaire-vraagstukken",
    "title": "15  Competitie en evolutie",
    "section": "15.6 Evolutionaire vraagstukken",
    "text": "15.6 Evolutionaire vraagstukken\nDe scenario’s in dit hoofdstuk kunnen we zien als competitie tussen twee reeds bestaande soorten, maar ook als een invasie-experiment. Als een mutant (of een invasieve soort) zich bevindt in een gevestigde populatie, zal deze dan verspreiden? Zal deze soort de bestaande soort compleet vervangen, of zullen de populaties een evenwicht vinden? Al met al kunnen we drie mogelijke uitkomsten bedenken:\n\nDe mutant kan niet groeien\nDe mutant kan groeien en bereikt een stabiel evenwicht met de bestaande populatie\nDe mutant kan groeien en vervangt de bestaande populatie\n\nEen heel interessante uitkomst vind je wanneer het evenwicht een zadelpunt vormt. In dit geval kan de mutant zich niet verspreiden, maar de bestaande populatie zou zich ook niet kunnen verspreiden in een populatie mutanten! Het eerder genoemde begrip founder control uit de ecologie, speelt dus ook een belangrijke rol in evolutionaire processen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#opgaven",
    "href": "Modellen/competitie.html#opgaven",
    "title": "15  Competitie en evolutie",
    "section": "15.7 Opgaven",
    "text": "15.7 Opgaven\n\nOefening 15.2 (Het “werkelijke” vectorveld) \nHet vectorveld hebben we tot nu toe versimpeld door slechts voor enkele punten aan te geven of de variabelen langs de x- en y-as zullen afnemen of toenemen. In werkelijkheid is dit vectorveld veel gedetailleerder: het geeft voor elk punt in de ruimte de unieke richting en unieke snelheid aan voor het systeem (zie bijvoorbeeld onderstaande figuur).\n\n\n\n\n\nHet bovenstaande vectorveld hoort bij het Lotka-Volterra competitie model zoals besproken in dit hoofdstuk (weergegeven zonder de nullclines).\n\nIs in bovenstaande vectorveld de inter- of intraspecifieke competitie sterker?\nKan je in een ODE met dezelfde begincondities verschillende richtingen op gaan? Waarom wel/niet?\nLeg met je antwoord op b uit waarom een trajectorie zichzelf nooit zal kunnen snijden.\n\nIn werkelijkheid kan het weldegelijk zo zijn dat je een experiment onder dezelfde begincondities hebt gestart, en toch andere uitkomsten hebt. Geef twee verschillende redenen waarom dit in het experiment wel kan, en in je model niet.\nAls een trajectorie een nullcline snijdt, gaat dat altijd onder een hele specifieke hoek. Druk in woorden uit waarom dat is, en in welke hoek je door de nullclines kan gaan.\n\n\n\nOefening 15.3 (Evenwichten en trajectories) \n\n\n\n\n\n\n\n\n\n\n\n(a)\n\n\n\n\n\n\n\n\n\n\n\n(b)\n\n\n\n\n\n\n\n\n\n\n\n(c)\n\n\n\n\n\n\n\nFiguur 15.4: Verschillende faseruimtes met nullclines, waarbij slechts in 1 hoek het vectorveld is gegeven.\n\n\n\nIn de bovenstaande faseruimtes zijn al nullclines getekend, en het vectorveld is aangegeven voor 1 regio.\n\nSchets de faseruimtes na. Vul de rest van het vectorveld in en benoem de evenwichten (zie Tip 15.2 voor de namen voor de verschillende typen evenwichten)\nStel we beginnen met X=0.1 en Y=0.2. Schets in elke faseruimte een geldige trajectorie\nSchets voor elke trajectory uit de vorige vraag een geldige oplossing (dat zijn dus per scenario twee grafieken in één assenstelsel).\n\n\n\nOefening 15.4 (Cheaters en cooperators) \nIn hoofdstuk Hoofdstuk 13 heb je kennis gemaakt met individual based modelling, en heb je gezien hoe cooperators en cheaters kunnen samenleven. Echter zagen we ook dat als het systeem te sterk gemengd werd, dat minder goed ging. Sterker nog, onder goed gemengde condities ging het eigenlijk helemaal mis, omdat de cheaters teveel toenamen en daarna het hele systeem uitstierf. Laten we kijken hoe dit uitpakt in een ODE die vergelijkbare aannames doet. Bekijk het volgende ODE model:\n\\[\\begin{align*}\n\n\\mathchoice{\\frac{\\mathrm{d}C_1}\n{\\mathrm{d}t}}{\\mathrm{d}C_1/\\mathrm{d}t}\n{\\mathrm{d}C_1/\\mathrm{d}t}\n{\\mathrm{d}C_1/\\mathrm{d}t}\n&= b_1C_1^2(1-\\frac{C_1+C_2}{K}) - dC_1\\\\\n\n\\mathchoice{\\frac{\\mathrm{d}C_2}\n{\\mathrm{d}t}}{\\mathrm{d}C_2/\\mathrm{d}t}\n{\\mathrm{d}C_2/\\mathrm{d}t}\n{\\mathrm{d}C_2/\\mathrm{d}t}\n&= b_2C_1C_2(1-\\frac{C_1+C_2}{K}) - dC_2\n\\end{align*}\\]\nAnders dan in het individual-based model, waar we twee cooperators en één cheater hadden, beschrijven we nu alleen een populatie van cooperators en een populatie van cheaters. De parameters \\(b_1\\) en \\(b_2\\) kunnen onderling verschillen, maar beide soorten hebben dezelfde death rate \\(d\\).\n\nWelk van de twee populaties is de cooperator, en welke de cheater? Waar zie je dit aan?\nWaarom bevat de functionele response \\((1-\\frac{C_1+C_2}{K})\\) zowel \\(C_1\\) als \\(C_2\\)?\nAls we een in de IBM een grid van 100x100 hadden, en er maar 1 individu in elke gridpunt past, hoe groot zou \\(K\\) dan ongeveer zijn?\n\nNeem de volgende Grind code over, waar de cooperators iets sneller groeien dan de cheaters:\n\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\nmodel &lt;- function(t, state, parms){\n  with(as.list(c(state,parms)),{\n    dC1 &lt;- b1*C1*C1*(1-C1-C2) - d*C1\n    dC2 &lt;- b2*C1*C2*(1-C1-C2) - d*C2\n    return(list(c(dC1,dC2)))\n  })\n}  \n\ncolors[1] = \"orange\"\ncolors[2] = \"blue\"\n\np &lt;- c(b1=2.0,b2=1,d=0.1)\ns &lt;- c(C1=0.2,C2=0.1)\nplane(vector=T,grid=7)\n\n\nBestudeer de faseruimte en het vectorveld. Is het evenwicht met alleen cooperators en géén cheaters stabiel, of instabiel? Controlleer je antwoord met newton(c(C1=1,C2=0),plot=T)\nVoorspel wie er overleeft wanneer je begint met veel van beide soorten.\nVoorspel wie er overleeft wanneer je begint met weinig van beide soorten.\n\nWe gaan nu aannemen dat de cheaters sneller groeien dan de cooperators (draai hiervoor de waarde van \\(b_1\\) en \\(b_2\\) om).\n\nBestudeer opnieuw de faseruimte en het vectorveld. Is het evenwicht met alleen cooperators stabiel of instabiel?\nVoorspel opnieuw wie er overleeft, en hoe dat afhangt van de begin-dichtheden. Leg in biologische termen uit wat er gebeurt.\nBestudeer andere waarden van \\(b_1\\) en \\(b_2\\). Bij welke parameters kunnen zowel \\(C_1\\) als \\(C_2\\) blijven leven? Vind je de gevonden voorwaarde biologisch relevant?\n\nIn de simulatie hieronder is de birth rate van cooperators iets lager gemaakt dan die van de cheaters.\n\n\n\n\nHoe kan het dat het individual-based model coexistentie van de soorten laat zien, terwijl dit in de ODE niet kan?\n\n\n\nOefening 15.5 (Verdieping: parameter fitting)  \n\n\n\n\n\n\nFiguur 15.5: Figuur 1 uit Gause (1934)\n\n\n\nIn klassieke experimenten groeide Gause (1934) twee soorten Paramecium, zowel in isolatie als samen. De doorgetrokken lijnen in de figuur hierboven suggereren dat de groeicurve van P. aurelia en P. caudatum in isolatie redelijk goed beschreven worden door een logistische groeivergelijking. In Gause’s eigen handschrift zijn de geschatte parameterwaarden te lezen (\\(r\\) = 0,794 per dag met \\(K\\) = 64 voor P. caudatum en \\(r = 1,129\\) per dag met \\(K = 105\\) voor P. aurelia). We gaan deze parameter-waarden bestuderen met Grind. Neem het volgende script over:\n\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dtN &lt;- r*N*(1 - N/K)\n    return(list(c(dtN)))  \n  }) \n} \n\np &lt;- c(r=1,K=100)    # Een ruwe gok van de parameters\ns &lt;- c(N=2)\nrun(18)              # Run het model 18 tijdstappen\n\n\nWaarom denk je dat we het model voor slechts 18 tijdstappen doorrekenen?\n\nDe ruwe data voor de soorten in isolatie (dus de rondjes in de figuur hierboven) staan op de website. Deze kan je zelf plotten, maar Grind heeft ook hier een ingebouwde functie voor (zie onderstaande code):\n\n  caudatum &lt;- read.table(\"https://tbb.bio.uu.nl/bvd/bms/caudatum.txt\", header=TRUE)\n  timePlot(caudatum,draw=points)\n  p &lt;- c(r=2,K=50)   \n  s &lt;- c(N=3)\n  run(18,add=T)\n\nIn de laatste regel code wordt het Grind-model over de data heen geplot.\n\nProbeer door trial-and-error een betere fit te krijgen aan de data (let op: je kunt zowel de parameters \\(r\\) en \\(K\\), als de initiele conditie van \\(N\\) aanpassen).\nTot hoeveel decimalen heb je \\(r\\), \\(K\\), en \\(N\\) geschat? Vertrouw je de uitkomst, en wellicht belangrijker, kun je dit vertrouwen objectief onderbouwen?\n\nTrial-and-error is niet reproduceerbaar voor andere wetenschappers, en is bovendien een enorm gepruts als je nog meer parameters hebt! Grind kan daarom ook parameter-fitting doen: automatisch veel mogelijke parameters uitproberen om zo tot een goede (hopelijk de beste) “fit” te komen:\n\n    caudatum &lt;- read.table(\"https://tbb.bio.uu.nl/bvd/bms/caudatum.txt\", header=TRUE)\n    timePlot(caudatum,draw=points)\n    p &lt;- c(r=1,K=10)   \n    s &lt;- c(N=2)\n    run(18,add=T)\n    free &lt;- c(\"r\",\"K\",\"N\")\n    fC &lt;- fit(caudatum,free=free,main=\"Caudatum\",legend=FALSE)\n\n\nWat denk je dat er in deze code wordt bedoeld met ‘free’?\nVoer de bovenstaande code uit voor zowel de gegeven waarden (\\(r=1\\), \\(K=10\\), \\(N=2\\)), als de waarden die je met gevonden hebt. Is het eind-resultaat (de parameter-schattingen) vergelijkbaar?\n\nOm de betrouwbaarheid van de fit te bestuderen, kunnen we de functie ‘summary’ in R gebruiken om de fit samen te vatten:\n\nfC &lt;- fit(caudatum,free=free,main=\"Caudatum\",legend=FALSE)\nsummary(fC)\n\n   Estimate Std. Error t value Pr(&gt;|t|)    \nr   0.7623     0.2221   3.433  0.00496 ** \nK  60.9539     3.2774  18.598 3.25e-10 ***\nN   3.7722     2.8796   1.310  0.21473 \n--\nSignif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1\n\nResidual standard error: 8.195 on 12 degrees of freedom\n\nParameter correlation:\n        r       K       N\nr  1.0000 -0.4381 -0.9272\nK -0.4381  1.0000  0.3023\nN -0.9272  0.3023  1.0000\nDeze samenvatting geeft naast de parameter-waarden ook een boel andere statistiek (standaard error, P-waarden, correlaties). Wat deze termen betekenen, en hoe je ze moet interpreteren, leer je bij het onderdeel statistiek.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#terminologie",
    "href": "Modellen/competitie.html#terminologie",
    "title": "15  Competitie en evolutie",
    "section": "15.8 Terminologie",
    "text": "15.8 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nIntraspecifieke competitie\nIntraspecific competition\nCompetitie binnen een soort (tussen soortgenoten)\n\n\nInterspecifieke competitie\nInterspecific competition\nCompetitie tussen verschillende soorten\n\n\nCoexistentie\nCoexistence\nDe samenleving van twee of meerdere soorten.\n\n\nCompetitieve exclusie\nCompetitive exclusion\nTwee soorten die niet duurzaam kunnen samenleven; de ene zal de andere verdringen.\n\n\nParameter fitting\nParameter fitting\nHet zoeken naar de parameters waarmee een model (bijvoorbeeld een ODE) overeenkomt met de data. Let op: er is niet altijd slechts één set parameters die de data goed kan beschrijven, dus het fitten van een model is geen garantie dat het model correct is!",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/competitie.html#footnotes",
    "href": "Modellen/competitie.html#footnotes",
    "title": "15  Competitie en evolutie",
    "section": "",
    "text": "Als je net als ik dit slecht kan onthouden, kun je de Intratuin als ezelsbruggetje gebruiken: “in de tuin” klinkt kloppend, maar “tussen de tuin” klinkt toch een beetje vreemd↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Competitie en evolutie</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html",
    "href": "Modellen/zwermen.html",
    "title": "16  Zwermen en foerageren",
    "section": "",
    "text": "16.1 Modelkeuzes met continue en discrete variabelen\nEerder in dit cursusonderdeel heb je al kennisgemaakt met discrete tijdstappen. Zo zagen we bijvoorbeeld bij de differentievergelijkingen dat je alleen in één keer van \\(t=1\\) naar \\(t=2\\) kan gaan. Met differentiaalvergelijkingen is tijd continu, en is de tijd tussen \\(t=1\\) en \\(t=2\\) in oneindig kleine stapjes is opgedeeld. Ook bij andere facetten van een model moeten we kiezen tussen discrete en continue waarden: modelleren we het daadwerkelijke (discrete) aantal konijnen, of versimpelen we hun aantal tot een (continue) dichtheid? Met ODEs, en zo ook met het predator-prooi model, nemen we aan dat populatiegrootes continu zijn. Zelfs als de dichtheid vossen kleiner is dan 1, kan dit nog steeds een biologisch relevant aantal vossen omschrijven (want \\(1 \\over 10\\) vossen per vierkante meter is nogsteeds een behoorlijk druk bos!). Maar hoe klein kan de dichtheid zijn voordat we ons zorgen moeten maken of we het nog over “hele vossen” hebben? Om te illustreren hoe belangrijk dit is, kun je in Tip 16.1 lezen over het probleem van “de atto-vos”.\nHet probleem van discrete tijdstappen uit Hoofdstuk 10 en de anekdote van de atto-vos zijn niet de enige momenten dat het belangrijk is om stil te staan bij wat voor variabelen we gebruiken, en wat ze precies betekenen. Bij elk model is het belangrijk om na te gaan welke keuze het meest logisch is: zijn de variabelen (toestand, tijd, en ruimte) discreet of continu (Figuur 16.1)? Natuurlijk zijn modellen altijd doelbewuste versimpelingen, maar in het geval van de atto-vos schepte het model een heel verkeerd beeld van het probleem! Toch is experimenteren met infectieziektes zeer onwenselijk, dus zijn deze modellen natuurlijk wel een zeer belangrijk stuk gereedschap! Laten we onze eerdere aanname dat ruimte in “hokjes” is opgedeeld dus ook eens onder de loep nemen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#modelkeuzes-met-continue-en-discrete-variabelen",
    "href": "Modellen/zwermen.html#modelkeuzes-met-continue-en-discrete-variabelen",
    "title": "16  Zwermen en foerageren",
    "section": "",
    "text": "Tip 16.1: De atto-vos\n\n\n\n\n\nIn 1991, tijdens het graven van de kanaaltunnel tussen Engeland en Frankrijk, waren er veel zorgen dat vossen met rabiës (hondsdolheid) de vossen in het Verenigd Koninkrijk zouden besmetten. Echter is het VK tot op de dag van vandaag volledig rabiës-vrij gebleven. De voorspelling was gedaan met een ODE-model, maar de dichtheid van de vossenpopulatie die succesvol door de kanaal-tunnel zou migreren was zeer laag (\\(10^{-18}\\)). Een hoeveelheid in de ordegrootte \\(10^{-18}\\) wordt ook wel “atto” genoemd (net zoals micro \\(10^{-6}\\) is en nano \\(10^{-9}\\) heet). Daarom kunnen we dit artefact van modelleren het “atto-vos”-probleem noemen. Want laten we eerlijk zijn: een heel klein stukje vos kan niet door een tunnel migreren, en dus ook geen ziektes verspreiden!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFiguur 16.1: Bij het opzetten van een model moeten we voor veel verschillende variabelen kiezen of deze continu of discreet gemodelleerd gaan worden.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#particle-life",
    "href": "Modellen/zwermen.html#particle-life",
    "title": "16  Zwermen en foerageren",
    "section": "16.2 Particle life",
    "text": "16.2 Particle life\n\n\n\nFrom https://youtu.be/p4YirERTVF0\n\n\nHoewel biologie zeer complex is, bestaat het fundamenteel niet uit andere deeltjes dan niet-levende systemen. Deeltjes trekken elkaar aan, stoten elkaar af, en ondergaan interacties. Laten we zoiets in R modelleren, en kijken wat er gebeurt. Stel je voor dat we 100 punten in een ruimte verspreiden, allemaal met een x- en y-coördinaat. Zoals hierboven besproken kiezen we er dit keer niet voor om de coördinaten als gehele getallen (1, 2, 3, ) uit te drukken, maar drukken we ze uit als decimale getallen (2.159, 0.156, ). We geven de 100 punten allereerst een willekeurige plek in de ruimte, en nemen dan aan dat ze elkaar van een afstand aantrekken, terwijl ze op kleine schaal elkaar juist afstoten. Hoewel de code hiervoor niet super ingewikkeld is, is de code geen leerstof. In plaats daarvan, kunnen we onze regels uitdrukken in “pseudocode”, waarin we verbaal omschrijven wat er moet gebeuren:\n\nVerspreid 100 punten in een 2D ruimte met willekeurige coördinaten tussen 0 en 1\nVoor elk punt, bereken de afstand tot alle andere punten, en zet een stapje in hun gemiddelde richting (dus naar het midden van de groep)\nWanneer twee punten overlappen, zet juist dan een stapje weg van dit punt.\n(elke 10e tijdstap, geef de punten weer in een plot)\nGa terug naar stap 2\n\nZoals gezegd, de R code hoeven jullie niet te begrijpen, maar voor de geïnteresserde student staat deze hier:\n\n\nCode voor geïnteresseerde student\nset.seed(8)\n# Aantal tijdstappen\npar(mar = rep(2, 4), bg = \"black\")\naantal_tijdstappen &lt;- 150\n\n# Aantal punten\naantal_punten &lt;- 100\n\n# Startcoördinaten\nalle_posities &lt;- data.frame(\n  x = runif(aantal_punten),\n  y = runif(aantal_punten)\n)\n\n# Parameters voor gedrag van punten\nminimale_afstand &lt;- 0.4\naantrekkingsfactor &lt;- 0.001  # Factor voor de (globale) aantrekkingskracht\nbotsingsfactor &lt;- 0.003   # Factor voor de (lokale) afstotingskracht\n\n# Functie om, per punt, de aantrekkingskracht en botsingsdetectie te berekenen\nupdate_positie &lt;- function(alle_posities, i) {\n  dx &lt;- 0 #verandering in x voor dit punt\n  dy &lt;- 0 #verandering in y voor dit punt\n  \n  for (j in 1:aantal_punten) {\n    if (i != j) { #niet met jezelf botsen / naar je zelf toe bewegen\n      afstand_x &lt;- alle_posities$x[j] - alle_posities$x[i]\n      afstand_y &lt;- alle_posities$y[j] - alle_posities$y[i]\n      afstand &lt;- sqrt(afstand_x^2 + afstand_y^2) #stelling van pythagoras\n      \n      # Aantrekkingskracht\n      dx &lt;- dx + aantrekkingsfactor * afstand_x / afstand\n      dy &lt;- dy + aantrekkingsfactor * afstand_y / afstand\n      \n      # Afstotingskracht voor botsingsdetectie\n      if (afstand &lt; minimale_afstand) {\n        dx &lt;- dx - botsingsfactor * afstand_x / afstand\n        dy &lt;- dy - botsingsfactor * afstand_y / afstand\n      }\n    }\n  }\n  \n  return(c(dx, dy))\n}\npar(mfrow=c(3,5))\n# Simuleer de diffusie en toon de resultaten stap voor stap\nfor (t in 1:aantal_tijdstappen) {\n  # Maak (leeg) dataframe voor posities in volgende tijdstap\n  nieuwe_positie &lt;- data.frame(x = numeric(aantal_punten), y = numeric(aantal_punten))\n  \n  # Bereken de verplaatsingen op basis van huidige posities\n  for (i in 1:aantal_punten) {\n    verplaatsing &lt;- update_positie(alle_posities, i)\n    nieuwe_positie$x[i] &lt;- alle_posities$x[i] + verplaatsing[1]\n    nieuwe_positie$y[i] &lt;- alle_posities$y[i] + verplaatsing[2]\n  }\n  \n  # Update alle posities \n  alle_posities &lt;- nieuwe_positie\n  \n  # Plot de huidige posities van de punten\n  if(t%%10==1){\n    plot(alle_posities$x, alle_posities$y, xlim = c(0, 1), ylim = c(0, 1), col = \"orange\", pch = 19, cex = 0.5,\n       xlab = \"X\", ylab = \"Y\")\n    title(sprintf(\"Tijdstip: %d\", t-1),col.main=\"white\")\n  }\n  \n}\n\n\n\n\n\n\n\n\n\nZoals je ziet onstaat er na een tijdje een zeer specifiek patroon. Als je dit patroon nog niet erg spannend vindt, zouden we ook kunnen kijken wat er met meerdere deeltjes (kleuren) gebeurt, die naast de aantrekkingskracht op henzelf ook elkaar aantrekken. Bijvoorbeeld: oranje is aangetrokken tot rood, rood tot paars, etc. Dan gebeurt er hetvolgende:\n\n\nKlik hier voor de R-code. De browser-simulatie hieronder is geïmplementeerd met Javascript\nlibrary(stringr)\n\n# Set up the plot area\npar(mar = rep(2, 4), bg = \"black\")\n\n# Define global parameters\nnum_colors &lt;- 6\ndots_per_color &lt;- 100\ntotal_particles &lt;- num_colors * dots_per_color\ncolors &lt;- rep(c(\"#E40303\", \"#FF8C00\", \"#FFED00\", \"#008026\", \"#24408E\", \"#732982\"), each = dots_per_color)\nmovement_rate &lt;- 0.0003  # Control the influence of the attraction/repulsion\nself_attraction_rate &lt;- 0.0005  # Mild attraction to particles of the same color\nrepulsion_distance &lt;- 3.5  # Distance threshold for repulsion\nspeed &lt;- 0.1  # Control the delay between frames (R-studio wont keep up otherwise!)\nnoise_level &lt;- 0.01  # Define the level of noise to add to the directions\n\n\n# Initialize positions of the particles in distinct regions\npositions &lt;- matrix(0, nrow = total_particles, ncol = 2)\nset.seed(42)\nfor (i in 1:num_colors) {\n  start_index &lt;- (i - 1) * dots_per_color + 1\n  end_index &lt;- i * dots_per_color\n  positions[start_index:end_index, ] &lt;- matrix(runif(dots_per_color * 2, min = (i - 1) * 1 - 10, max = i * 1 - 10), ncol = 2)\n}\ndirections &lt;- matrix(runif(total_particles * 2, min = -0.1, max = 0.1), ncol = 2)\n\n# Function to get the next color in the sequence\nnext_color &lt;- function(color) {\n  color_order &lt;- c(\"red\", \"blue\", \"green\", \"orange\", \"purple\")\n  return(color_order[(match(color, color_order) %% num_colors) + 1])\n}\n\n# Function to update positions\nupdate_positions &lt;- function(positions, directions, movement_rate, self_attraction_rate, repulsion_distance) {\n  for (i in 1:total_particles) {\n    attraction_force &lt;- c(0, 0)\n    repulsion_force &lt;- c(0, 0)\n    self_attraction_force &lt;- c(0, 0)\n    \n    # Calculate attraction, self-attraction, and repulsion forces\n    for (j in 1:total_particles) {\n      if (i != j) {\n        diff &lt;- positions[j, ] - positions[i, ]\n        distance &lt;- sqrt(sum(diff^2))\n        \n        # Attraction to particles of the next color in sequence\n        if (colors[j] == next_color(colors[i]) && colors[i] != \"purple\") {\n          attraction_force &lt;- attraction_force + movement_rate * diff\n        }\n        \n        # Mild attraction to particles of the same color\n        if (colors[j] == colors[i]) {\n          self_attraction_force &lt;- self_attraction_force + self_attraction_rate * diff\n        }\n        \n        # Repulsion from particles that are too close\n        if (distance &lt; repulsion_distance) {\n          repulsion_force &lt;- repulsion_force - movement_rate * (repulsion_distance - distance) * diff / distance\n        }\n      }\n    }\n    \n    # Add noise to the direction\n    noise &lt;- runif(2, min = -noise_level, max = noise_level)\n    directions[i, ] &lt;- noise\n    positions[i, ] &lt;- positions[i, ] + directions[i, ]\n    \n    # Combine forces\n    total_force &lt;- attraction_force + self_attraction_force + repulsion_force\n    directions[i, ] &lt;- total_force\n    positions[i, ] &lt;- positions[i, ] + directions[i, ]\n    \n  }\n  return(list(positions = positions, directions = directions))\n}\n\n# Create a directory to save the frames\n#dir.create(\"frames\")\n\n\npar(bg = 'black')\n# Update and animate the particles\nfor (i in 1:1000) {\n  #png(filename = sprintf(\"frames/frame_%04d.png\", i), width = 1280, height = 720, bg = \"black\")\n  # Initialize plot\n  \n  \n  # Update positions and directions\n  updated &lt;- update_positions(positions, directions, movement_rate, self_attraction_rate, repulsion_distance)\n  positions &lt;- updated$positions\n  directions &lt;- updated$directions\n  \n  plot(NULL, xlim = c(-10, 10), ylim = c(-10, 10), xlab = \"\", ylab = \"\", xaxt = 'n', yaxt = 'n', asp = 1, axes=F)\n  # Add a semi-transparent black background\n  rect(-100, -100, 100, 100, col = rgb(0, 0, 0, 0.05), border = NA)\n  # Draw the particles\n  points(positions[, 1], positions[, 2], col = colors, pch = 16, cex = 0.4)\n  \n  # Pause for a moment to create animation effect\n  Sys.sleep(speed)\n  \n}\n\n\n\n\n\n\n\nZoals je ziet vormen de deeltjes nu niet meer een stabiel patroon, maar blijven de deeltjes constant rondjes om elkaar heen draaien. Als we één van deze 6 kleuren (rood) juist geen aantrekking geven tot een andere kleur, dan gebeurt er werkelijk iets opmerkelijks:\n\n\n\n\n\nZoals je je kan voorstellen, kunnen variaties op deze simpele regels enorm veel verschillende patronen opleveren. Het systeem wat je hier bekijkt is particle life genoemd. Als je hier meer over wil weten, vind je hier een uitgebreide video, en hier een app die je zelf kan downloaden om met deze systemen te spelen.\nAls je de bovenstaande video’s en simulaties bekijkt zou je bijna denken dat je naar echte beestjes kijkt. Het lijkt bijvoorbeeld bijna alsof de bovenstaande worm “beslissingen” maakt wanneer deze zich plotseling omdraait. Maar alles gaat alleen maar om het aantrekken en wegduwen van stipjes. Een enkele stip zou natuurlijk niet dergelijk complex gedrag ontwikkelen, dat gebeurt alleen in de aanwezigheid van anderen. Als simpele onderdelen bij elkaar komen en daardoor complexe dynamica of patronen genereren, spreken we van een emergente eigenschap/emergente eigenschappen. Emergente eigenschappen komen we overal tegen in de biologie: van vetzuren die zich organiseren tot dubbele membranen, tot microben die doolhof-achtige patronen vormen (Figuur 16.2), tot de strepen op een zebra, tot chimpansees en mensen die complexe politieke structuren vormen. Hoewel al deze structuren erg complex lijken, is het in de kern wellicht gedreven door hele simpele regels.\n\n\n\n\n\n\nFiguur 16.2: Foto door Lars Dietrich (Columbia University)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#zwermpatronen-in-boids",
    "href": "Modellen/zwermen.html#zwermpatronen-in-boids",
    "title": "16  Zwermen en foerageren",
    "section": "16.3 Zwermpatronen in boids",
    "text": "16.3 Zwermpatronen in boids\nParticle life is een zogenaamd toy model. Dat wil zeggen: het laat bepaalde principes heel goed zien, maar het is niet per se een model van een specifiek biologisch systeem. Maar het illustreert wel heel goed dat complex (emergent) gedrag uit hele simpele regels kan ontstaan. Hier en daar doet het zelfs wel wat denken aan de zwermpatronen die je ziet in bijvoorbeeld insecten, vissen en vogels. Wellicht kunnen we dit model aanpassen om specifieker naar dit gedrag te kijken: hoe spreeuwen zogenaamde “murmuraties” vormen.\nLaten we er allereerst vanuit gaan dat de vogels alleen andere vogels kunnen zien wanneer die in hun buurt zijn. Dat wil zeggen, hun gedrag wordt alleen bepaald door nabije buren. In pseudocode, volgt elke vogel de volgende regels:\n\nProbeer je richting uit te lijnen met de groep\nBeweeg je naar het midden van de groep toe\nProbeer te voorkomen dat je met anderen botst\n\n\n\n\nDe drie simpele regels van Boids: een model dat prachtige “murmuraties” op kan leveren.\n\n\nAls je deze drie regels samenvoegt, zul je zien dat je onmiddelijk prachtige murmuraties ziet:\n\nDit model is door de bedenker, Craig Reynolds, “boids” genoemd, omdat hij het grappig vond hoe mensen in New York het woord birds uitspraken. Anders dan particle life, kunnen we met een dergelijk model weldegelijk biologisch onderzoek doen. Het wordt bijvoorbeeld door de onderzoeksgroep van Charlotte Hemelrijk (Emeritus professor aan de Rijksuniversiteit Groningen) gebruikt om te onderzoeken hoe zwermen van spreeuwen reageren op predatie door haviken. Met dergelijk onderzoek kunnen we observaties uit het veld goed aanvullen, want dergelijk veldwerk is natuurlijk heel pittig en tijdrovend! Dat gezegd hebbende, is er natuurlijk niets zo indrukwekkend als echte beelden van dit prachtige fenomeen:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#aapjes-met-gedrag",
    "href": "Modellen/zwermen.html#aapjes-met-gedrag",
    "title": "16  Zwermen en foerageren",
    "section": "16.4 Aapjes met gedrag",
    "text": "16.4 Aapjes met gedrag\nIn hoofdstuk Hoofdstuk 13 hebben we de basis geleerd van individual-based modellen, maar hebben we vooral gekeken naar groeiende populaties op een grid. Hoewel dergelijke grids veel technische voordelen hebben (een grid is heel handig als je snel wilt bepalen wie er “naast” iemand zit), is een echt ecosysteem natuurlijk niet in hokjes opgedeeld. Nu we hierboven individuen iets meer vrijheid hebben gegeven, kunnen we wellicht ook meer “gedragsregels” toevoegen. Laten we dit eerst doen met een simpel model van aapjes die naar fruit zoeken.\n\n\n\nOverzicht van een individual based model van aapjes die naar eten zoeken.\n\n\nLaten we een groot grasveld voorstellen, waarin zich individuele aapjes bevinden. Wederom schrijven we het systeem op in pseudocode:\nVoor elke aap in de simulatie:\n\nAls er minder dan 10 apen in de buurt zijn, en de aap heeft geen enorme honger, dan rent deze terug naar de groep.\nAls een aap honger heeft, en er zijn genoeg apen in de buurt, loopt deze een willekeurige kant op om te zoeken naar fruit.\nAls een aap 6 stukken fruit heeft gevonden, blijft de aap zitten en gaat eten. Zolang de aap aan het eten is, gaat deze niet op zoek naar de groep of naar meer eten.\n\n\n\n\n\n\n\nOpmerking\n\n\n\nNu je een paar keer pseudocode hebt gezien, begrijp je misschien waarom dit handig is. Als wetenschapper is het belangrijk om goed te communiceren hoe je onderzoek precies is opgezet, maar we willen niet altijd door hele stukken code moeten lezen. Het doel van pseudocode is om deze precies genoeg te maken, zodat iemand anders het zou kunnen reproduceren (eventueel in een andere programmeertaal!). De resultaten van zo’n computermodel zouden namelijk niet van de programmeertaal moeten afhangen, maar van de aannames die gedaan worden.\n\n\nZoals je in de bovenstaande omschrijving kan lezen, zal niet elk aapje hetzelfde doen. Aapje 1 t/m 5 hebben veel buur-aapjes en voelen zich veilig. Omdat ze ook geen honger hebben, blijven ze zitten. Aapje 6 heeft ook geen honger, maar voelt zich niet veilig, en rent terug naar de groep. Aapje 7 heeft echter veel honger, en zal dus (eventueel met gevaar voor eigen leven) naar eten blijven zoeken. Door deze gedragsregels een lange tijd te herhalen, kunnen we onderzoeken hoe onze virtuele aapjes naar eten zoeken, en hoe ze groepjes vormen.\n\n\n\n\n\nMet een dergelijk model kun je heel goed biologisch onderzoek doen (je kan heel veel simulaties tegelijk runnen, en je verstoord alleen virtuele apen!). Heel leuk onderzoek is bijvoorbeeld gedaan door Daniel van der Post, die heeft laten zien dat verschillende apengroepen in dezelfde omgeving hele andere voedselculturen kunnen ontwikkelen1. In het werkcollege gaan jullie met deze simulatie aan de slag, en bestuderen hoe emergente eigenschappen bepalen hoe veel fruit deze aapjes vinden. Natuurlijk kan je allerlei gedrag aan een dergelijk model toevoegen: vlooien, vechten, opvoeden, en ga zo maar door. Deze modellen kunnen dus een hele efficiënte (snel, goedkoop) en niet-verstorende manier zicajn om gedrag te bestuderen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#parameter-sweeps",
    "href": "Modellen/zwermen.html#parameter-sweeps",
    "title": "16  Zwermen en foerageren",
    "section": "16.5 Parameter-sweeps",
    "text": "16.5 Parameter-sweeps\nIn de hoofdstukken over het Lotka-Volterra predator-prooi model heb je kennis gemaakt een bifurcatie-diagram (Figuur 4). Door de parameter \\(K\\) te varieren, zagen we twee belangrijke overgangen (bifurcaties): eerst een overgang van alleen prooi naar een stabiele samenleving van predator en prooi, en dan een tweede overgang naar oscillerende predator-prooi populaties (Hopf bifurcatie). Computermodellen zoals de IBM van de aapjes hierboven bevatten vaak erg veel parameters: hoe snel eten de aapjes, hoeveel aapjes moeten er in de buurt zijn zodat een aapje zich veilig voelt, hoeveel eten ligt er in de omgeving, etc. Zodoende is het vaak belangrijk om een zogeheten parameter-sweep te doen, waarbij je vele parameters systematisch bestudeert en de uitkomst classificeert. Op deze manier kun je enerzijds bepalen of het gedrag van je model niet maar alleen voorkomt voor hele specifieke parameters (en dus wellicht in werkelijkheid nauwelijks voorkomt) en andererzijds bepalen welke parameters het meest belangrijk zijn voor hoe het model zich gedraag. Als je bijvoorbeeld twee parameters varieert, kun je deze uitkomsten bijvoorbeeld opslaan in een grote tabel waarbij de rijen de ene parameter zijn, en de kolommen de andere (Figuur 16.3).\n\n\n\n\n\n\nFiguur 16.3: Een hypothetisch voorbeeld van een parameter sweep van 2 parameters, en een heatmap visualisatie van de resultaten.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#foeragerende-mieren",
    "href": "Modellen/zwermen.html#foeragerende-mieren",
    "title": "16  Zwermen en foerageren",
    "section": "16.6 Foeragerende mieren",
    "text": "16.6 Foeragerende mieren\nAls het gaat om foerageren, lijken mieren een stuk georganiseerder dan de aapjes uit de bovenstaande simulatie. Ze rennen niet maar zo een kant op, maar volgen elkaar netjes van/naar een voedselbron. Echter doen mieren dat niet altijd door elkaar te zien (sterker nog, sommige mieren zijn volledig blind!). In plaats daarvan ruiken ze elkaars feromonen, die bijvoorbeeld aangeven waar het voedsel ligt, waar het nest is, of waar er gevaar dreigt. Hoewel dit meestal heel goed werkt, kun je ook een zogeheten “mierenkringen” ant mills krijgen, waar mieren voor eeuwig in rondjes achter elkaar aan lopen (soms net zo lang tot ze van uitputting dood gaan!).\n\n\n\n\n\n\n\n\n\nMieren vormen paadjes naar/van het eten door elkaars feromonen te volgen…\n\n\n\n\n\n\n\n.. maar kunnen daardoor ook in een zogeheten ant-mill terecht komen!\n\n\n\n\n\nDus, een belangrijke verschil met de aapjes is dat de mieren niet direct elkaar zien, maar feromonen. Mieren laten deze feromonen achter, maar deze feromonen worden ook afgebroken of verdunnen. Zo onstaat er dus een interessante interactie van de mieren naar de omgeving, en van de omgeving naar de mieren. Diffusie van stofjes is een concept waar we in het volgende hoofdstuk nog meer naar zullen kijken. Maar voor nu, als we deze componenten samenbrengen in een simulatie, zien we inderdaad dat mieren niet alleen prachtige sporen vormen, maar ook de bovengenoemde mierenkringen kunnen vormen:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#opgaven",
    "href": "Modellen/zwermen.html#opgaven",
    "title": "16  Zwermen en foerageren",
    "section": "16.7 Opgaven",
    "text": "16.7 Opgaven\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet op: dit hoofdstuk heeft slechts 1 opgave. Echter is het wel belangrijk dat je de vraag maakt, want de resultaten sla je op in een tabel die je bij het onderdeel Statistiek verder zal analyseren.\nDaarnaast begin je vandaag ook aan het mini-project, waarbij je met een groep samenwerkt om zorgvuldig verslag te doen van een uitgebreide werkcollegevraag. Hiervoor schrijf je een korte introductie, maak en beschrijf je zorgvuldig figuren, en schrijf je vervolgens een wetenschappelijke conclusie. Zorg er dus voor dat je tijdens dit werkcollege met je groepsgenoten het project bespreken en nadenkt over de taakverdeling.\n\nOefening 16.1 (Aapjes die gele pixels eten) \n\n\n\n\n\n\n\nAfbeelding gegenereerd met ChatGPT4-o, November 2024\n\n\nIn deze opgaven kijken we naar het individual-based model van aapjes die naar fruit zoeken, zoals besproken in dit hoofdstuk. De aapjes volgen de volgende regels:\n\nAls er minder dan 10 apen in de buurt zijn, ren terug naar de groep\nAls er genoeg apen in de buurt zijn, loop een willekeurige kant op om te zoeken naar fruit\nAls je 6 stukken fruit hebt gevonden, blijf zitten waar je zit en ga eten. Eet per tijdstap een x-aantal stukken fruit, gegeven door de parameter “eet-snelheid”. Pas als je klaar bent met eten ga je weer terug naar de groep.\n\nIn de simulatie wordt bijgehouden hoeveel fruit de aapjes (in totaal) hebben gevonden. De aapjes eten standaard 3 stukken fruit per tijdstap, (dus eten voor 2 tijdstappen).\n\nWacht 1000 tijdstappen. Waarom neemt de totale hoeveelheid gevonden fruit na een tijdje niet meer toe?\nVorm met andere studenten groepjes van 2. Kies een hogere óf lagere eetsnelheid. Herhaal je experiment 5 keer en schrijf iedere keer op hoeveel fruit er is gevonden na 1000 tijdstappen. Bekijk ook goed hoe de aapjes zich over het veld bewegen.\nKies een andere eetsnelheid, en herhaal weer 5 keer je experiment. Zie je verschillen? Had je dit resultaat verwacht?\nVergelijk je resultaten ook met een ander groepje. Probeer je ondervindingen biologisch uit te leggen.\nBewaar je resultaten in een tabel. Deze ga je in het onderdeel ‘Statistiek’ bestuderen om te kijken of je resultaten betrouwbaar zijn, of dat het misschien toch toeval is.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#terminologie",
    "href": "Modellen/zwermen.html#terminologie",
    "title": "16  Zwermen en foerageren",
    "section": "16.8 Terminologie",
    "text": "16.8 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nDiscrete variabelen\nDiscrete variables\nVariabelen die niet alle waarden kunnen innemen, maar alleen waarden met een vaste afstand. Meestal heeft dit simpelweg de vorm 1,2,3, etc., maar je zou er ook voor kunnen kiezen om alleen met tienvouden te werken ( 1,10,100,1000) of om ook negatieve getallen te gebruiken (-10,-9,-8)\n\n\nContinue variabelen\nContinuous variables\nVariabelen die alle numerieke waarden in een bepaald bereik kunnen innemen. Bijvoorbeeld alle waarden tussen 0 en 1 of alle waarden tussen \\(-\\infty\\) en \\(\\infty\\). Tussen 0 en 1 zitten oneindig veel waarden, en tussen \\(-\\infty\\) en \\(\\infty\\) zitten ook oneindig veel waarden. (eigenlijk zou je dus kunnen stellen dat sommige oneindigheden groter zijn dan andere oneindigheden!)\n\n\nDiscrete ruimte\nDiscrete space\nDe gemodelleerde ruimte is opgedeeld in vaste afstanden, zoals bijvoorbeeld op een grid van vierkanten waar ieder punt 4 of 8 buren heeft (afhankelijk van of je de diagonale buren meetelt). Ook een hexagonaal patroon (zoals een bijenkorf) is een discrete ruimte, waarbij iedere hexagon 6 buren heeft.\n\n\nContinue ruimte\nContinuous space\nDe gemodelleerde ruimte heeft geen vaste posities, waardoor punten, eiwitten, individuen, etc. elke positie in kunnen nemen. Dit geeft vaak vloeiende bewegingen, maar is een stuk moeilijker voor je computer om door te rekenen!\n\n\nPseudocode\nPseudocode\nEen verbale omschrijving van wat een computerprogramma doet (en hoe deze dat doet!), zonder ons druk te maken over de technische aspecten zoals het gebruik van de juiste syntax, de functienamen, of alle komma’s op de goede plek staan, etc.\n\n\nEmergente eigenschappen\nEmergent properties\nEen eigenschap van een systeem die ontstaat door de interactie tussen de onderdelen, en die niet zichtbaar is in de losse onderdelen zelf. Bijvoorbeeld: individuele neuronen kunnen niet “denken”, maar een groot aantal neuronen met de juiste verbindingen kunnen deze zin interpreteren ook al is de zin veel te lang en staat er te weinig interpunctie in.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/zwermen.html#footnotes",
    "href": "Modellen/zwermen.html#footnotes",
    "title": "16  Zwermen en foerageren",
    "section": "",
    "text": "Van der Post, D. J., & Hogeweg, P. (2008). Diet traditions and cumulative cultural processes as side-effects of grouping. Animal Behaviour, 75(1), 133-144.↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Zwermen en foerageren</span>"
    ]
  },
  {
    "objectID": "Modellen/reactiediffusie.html",
    "href": "Modellen/reactiediffusie.html",
    "title": "17  Reacties en diffusie",
    "section": "",
    "text": "17.1 Van reactievergelijking naar ODEs\nMet ODEs hebben we ons tot nu toe vooral gericht op het modelleren van populaties. Echter zouden we ook interacties op moleculair niveau kunnen beschrijven met ODEs. Neem bijvoorbeeld het “centrale dogma” van de biologie:\n\\[\\begin{align*}\n    \\mathrm{DNA} & \\rightarrow \\mathrm{mRNA} \\rightarrow \\mathrm{Eiwit}\n\\end{align*}\\]\nLaten we voor het gemak aannemen dat het DNA in de cel simpelweg aanwezig is, en dat er met een constante snelheid (\\(e\\)) mRNA wordt afgeschreven. Dit mRNA wordt met een bepaalde snelheid (\\(v\\)) vertaald naar eiwit, en het breekt langzaam af \\(d\\). Ook het eiwit breekt langzaam af (\\(\\delta\\)). Zo kunnen we het bovenstaande diagram dus in 2 hele eenvoudige ODEs uitdrukken:\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}M}\n{\\mathrm{d}t}}{\\mathrm{d}M/\\mathrm{d}t}\n{\\mathrm{d}M/\\mathrm{d}t}\n{\\mathrm{d}M/\\mathrm{d}t}\n&= e - dM \\\\\n    \n\\mathchoice{\\frac{\\mathrm{d}E}\n{\\mathrm{d}t}}{\\mathrm{d}E/\\mathrm{d}t}\n{\\mathrm{d}E/\\mathrm{d}t}\n{\\mathrm{d}E/\\mathrm{d}t}\n&= vM - \\delta E\n\\end{align*}\\]\nHet eiwit zorgt er wellicht voor dat de cel meer glucose op kan nemen. Hiervoor kunnen we een derde vergelijking toevoegen:\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}M}\n{\\mathrm{d}t}}{\\mathrm{d}M/\\mathrm{d}t}\n{\\mathrm{d}M/\\mathrm{d}t}\n{\\mathrm{d}M/\\mathrm{d}t}\n&= e - dM \\\\\n    \n\\mathchoice{\\frac{\\mathrm{d}E}\n{\\mathrm{d}t}}{\\mathrm{d}E/\\mathrm{d}t}\n{\\mathrm{d}E/\\mathrm{d}t}\n{\\mathrm{d}E/\\mathrm{d}t}\n&= vM - \\delta E\\\\\n    \n\\mathchoice{\\frac{\\mathrm{d}G}\n{\\mathrm{d}t}}{\\mathrm{d}G/\\mathrm{d}t}\n{\\mathrm{d}G/\\mathrm{d}t}\n{\\mathrm{d}G/\\mathrm{d}t}\n&= pE - \\kappa G\\\\\n\\end{align*}\\]\nOm de cirkel volledig rond te maken, kunnen we verder nog stellen dat glucose de expressie van het gen bepaalt. Om ervoor te zorgen dat de genexpressie desondanks gelimiteerd is, maken we gebruik van een een Hill-functie ( hier uitgelegd):\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}M}\n{\\mathrm{d}t}}{\\mathrm{d}M/\\mathrm{d}t}\n{\\mathrm{d}M/\\mathrm{d}t}\n{\\mathrm{d}M/\\mathrm{d}t}\n&= \\frac{eG}{G+h} - dM \\\\\n    \n\\mathchoice{\\frac{\\mathrm{d}E}\n{\\mathrm{d}t}}{\\mathrm{d}E/\\mathrm{d}t}\n{\\mathrm{d}E/\\mathrm{d}t}\n{\\mathrm{d}E/\\mathrm{d}t}\n&= vM - \\delta E\\\\\n    \n\\mathchoice{\\frac{\\mathrm{d}G}\n{\\mathrm{d}t}}{\\mathrm{d}G/\\mathrm{d}t}\n{\\mathrm{d}G/\\mathrm{d}t}\n{\\mathrm{d}G/\\mathrm{d}t}\n&= pE - \\kappa G\\\\\n\\end{align*}\\]\nDe parameter \\(h\\) is de half-waarde constante voor de transcriptie: als er precies \\(h\\) glucose in de cell aanwezig is, is de MRNA-transcriptie half-maximaal. De maximale transcriptie is \\(e\\), en als er 0 glucose is, is er geen expressie. Als we de ODEs doorrekenen zonder glucose, dan blijven inderdaad alle concentraties 0 (Figuur 17.2 links). Als we echter een heel klein beetje glucose toevoegen, dan ontstaat er een evenwicht met veel glucose in de cel (Figuur 17.2 rechts).\nCode\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\npar(mfrow=c(1,2),mar=c(3,3,3,3))\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), { \n    \n    dM &lt;- e*G/(G+h) - d*M\n    dE &lt;- v*M - delta*E\n    dG &lt;- p*E - kappa*G\n    \n    return(list(c(dM, dE, dG)))  \n  }) \n}\n\np &lt;- c(e=1,h=2,d=0.3,v=0.3,delta=0.05,p=0.4,kappa=0.2) #Parameters\ns &lt;- c(M=0.0,E=0.0,G=0.00) #Starting population sizes\nrun(tmax=200,ymin=0.0,ymax=1) \ntitle(\"Begin-concentratie G: 0.00\")\ns &lt;- c(M=0.0,E=0.0,G=0.01) #Starting population sizes\nrun(tmax=200) \ntitle(\"Begin-concentratie G: 0.01\")\n\n\n\n\n\n\n\n\nFiguur 17.2: Met R berekende oplossingen van simpele ODEs van mRNA, eiwit, en glucose in de cel.\nSamengevat zien we dus dat, met de gegeven parameters, een stabiele hoeveelheid glucose (en mRNA/eiwit) kan ontstaan in de cel. Dit evenwicht wordt alleen bereikt als er een klein beetje glucose aanwezig is in de cel. Een cel die geen glucose detecteert zal dus geen genen tot expressie brengen. Maar wellicht diffundeert er een beetje glucose naar binnen vanuit de omgeving, of van een nabij gelegen cel. Om deze processen te modelleren, kunnen we gebruik maken van reactie-diffusiesystemen.\nReactie-diffusiesystemen beschrijven niet alleen de reactiesnelheden van processen (zoals hierboven), maar ook hoe ze door de ruimte diffunderen. Zo kun je modelleren hoe een chemisch signaal door een weefsel verspreidt, of hoe het evenwicht tussen verspreiding door diffusie en de reactiesnelheden eventuele patronen oplevert. Deze modellen worden bijvoorbeeld gebruikt om de verspreidingspatronen van dieren en planten te modelleren, hoe “golven” van ziekteverwekkers zich door een populatie mensen verspreiden (denk aan Covid!), of hoe actiepotentialen zich van de sinusknoop naar de hartpunt (apex) bewegen. We zien reactie-diffusiesystemen dus overal terug in de biologie.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Reacties en diffusie</span>"
    ]
  },
  {
    "objectID": "Modellen/reactiediffusie.html#diffusie-tussen-hokjes",
    "href": "Modellen/reactiediffusie.html#diffusie-tussen-hokjes",
    "title": "17  Reacties en diffusie",
    "section": "17.2 Diffusie tussen hokjes",
    "text": "17.2 Diffusie tussen hokjes\nNu we een beeld hebben gekregen van hoe we simpele reacties kunnen modelleren met ODEs, gaan we beginnen met het modelleren van een diffusie-proces. Laten we eerst alleen diffusie bekijken (m.a.w. zonder reacties). Stel je voor dat we midden op een gel een druppel verf laten vallen. Langzaam diffundeert de verf door de gel heen. De meest eenvoudige manier om dit te modelleren, is om wederom een grid voor te stellen, waarbij het middelste punt de initiële hoeveelheid verf bevat (zie Figuur 17.3, in stap 0 is de concentratie in het midden “4”). Alle andere hokjes bevatten geen verf, dus is de hoeveelheid verf 0. Om een diffusie-proces te simuleren, stellen we dat een bepaalde hoeveelheid (bijv. 10%) van de verf naar de vier directe buur-cellen diffundeert. Zodoende is er vier keer 0.4 (10% van 4) uit het middelste hokje verdwenen, en hebben de hokjes eromheen nu een hoeveelheid verf van 0.4 (Figuur 17.3, stap 1). Na 3 stappen diffusie is de vlek al wat meer uitgebreid (Figuur 17.3, stap 3)1.\n\n\nCode\n# Laad het viridis package (quietly zorgt ervoor dat er niets geprint word)\nlibrary(viridis,quietly = T)\n\npar(mfrow=c(2,2),mar=c(2,2,2,2))\n\n# Parameters\ngrid_size &lt;- 8\ninitial_value &lt;- 4\ndiffusion_rate &lt;- 1/10\niterations &lt;- 4\n\n# Leeg grid maken\ngrid &lt;- matrix(0, nrow = grid_size, ncol = grid_size)\n\n# Middelste punt een waardeg even\nmid &lt;- ceiling(grid_size / 2) +1\ngrid[mid, mid] &lt;- initial_value\n\n# Functie voor diffusie \ndiffuse &lt;- function(grid, rate) {\n  new_grid &lt;- grid\n  for (i in 2:(nrow(grid) - 1)) {\n    for (j in 2:(ncol(grid) - 1)) {\n      vec &lt;- c(grid[i-1, j], grid[i+1, j], grid[i, j-1], grid[i, j+1])\n      sumvec &lt;- sum(vec,na.rm=T)\n      new_grid[i, j] &lt;- grid[i, j] + \n        rate * (sumvec - 4 * grid[i, j])\n    }\n  }\n  return(new_grid)\n}\n\n# Functie voor het plotten\nplot_grid &lt;- function(grid, iteration) {\n  plot(1:nrow(grid), 1:ncol(grid), type = \"n\", xlab = \"\", ylab = \"\", axes = FALSE, \n       xlim = c(1, grid_size), ylim = c(1, grid_size))\n  \n  # Grijze gridlijnen\n  abline(h = 0:grid_size, v = 0:grid_size, col = \"grey\", lty = 2) \n  \n  # Normaliseer waarden tussen 0 en 1\n  norm_grid &lt;- (grid - min(grid)) / (1 - min(grid))\n  \n  # Viridis kleuren gebruiken\n  colors &lt;- viridis(120)[1:100]\n  colors[1] &lt;- \"#CCCCCC\"\n  # Nummbers op de goede plek zetten \n  for (i in 2:(nrow(grid)-0)) {\n    for (j in 2:(ncol(grid)-0)) {\n      color_index &lt;- 1+38*min(100,log10(floor(norm_grid[i, j] * 100) + 1))  # Map to color scale\n      text(i - 0.5, j - 0.5, round(grid[i, j], 2), col = colors[color_index], cex = 0.9, font=2)  # Tekst op goede plek\n    \n    }\n  }\n  title(paste(\"Stap \", iteration-1))\n}\n\n# Herhaal plotten, diffusie, plotten, diffusie, etc.\nfor (iter in 1:iterations) {\n  plot_grid(grid, iter)\n  grid &lt;- diffuse(grid, diffusion_rate)\n}\n\n\n\n\n\n\n\n\nFiguur 17.3: Diffusie tussen hokjes van een concentratie van een hypothetisch stofje.\n\n\n\n\n\nEn zo eenvoudig kan het zijn: door de ruimte in hokjes op te delen kunnen we heel eenvoudig een diffusie-proces simuleren. Hoe kleiner de hokjes zijn, hoe preciezer we de lokale concentraties van de stofjes kunnen simuleren. Echter wordt het dan ook steeds zwaarder voor de computer om alle hokjes door te rekenen. Om deze beperking te omzeilen, kunnen partiële differentiaalvergelijkingen (PDEs) worden gebruikt, waarbij ruimte niet discreet maar continu is (“oneindig kleine hokjes”). PDEs lijken op ODEs, maar waar ODEs alleen tijd als onafhankelijke variabele gebruiken, hebben PDEs zowel tijd als ruimte als onafhankelijke variabelen. Met de computer benaderen we PDE door de hokjes voldoende klein te houden (net zoals ODEs in grind tijd in kleine stapjes opdeelt).\nDe beste manier om het effect van diffusie weer te geven, is het toepassen op een afbeelding. In Figuur 17.4 zie je dat diffusie vooral het effect heeft dat de afbeelding minder en minder patroon bevat, totdat alle pixels dezelfde kleur hebben. Misschien verbaast het je niet dat het vervagen van foto’s met Photoshop vaak precies op deze manier werkt!\n\n\n\n\n\n\nFiguur 17.4: Diffusie van een afbeelding van een hond.\n\n\n\nWe kunnen de eerder genoemde cellen met ODEs voor mRNA, eiwit, en glucose, ook in hokjes stoppen, en het effect van diffusie tussen buur-cellen bestuderen. We kunnen bijvoorbeeld 1 cel in het midden een boel glucose geven, en alle andere cellen 0 glucose. Zonder diffusie zie je dat alleen de cel in het midden eiwitten tot expressie brengt. Door echter een beetje diffusie van glucose toe te passen, zien we dat het signaal zich over het weefsel verspreidt. Net als bij het plaatje van de hond, zien we dus dat diffusie het initiële patroon (een hele duidelijke stip in het midden) verzacht, totdat er geen patroon meer is en alle cellen precies hetzelfde zijn.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Reacties en diffusie</span>"
    ]
  },
  {
    "objectID": "Modellen/reactiediffusie.html#activerende-en-remmende-eiwitten",
    "href": "Modellen/reactiediffusie.html#activerende-en-remmende-eiwitten",
    "title": "17  Reacties en diffusie",
    "section": "17.3 Activerende en remmende eiwitten",
    "text": "17.3 Activerende en remmende eiwitten\nWe hebben nu een beeld gekregen van reactie-diffusiesystemen, maar tot nu toe lijken ze patronen alleen maar tegen te werken. Maar reactie-diffusiesystemen kunnen weldegelijk prachtige patronen generen, zo ontdekte Alan Turing in 1952. Turing vroeg zich af of diffusie ook de oorzaak kon zijn van bepaalde patronen. Hij stelde zich voor dat in een weefsel twee eiwitten tot expressie komen: activators (\\(A\\)) en inhibitors (\\(I\\)). De activator (\\(A\\)) verhoogt de expressie van beide eiwitten, en de inhibitor verlaagt deze. Dit scenario kunnen we omschrijven in een simpel systeem van ODEs:\n\\[\\begin{align}\n    \n\\mathchoice{\\frac{\\mathrm{d}A}\n{\\mathrm{d}t}}{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n&= k_AA - k_II - dA^2 \\\\\n    \n\\mathchoice{\\frac{\\mathrm{d}I}\n{\\mathrm{d}t}}{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n&= k_AA - k_II - dI\n\\end{align}\\]\nWaarbij \\(A\\) de activator is, \\(I\\) de inhibitor, \\(k_A\\) de activatie-constante, \\(k_I\\) de inhibitie-constante, en \\(d\\) de afbraak van de eiwitten. Omdat zelf-activatie oneindige exponentiële groei kan opleveren, nemen we aan dat de afbraak van de activator (per molecuul) toeneemt met de dichtheid. Voor de inhibitor nemen we normale (constante) afbraak aan.\nZoals jullie hebben geleerd kunnen we een dergelijk simpel ODE-systeem analyseren met nullcline analyse. Laten we ervoor kiezen om een faseruimte te tekenen met \\(I\\) op de y-as, en \\(A\\) op de x-as. Zodoende willen we dus nullclines vinden waarbij \\(I\\) wordt uitgedrukt als functie van \\(A\\). Laten we eerste de nullcline(s) voor \\(A\\) bepalen:\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}A}\n{\\mathrm{d}t}}{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n&= k_AA - k_II - dA^2 = 0 \\\\\n    k_II &= k_AA - dA^2 = A(k_A-dA) \\\\\n    I &= \\color{blue} \\frac{A(k_A-dA)}{k_I} \\\\\n\\end{align*}\\]\n\\(A\\) heeft dus één enkele nullcline: een bergparabool met nullpunten \\(A=0\\) en \\(A=\\frac{k_a}{d}\\). De nullcline(s) voor \\(I\\) zijn:\n\\[\\begin{align}\n    \n\\mathchoice{\\frac{\\mathrm{d}I}\n{\\mathrm{d}t}}{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n&= k_AA - k_II - dI = 0 \\\\\n    k_II - dI &= k_AA \\\\\n    I(k_I - d) &= k_AA \\\\\n    I &= \\color{red} \\frac{k_AA}{k_I - d} \\\\\n\\end{align}\\]\n\\(I\\) heeft dus ook één nullcline. \\(A\\) verschijnt alleen in de teller van de breuk, dus deze nullcline neemt lineair toe met \\(A\\) (met hellingshoek \\(\\frac{k_A}{k_I - d}\\)). Naar verwachting vinden we dus een parabool en een lineaire functie in onze faseruimte. Als we de faseruimte tekenen met Grind.R, is dat inderdaad wat we zien (Figuur 17.5). Aan dit vectorveld kunnen we ook aflezen dat er twee evenwichten zijn: een instabiel evenwicht wanneer er geen \\(A\\) en \\(I\\) is, en een stabiel evenwicht bij een bepaalde hoeveelheid \\(A\\) en \\(I\\). Het eerste trajectorie in Figuur 17.5 laat zien dat de eiwitten inderdaad naar het stabiele evenwicht kunnen gaan. Als je echter met veel inhibitors begint, zien we beide concentraties juist hard afnemen. Hoewel het evenwicht bij \\((0,0)\\) instabiel is, zijn negatieve concentraties niet biologisch relevant, en kunnen we voor de eenvoud aannemen dat deze concentraties naar \\(0\\) gaan.\nAfhankelijk van de initiële conditie, zien we dus dat we wel/niet expressie van de eiwitten zien. Dit wordt ook wel bistabiliteit genoemd. In een systeem met bistabiliteit heeft de geschiedenis van een systeem (waar het systeem voorheen was) invloed op de verdere verloop van het systeem (waar het naar toe gaat). Dergelijke effecten zijn waargenomen voor de genexpressie van bacteriën, en zijn bovendien erg belangrijk voor natuurbehoud. Het kan namelijk erg moeilijk kan zijn om een eenmaal omgeslagen ecosysteem weer terug te krijgen in de “gezonde” toestand. (zie ook Tip 17.1).\n\n\n\n\n\n\n\n\nFiguur 17.5: De uitkomst van het activator-inhibitor systeem hangt af van de initiële conditie\n\n\n\n\n\n\n\n\n\n\n\nTip 17.1: Verdieping: hysterese in ecosystemen\n\n\n\n\n\nAls een systeem meerdere evenwichten heeft, en je verandert langzaam de condities, dan kan er een punt zijn dat het van het ene naar het andere evenwicht omklapt. Dergelijke “tipping points” worden op alle schalen gezien: van de expressie van het lac-operon in E. coli, tot hele ecosystemen. In de onderstaande foto zie je bijvoorbeel twee bijna identieke meren, maar één van de meren is door eutroficatie (aanwezigheid van te veel voedingsstoffen) omgeslagen naar een ongezonde vertroebelde toestand. Een dergelijke vertroebeling ongedaan maken blijkt erg lastig te zijn. Inderdaad weten we dankzij modellen dat deze systemen bistabiel zijn, zoals weergegeven met de twee kuilen waarin het balletje naar beneden kan rollen: als het balletje eenmaal in een ander minimum ligt, krijg je deze er niet zomaar meer uit! Dit fenomeen wordt hysterese genoemd.\n\n\n\n\n\n\n\nBron foto: https://passel2.unl.edu/view/lesson/bcbd3f35f2e0/2",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Reacties en diffusie</span>"
    ]
  },
  {
    "objectID": "Modellen/reactiediffusie.html#turing-patronen",
    "href": "Modellen/reactiediffusie.html#turing-patronen",
    "title": "17  Reacties en diffusie",
    "section": "17.4 Turing-patronen",
    "text": "17.4 Turing-patronen\nOke, we weten nu dus naar welke evenwichten de activators en inhibitors kunnen gaan. Laten we de variabelen \\(A\\) en \\(I\\) in hokjes stoppen, en hetzelfde lokale diffusieproces toepassen als eerder besproken. Elke tijdstap worden dus de differentiaalvergelijkingen zoals hierboven een klein stukje doorgerekend, dan een stapje diffusie, differentiaalvergelijkingen doorrekenen, diffusie, etc. We beginnen met een willekeurige hoeveelheid \\(A\\) per hokje, en zonder \\(I\\):\n\n\n\n\n\n\nAls je de simulatie hierboven een tijdje laat lopen, zul je zien dat er iets interessants gebeurt: ondanks de diffusie ontstaat een contrastrijk en stabiel patroon. Precies welk patroon je krijgt (groter/kleiner, strepen/vlekken), hangt af van de diffusie-snelheden en de activatie-/inhibitieconstanten (zie een paar voorbeelden in Figuur 17.6).\n\n\n\n\n\n\nFiguur 17.6: Turingpatronen gegenereerd met verschillende parameters van bovenstaand model.\n\n\n\nMet de bovenstaande simulatie zul je ook kunnen zien dat niet elke simulatie Turing-patronen oplevert. Als je bijvoorbeeld de diffusie van de activator verhoogt krijg je geen patronen. Hoe het ook zij: Turing slaagde er in om een proces te vinden waarbij, met de juiste parameter-voorwaarden, diffusie niet patronen uitvaagt maar juist genereert! Als de diffusie niet in alle richtingen even snel is (in di), kan je ook strepen krijgen die verdacht veel op de vacht van een zebra lijken:\n\n\n\n\n\n\n\nDit is dan ook waarom Alan Turing ooit stelde:\n\n“The stripes are easy, but what about the horse part?” – Alan Turing\n\nVele decennia later is er ook veel gemodelleerd aan “the horse part”: hoe krijg je van een enkele cel een complex organisme met de juiste verdeling van weefsels en vingers? Het blijkt dat niet alleen de vlekken op de vacht, maar ook de ontwikkeling van planten en dieren veelal met Turing patronen verklaard kan worden. Zie bijvoorbeeld onderstaande afbeeldingen uit onderzoek van James Sharpe, wat aantoont hoe vergelijkbare activatie-en-inhibitie interacties vorm kan geven aan complexe organismen.\n\n\n\n\n\n\n\n\n\n\n\n(a) Onderzoek van Sharpe et al. over hoe cellen differentiëren in een 1D weefsel van cellen\n\n\n\n\n\n\n\n\n\n\n\n\n\n(b) Onderzoek van Sharpe et al. over hoe de aanleg van vingers tijdens de ontwikkeling wordt bepaald door een Turing-mechanisme\n\n\n\n\n\n\n\nFiguur 17.7: Turing patronen zijn ook relevant voor morphologie en ontwikkeling!",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Reacties en diffusie</span>"
    ]
  },
  {
    "objectID": "Modellen/reactiediffusie.html#niet-alle-repetitieve-biologische-patronen-zijn-turing-patronen",
    "href": "Modellen/reactiediffusie.html#niet-alle-repetitieve-biologische-patronen-zijn-turing-patronen",
    "title": "17  Reacties en diffusie",
    "section": "17.5 Niet alle repetitieve biologische patronen zijn Turing patronen",
    "text": "17.5 Niet alle repetitieve biologische patronen zijn Turing patronen\nZoals we hierboven hebben gezien, ontstaan Turing-patronen door een combinatie van lokale activatie en inhibitie op afstand, wat niet alleen betrokken is bij vachtpatronen, maar ook bij de aanleg van het lichaam zelf. Heel recent is zelfs gevonden dat Turing-mechanismen een rol spelen bij de ontwikkeling van vingerafdrukken.\n\n\n\n\n\n\n\n\nPatronen van struikgewas kun je goed met Turing-mechanismen verklaren\n\n\n\n\n\n\n\nFruitvliegjes hebben tijdens de ontwikkeling ook “streepjes”, maar dit is geen Turing-patroon! In plaats daarvan is er een specifieke cascade van genen die het lijf in steeds kleinere stukjes onderverdeelt\n\n\n\n\n\n\nFiguur 17.8: Biologie heeft veel patronen, maar niet alles hoeft met een Turing-patroon verklaard te worden!\n\n\n\nOok veel andere biologische processen ondergaan vergelijkbare interacties. In droge gebieden houden planten samen lokaal water vast, maar onttrekken daardoor water uit de omgeving op afstand. Ook dit levert patronen op die lijken op Turing-patronen. Maar let op: hoewel Turing-mechanismen veel patronen in de natuur kunnen verklaren, betekent dit niet dat deze patronen ook door Turing-mechanismen zijn ontstaan. Zo is er bijvoorbeeld veel onderzoek gedaan naar mogelijke Turing-mechanismen in de ontwikkeling van fruitvliegjes, maar dit patroon bleek op een geheel andere manier te vormen (Figuur 17.8). Kortom: hoewel Turing patronen een terugkerend principe lijken te zijn binnen de biologie, is niet ieder “vlekken-of-strepen-patroon” ontstaan door Turing mechanismen. Zo kan je bijvoorbeeld op een grid van struikgewas (groen) of droge aarde (lichtbruin) ook vergelijkbare patronen krijgen door een simpele “meerderheidsregel”. Dat wil zeggen: als er meer planten in de buurt zijn dan verandert een grid-punt in een plant, en als er meer droge aarde in buurt is, dan verandert een grid-punt in droge aarde. Het resultaat is een patroon wat ook heel erg lijkt op het struikgewas in Figuur 17.8:\n\n\n\n\n\n\n\nOok bovenstaand mechanisme genereert iedere keer dat je het uitvoert (dubbelklik!) een nieuw uniek patroon. Hoewel we in ODEs en het lab soms vergeten dat ze bestaan, zijn patronen in de biologie heel belangrijk. Hoewel bijvoorbeeld de oceaan relatief goed gemengd lijkt, is zelfs hier soms sprake van duidelijke patronen die de biologie beïnvloeden. Patronen zijn dus wellicht helemaal niet de uitzondering!\n\n“The pattern is the default.” – Paulien Hogeweg (lecture ‘Computational biology’, 2012)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Reacties en diffusie</span>"
    ]
  },
  {
    "objectID": "Modellen/reactiediffusie.html#opgaven",
    "href": "Modellen/reactiediffusie.html#opgaven",
    "title": "17  Reacties en diffusie",
    "section": "17.6 Opgaven",
    "text": "17.6 Opgaven\n\nOefening 17.1 (Reactievergelijkingen) \nBekijk de volgende reactievergelijking van een enzymatische reactie, waarbij een enzym (\\(E\\)) een complex vormt met een substraat (\\(S\\)). Dit complex (\\(C_{ES}\\)) catalyseert de reactie naar product (\\(P\\)), waarbij het enzym weer vrij komt. Echter kan het complex ook weer uit elkaar vallen zonder reactie, en weer \\(E\\) + \\(S\\) opleveren.\n\\[\\begin{align}\n    E+S & \\quad \\underset{k_2}{\\stackrel{k_1}{\\rightleftharpoons}} \\quad C_{ES} \\quad \\xrightarrow{k_{cat}} \\quad E+P\\\\\n\\end{align}\\]\n\nStel dat we een dynamisch model van dit systeem zouden willen maken. Wat zijn de variabelen die we zouden willen modelleren? Wat zijn de parameters?\nAangenomen dat de reactiesnelheden direct proportioneel zijn aan de concentraties, is de snelheid waarmee het complex \\(C_{ES}\\) onstaat gelijk aan \\(E \\cdot S \\cdot k_1\\). Zijn er nog meer processen die de hoeveelheid complex verhogen of verlagen? Welke vergelijkingen beschrijven deze processen?\nAlle processen uit vraag b bij elkaar geven de totale snelheid waarmee complex ontstaat en/of vervalt. Met deze kennis kunnen we ODEs opstellen. Schrijf van \\(C_{ES}\\) en de andere variabelen differentiaalvergelijkingen op.\nBekijk het onderstaande Grind-model van dit systeem. Het script print hoeveel product er is ontstaan aan het begin van het reactie-proces. Schets door het script te bestuderen hoe deze initiële reactie-snelheid afhangt van de initiële substraat-concentratie. Hint: bekijk hoeveel een verdubbeling van \\(S\\) de reactiesnelheid verhoogd bij lage \\(S\\) (bijv. 0.001), en ook bij hele hoge \\(S\\) (bijv 1000).\n\n\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), { \n    \n    dE &lt;- k2*C - k1*E*S + kcat*C\n    dS &lt;- k2*C - k1*E*S\n    dC &lt;- k1*E*S - kcat*C\n    dP &lt;- kcat*C\n    \n    return(list(c(dE, dS, dC, dP)))  \n  }) \n}\n\np &lt;- c(k1=1,k2=0.2,kcat=1) #Parameters\ns &lt;- c(E=1,S=1,C=0,P=0) #Starting population sizes\nrun(tmax=10,tstep=0.1) \nstapje &lt;- run(tmax=1,ymax=3,tstep=1,timeplot=F) \ncat(paste(\"Er is in 1 stap\",stapje[\"P\"],\"product ontstaan\"))\n\n\n\nOefening 17.2 (Diffusie simuleren) \nKijk nog eens naar Figuur 17.3. De diffusie-constante die in dit figuur werd aangenomen was 0.1, dat wil zeggen, van de totaal-concentratie 4.0 in het middelste punt, diffundeert 0.4 naar elk van de buurhokjes.\nStel dat elke stap in Figuur 17.3 één minuut voorstelt, en dat je experimenteel hebt waargenomen dat na 3 minuten de verf volledig over de plaat is verspreid. Kennelijk is de diffussie in Figuur 17.3 te langzaam.\n\nTeken de begin-conditie in Figuur 17.3 na, en bepaal wat er gebeurt met een snellere diffusie-constante. Probeer een diffusie-constante van 0.2 en 0.3. Wat valt je op?\nHoe kan je er voor zorgen dat de stof beter is verspreid na 3 minuten?\n\nLokale diffusie op een grid heeft dus zijn beperkingen, vooral doordat tijdstapjes te groot kunnen zijn.\n\nLeg uit waar we dit probleem eerder hebben gezien, en waarom partiële differentiaalvergelijkingen (met “oneindig kleine hokjes”) dit probleem niet hebben.\n\n\n\nOefening 17.3 (Bijproducten) \nBacteriën produceren tijdens hun metabolisme vaak bijproducten, zoals melkzuur, alcohol, en waterstofperoxide. Hoewel lage concentraties van deze metabolieten vaak niet schadelijk zijn, kan het op den duur opbouwen in de omgeving en zo de sterftekans van de bacteriën verhogen. We bestuderen in deze opgave een eenvoudig individual-based model (IBM), dat de volgende regels volgt:\n\nPlaats een aantal individuen in het midden van een continue ruimte\nVoor elk individu:\n\nTel het aantal individuen binnen een kleine radius van een individu (a)\nTel het aantal individuen binnen een grote radius van een individu (i)\nHet individu reproduceert met kans \\(a \\cdot birth\\)\nHet individu sterft met kans \\(i \\cdot toxiciteit\\)\n\nBeweeg alle individuen een klein beetje een willekeurige kant op.\nGa terug naar stap 2.\n\n\n\n\n\n\n\n\nBestudeer de simulatie door deze een paar keer opnieuw te starten, zodat je goed kan zien wat er gebeurt.\n\nGebruik eerst de standaard parameter-waarden. Omschrijf wat hier gebeurt in termen van concepten uit dit hoofdstuk.\nControleer of dit model vergelijkbare voorwaarden heeft voor patroonvorming als in het hoofdstuk besproken.\nStel dat er ergens in de simulatie een virus uitbreekt. Kan het virus alle individuen besmetten?\nTel hoeveel groepjes je ziet, en gebruik daarna je muis om een paar groepjes weg te halen (alsof er dus idd een ernstig virus is uitgebroken). Wat gebeurt er daarna? Waarom gebeurde dit niet voor de ziekteuitbraak?\n\n\n\nOefening 17.4 (Modelkeuzes) \nJe hebt in dit cursusonderdeel al over allerlei verschillende modellen geleerd. Zoals in het introductiehoofdtuk uitgelegd, is niet elk model geschikt voor elke situatie. Als je bijvoorbeeld een goed gemengde Erlenmeyer met miljoenen bacteriële cellen modelleert, is een individual-based model met de posities van elk individu misschien niet zo nuttig. Anderzijds kun je zwerm-patronen van slijmschimmels niet modelleren met ODEs, want met ODEs is “een ruimtelijk patroon” niet een van de mogelijke uitkomsten.\nOm te oefenen met welk type model past bij welk vraagstuk, staan hieronder een aantal omschrijvingen van biologische systemen die we zouden willen modelleren. Omschrijf voor elk scenario welk type model je zou gebruiken om deze te bestuderen, en motiveer je antwoord. Denk na over het type model (differentievergelijkingen, differentiaalvergelijkingen (ODEs), individual-based models, reactie-diffusie vergelijkingen (PDEs)), maar ook over het type variabele waarmee je de toestand modelleert (discreet, continu, zie Figuur 16.1).\n\nTwee soorten bacteriën ondervinden competitie in een goed gemengde Erlenmeyer.\nTwee druppels met fluorescente eiwitten worden op een agar plaat gepipetteerd, waarbij interessante patronen ontstaan.\nIn een pas afgebrand bos komen pionierssoorten op. De eerste die zich vestigt neemt de ruimte in, waardoor er geen ruimte meer is voor anderen.\nEen populatie zooplankton in een goed-gemengd deel van de oceaan ondervindt onderlinge competitie om algen en andere voedselbronnen.\nOp de huid van een hagedis vormen zich tijdens de ontwikkeling gevlekte patronen\nEen populatie divers gekleurde konijnen wordt door havikken bejaagd\nBacteriële cellen die groeien op een agarplaat kunnen met een kleine kans muteren, en daarbij fluorescent worden\nEen morfogen diffundeert door een weefsel van cellen, en activeert daarbij verschillende genexpressiepatronen tijdens de ontwikkeling.\nDe hoeveelheid paracetamol in het bloed na inname wordt langzaam afgebroken\nNa bevruchting ontstaat een calcium-golf op het membraan van de eicel\nEen populatie van zeehonden wordt vanuit verschillende hoeken (richtingen) door orca’s belaagd",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Reacties en diffusie</span>"
    ]
  },
  {
    "objectID": "Modellen/reactiediffusie.html#terminologie",
    "href": "Modellen/reactiediffusie.html#terminologie",
    "title": "17  Reacties en diffusie",
    "section": "17.7 Terminologie",
    "text": "17.7 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nReactie-diffusie vergelijkingen\nReaction-diffusion equations\nEen type model waarbij variabelen in zowel tijd als ruimte kunnen worden gemodelleerd. Hiermee kunnen we goed onderzoek doen naar het ontstaan van patronen.\n\n\nTuring patronen\nTuring patterns\nEen zelforganiserend patroon in biologische systemen dat ontstaat door interacties tussen twee chemische stoffen die reageren en zich met verschillende snelheden verspreiden. Turing patronen ontstaan vaak door “remming op afstand” en “activatie van dichtbij”.\n\n\nHysterese\nHysteresis\nWanneer een systeem meerdere evenwichten heeft, kunnen er omslagpunten (“tipping points”) zijn waarbij het systeem van de ene naar de andere staat overslaat. Dit fenomeen wordt hysterese genoemd.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Reacties en diffusie</span>"
    ]
  },
  {
    "objectID": "Modellen/reactiediffusie.html#footnotes",
    "href": "Modellen/reactiediffusie.html#footnotes",
    "title": "17  Reacties en diffusie",
    "section": "",
    "text": "Let op: de getallen worden hier afgerond om het process te visualiseren↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Reacties en diffusie</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html",
    "href": "Modellen/exciteerbaremedia.html",
    "title": "18  Exciteerbare media",
    "section": "",
    "text": "18.1 Actiepotentialen, hoe zat dat ook alweer?\nActiepotentialen zijn kortdurende verandering in de elektrische lading over het membraan van neuronen of hartcellen (zie Figuur 18.1). Zonder prikkels is er een rustpotentiaal (fase 1), waarbij de binnenkant van de cel negatiever is geladen dan de buitenkant (onderhouden door de natrium/kalium pomp, die ATP gebruikt om drie natrium naar buiten te pompen en tegelijkertijd twee kalium naar binnen). Kleine fluctuaties van het membraanpotentiaal worden onmiddelijk hersteld tot de rustpotentiaal. Als er echter een groot genoege prikkel is (fase 2), openen er spanningsafhankelijke natriumkanalen, waardoor er door de hogere concentratie van natrium van buiten tov binnenin de cel natrium de cel in stroomt. Nu is er sprake een positieve feedback: de potentiaal neemt nog verder toe en wordt zelfs even positief (de binnenkant van de cel heeft een hogere lading dan de buitenkant). De fase tot dit punt, wordt de depolarisatiefase genoemd (fase 3). Kort na de depolarisatie sluiten de natriumkanalen en openen er spanningsafhankelijke kaliumkanalen. Omdat voor kalium de concentratie in de cel juist hoger is dan daarbuiten stromen kaliumionen juist de cel uit, waardoor de binnenkant van de cel weer negatiever wordt. Dit heet repolarisatie (fase 4). Na een kleine doorschieter naar beneden (hyperpolarisatie, fase 5), herstelt de rustpotentiaal.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#actiepotentialen-hoe-zat-dat-ook-alweer",
    "href": "Modellen/exciteerbaremedia.html#actiepotentialen-hoe-zat-dat-ook-alweer",
    "title": "18  Exciteerbare media",
    "section": "",
    "text": "Figuur 18.1: Afbeelding ontleend aan Pearson education (2011)",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#hodgkin-huxley-model-voor-actiepotentialen",
    "href": "Modellen/exciteerbaremedia.html#hodgkin-huxley-model-voor-actiepotentialen",
    "title": "18  Exciteerbare media",
    "section": "18.2 Hodgkin-Huxley model voor actiepotentialen",
    "text": "18.2 Hodgkin-Huxley model voor actiepotentialen\nIn 1963 hebben Alan Hodgkin en Andrew Huxley de Nobelprijs gekregen voor hun wiskundige model van actiepotentialenen in zenuwen. Het Hodgkin-Huxley model bestond uit differentiaalvergelijkingen van vier variabelen:\n\nHet potentiaal (\\(V\\))\nDe hoeveelheid geopende natriumkanalen (\\(m\\))\nDe hoeveelheid geopende kaliumkanalen (\\(n\\))\nDe hoeveelheid gesloten natriumkanalen (\\(h\\))\n\n\n\n\n\n\n\nTip 18.1: Vergelijkingen van het Hodgkin-Huxley model\n\n\n\n\n\n\\[\\begin{eqnarray}\n\n\\mathchoice{\\frac{\\mathrm{d}V}\n{\\mathrm{d}t}}{\\mathrm{d}V/\\mathrm{d}t}\n{\\mathrm{d}V/\\mathrm{d}t}\n{\\mathrm{d}V/\\mathrm{d}t}\n=&\\frac{1}{C}(I_{Na}+I_K+I_R))\\\\\n\n\\mathchoice{\\frac{\\mathrm{d}m}\n{\\mathrm{d}t}}{\\mathrm{d}m/\\mathrm{d}t}\n{\\mathrm{d}m/\\mathrm{d}t}\n{\\mathrm{d}m/\\mathrm{d}t}\n=&0.1 (1-m) \\frac{V+25}{ e^{(V+25)/10}-1} -4m e^{V/18}\\\\\n\n\\mathchoice{\\frac{\\mathrm{d}h}\n{\\mathrm{d}t}}{\\mathrm{d}h/\\mathrm{d}t}\n{\\mathrm{d}h/\\mathrm{d}t}\n{\\mathrm{d}h/\\mathrm{d}t}\n=&0.07 (1-h) e^{V/20} - \\frac{h}{ e^{(V+30)/10}+1}\\\\\n\n\\mathchoice{\\frac{\\mathrm{d}n}\n{\\mathrm{d}t}}{\\mathrm{d}n/\\mathrm{d}t}\n{\\mathrm{d}n/\\mathrm{d}t}\n{\\mathrm{d}n/\\mathrm{d}t}\n=&0.01 (1-n) \\frac{V+10}{e^{(V+10)/10}-1}-0.125n e^{V/80} \\\\\nI_{Na}=&G_{Na}m^2h(\\overline{E_{Na}}-V)\\\\\nI_{K}=&G_Kn^2(\\overline{E_K}-V)\\\\\nI_R=&g_R(\\overline{E_R}-V)\\\\\n\\end{eqnarray}\\]\nMet \\(G_{Na}=120\\), \\(G_K=36\\), \\(G_R=0.3\\), \\(\\overline{E_{Na}}=-115\\), \\(\\overline{E_K}=12\\), en \\(\\overline{E_R}=-10.5989\\).\nDit is geen leerstof. \n\n\n\nMet deze vier vergelijkingen (verstopt in Tip 18.1), en hele precieze metingen van de relevante parameters, konden Hodgkin en Huxley membraan-potentialen heel precies omschrijven. Zo kunnen we in Figuur 18.2 zien dat er zonder prikkel een rust-potentiaal is, kleine prikkels snel herstellen, en dat een grote prikkel een korte maar hoge piek oplevert in het potentiaal. We hebben dus te maken met een all-or-nothing respons. Daarnaast zie je dat er sprake is van hyperpolarisatie: na een actiepotentiaal duurt het even voordat het membraanpotentiaal volledig is herstelt. Tijdens deze periode is het moeilijker een tweede actiepotentiaal te starten (dit heet de refractaire periode), omdat de drempelwaarde van activatie nu verder weg ligt.\n\n\nCode\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    Ina &lt;- Gna*m*m*m*h*(Ena-V)\n    Ik &lt;- Gk*n*n*n*n*(Ek-V)\n    Ir &lt;- gr*(Er-V)\n    dV &lt;- (Ina+Ik+Ir)/C\n    dm &lt;- a*(1-m)*(V+25)/(exp((V+25)/10) -1) - 4*m*exp(V/18)\n    dh &lt;- b*(1-h)*exp(V/20) - h/(exp((V+30)/10)+1)\n    dn &lt;- c*(1-n)*(V+10)/(exp((V+10)/10) -1) - 0.125*n*exp(V/80)\n    \n    return(list(c(dV,dm,dh,dn)))  \n  }) \n}  \n\n\np &lt;- c(a=0.12,b=0.01,c=0.01,Gna=120,Gk=36,gr=0.3,Ena=-115, Ek=12, Er=-10.59, C=1)\ns &lt;- c(V=0.5,m=0.06,h=0.16,n=0.3)\n\npar(mfrow=c(3,2), mar=c(2.5,1,1.5,1))\nrun(tmax=60,ymin=30,ymax=-120,tstep=0.1,show=c(\"V\"),ylab=\"V\",xlab=\"Time (ms)\")\ntitle(\"Potentiaal (geen prikkel)\")\nrun(tmax=60,ymin=0,ymax=1,tstep=0.1,show=c(\"h\",\"m\",\"n\"),ylab=\"V\",xlab=\"Time (ms)\")\ntitle(\"Toestand Na+/K+ kanalen\")\n\n# par(mfrow=c(2,1))\nrun(tmax=60,ymin=30,ymax=-120,tstep=0.1,show=c(\"V\"),ylab=\"V\",xlab=\"Time (ms)\",\n    arrest=40, after=\"if(t==30)state[\\\"V\\\"]&lt;- -5;if(t==20)state[\\\"V\\\"]&lt;- 5;if(t==10)state[\\\"V\\\"]&lt;- 2;if(t==40)state[\\\"V\\\"]&lt;- 9;if(t==50)state[\\\"V\\\"]&lt;- -7;\")\ntitle(\"Potentiaal (kleine prikkels)\")\nabline(h=-5,lty=3)\nrun(tmax=60,ymin=0,ymax=1,tstep=0.1,show=c(\"h\",\"m\",\"n\"),ylab=\"V\",xlab=\"Time (ms)\",\n    arrest=40, after=\"if(t==30)state[\\\"V\\\"]&lt;- -5;if(t==20)state[\\\"V\\\"]&lt;- 5;if(t==10)state[\\\"V\\\"]&lt;- 2;if(t==40)state[\\\"V\\\"]&lt;- 9;if(t==50)state[\\\"V\\\"]&lt;- -7;\")\ntitle(\"Toestand Na+/K+ kanalen\")\n# par(mfrow=c(2,1))\n# run(tmax=60,ymin=30,ymax=-120,tstep=0.1,show=c(\"V\"),ylab=\"V\",xlab=\"Time (ms)\",\n#     arrest=40, after=\"if(t==30)state[\\\"V\\\"]&lt;- -9\")\n# run(tmax=60,ymin=0,ymax=1,tstep=0.1,show=c(\"h\",\"m\",\"n\"),ylab=\"V\",xlab=\"Time (ms)\",\n#     arrest=40, after=\"if(t==30)state[\\\"V\\\"]&lt;- -9\")\n\n# par(mfrow=c(2,1))\nrun(tmax=60,ymin=30,ymax=-90,tstep=0.1,show=c(\"V\"),ylab=\"V\",xlab=\"Time (ms)\",\n    arrest=40, after=\"if(t==30)state[\\\"V\\\"]&lt;- -13\")\ntitle(\"Potentiaal (sterke prikkel)\")\nabline(h=-13,lty=3)\nrun(tmax=60,ymin=0,ymax=1,tstep=0.1,show=c(\"h\",\"m\",\"n\"),ylab=\"V\",xlab=\"Time (ms)\",\n    arrest=40, after=\"if(t==30)state[\\\"V\\\"]&lt;- -13\")\ntitle(\"Toestand Na+/K+ kanalen\")\n\n# \n# run(tmax=100,ymin=30,ymax=-120,tstep=0.1,show=c(\"V\"),ylab=\"V\",xlab=\"Time (ms)\")\n# \n# run(tmax=20,ymin=0,ymax=1,tstep=0.1,show=c(\"h\",\"m\",\"n\"),ylab=\"State of channels\",xlab=\"Time (ms)\")\n# \n# f &lt;- run(ymin=1,ymax=1e5,log=\"y\",traject=T,tstep=0.1)\n# \n# p &lt;- c(N=1e5,a1=0.3,a2=0.5,a3=0.1,d=0.1,h=100,k=0.0001,p=1,r=1.5)\n# plane(ymax=1e5,xmax=1e5,ymin=0.01,xmin=0.01,log=\"xy\")\n# s &lt;- c(I=10000,E1=10000,E2=0,E3=0)\n# f &lt;- run(ymin=1,ymax=1e5,log=\"y\",traject=T,tstep=0.1)\n# s&lt;- newton(c(I=10000,E1=10000,E2=0,E3=0),plot=T)\n# continue(s,x=\"a1\",y=\"I\",xmax=1,xmin=0,ymax=100000)\n# continue(s,x=\"a1\",y=\"E1\",xmax=1,xmin=0,ymax=150000)\n\n\n\n\n\n\n\n\nFiguur 18.2: Alleen met een sterke prikkel ontstaat er in het Hodgkin-Huxley model een actiepotentiaal",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#een-simpeler-ode-model-van-een-actiepotentiaal",
    "href": "Modellen/exciteerbaremedia.html#een-simpeler-ode-model-van-een-actiepotentiaal",
    "title": "18  Exciteerbare media",
    "section": "18.3 Een simpeler ODE model van een actiepotentiaal",
    "text": "18.3 Een simpeler ODE model van een actiepotentiaal\nHet bovenstaande model heeft een heel belangrijke bijdrage geleverd aan ons begrip van actie-potentialen (het heeft niet voor niets een Nobelprijs opgeleverd). Toch zijn 4 vergelijkingen lastiger te overzien dan 2 of 3 variabelen. Zo kunnen we van 4 variabelen geen faseruimte schetsen, en wordt het steeds maar ingewikkelder om te bepalen of er evenwichten zijn (hiervoor moeten alle 4 de ODEs gelijk zijn aan 0!). Fithugh en Nagumo versimpelden deze ODEs tot slechts twee vergelijkingen. Dat ging natuurlijk niet zonder de benodigde versimpelingen, maar ze hielden de volgende kenmerken in het oog:\n\nEen positieve feedback loop veroorzaakt een snelle toename van het voltage. (depolarisatie)\nEr is een drempelwaarde voor deze positieve feedback loop (drempelwaarde)\nHet verhoogde voltage activeert een remmend effect, waardoor de toename weer stopt (depolarisatie), en overgaat in repolarisatie\nNa een piek is er een herstelperiode (hyperpolarisatie)\n\nDeze kenmerken wisten ze te vangen met de volgende twee vergelijkingen:\n\\[\n\\begin{align}\n    \n\\mathchoice{\\frac{\\mathrm{d}V}\n{\\mathrm{d}t}}{\\mathrm{d}V/\\mathrm{d}t}\n{\\mathrm{d}V/\\mathrm{d}t}\n{\\mathrm{d}V/\\mathrm{d}t}\n&=-V(V-a)(V-1)-W \\\\\n    \n\\mathchoice{\\frac{\\mathrm{d}W}\n{\\mathrm{d}t}}{\\mathrm{d}W/\\mathrm{d}t}\n{\\mathrm{d}W/\\mathrm{d}t}\n{\\mathrm{d}W/\\mathrm{d}t}\n&=\\epsilon(V-bW)\n\\end{align}\n\\tag{18.1}\\]\nV staat hier voor het voltage. Laten we stap voor stap ontcijferen wat hier staat. De eerste vergelijking (\\(\n\\mathchoice{\\frac{\\mathrm{d}V}\n{\\mathrm{d}t}}{\\mathrm{d}V/\\mathrm{d}t}\n{\\mathrm{d}V/\\mathrm{d}t}\n{\\mathrm{d}V/\\mathrm{d}t}\n\\)) beschrijft de verandering in \\(V\\), en bestaat uit twee termen. De eerste term (\\(-V(V-a)(V-1)\\)) bevat drie maal de variabele \\(V\\). Hoewel deze term er ingewikkeld uitziet, kunnen we dankzij de haakjes snel zien dat deze term 0 is wanneer \\(V=0\\), \\(V=a\\), of \\(V=1\\). Let op: dit zijn ook meteen de énige punten waar deze term 0 is. Bij elke andere waarde van \\(V\\) zal deze term dus een positief of een negatief effect hebben op het voltage. Laten we deze term even schetsen met R:\n\n\nCode\na=0.2\n\nfunc &lt;- function(V){\n  return(-V * (V-a) * (V-1))\n}\n\ncurve(func,0,1.15,lwd=2,ylim=c(-0.1,0.1), \n      ylab=\"dV/dt\",xlab=\"V\",col=\"seagreen\",\n      main=\"Vorm van -V(V-a)(V-1) voor a = 0.2\")\n\naxis(1, labels = FALSE,lwd=2) # x-axis\naxis(2, labels = FALSE,lwd=2) # x-axis\nabline(h=0,lty=1,col=\"black\")\nabline(v=1,lty=3,col=\"grey\")\narrows(0.1,0.0,0.05,0.0,lwd = 2, length = 0.05)\narrows(0.15,0.0,0.1,0.0,lwd = 2, length = 0.05)\narrows(0.45,0.0,0.60,0.0,lwd = 2, length = 0.05)\narrows(0.7,0.0,0.850,0.0,lwd = 2, length = 0.05)\narrows(1.1,0.0,1.050,0.0,lwd = 2, length = 0.05)\narrows(1.2,0.0,1.150,0.0,lwd = 2, length = 0.05)\nabline(v=0.2,lty=3,col=\"grey\")\n\n\n\n\n\n\n\n\nFiguur 18.3: Fase-portret van een enkele term uit het Fitzhugh-Nagumo model\n\n\n\n\n\nAan de hand van deze grafiek kunnen we alvast inschatten dat het voltage (\\(V\\)) zal toenemen of afnemen, afhankelijk van de huidige waarde van \\(V\\). Maar de \\(V\\)-vergelijking bevat ook nog een tweede term (\\(-W\\)). Het toenemen van het voltage wordt dus kennelijk geremd door \\(W\\). Deze “rem” zien we terugkomen als tweede ODE (\\(\n\\mathchoice{\\frac{\\mathrm{d}W}\n{\\mathrm{d}t}}{\\mathrm{d}W/\\mathrm{d}t}\n{\\mathrm{d}W/\\mathrm{d}t}\n{\\mathrm{d}W/\\mathrm{d}t}\n\\)). Deze is makkelijker te interpreteren: \\(W\\) neemt toe met snelheid \\(\\epsilon V\\) (dus: afhankelijk van het voltage), en neemt af met snelheid \\(\\epsilon bW\\). Het is bekend dat deze rem (de refractaire periode) langzamer op gang komt dan een actiepotentiaal, dus wordt aangenomen dat \\(\\epsilon \\ll 1\\).\nDeze versimpeling van het Hodgkin-Huxley model heet het Fitzhugh-Nagumo model1. De versimpeling heeft voor en nadelen. Het voordeel is dat we nu eenvoudiger (zelfs met pen en papier) kunnen bestuderen hoe het systeem nou eigenlijk werkt. Het nadeel is dat we alle parameters van het Hodgkin-Huxley model, die met pijn en moeite zijn gemeten, nu eigenlijk allemaal kwijt zijn. Zo kunnen we minder makkelijk ons model vergelijken met werkelijke scenarios.\nMaar nu we twee vergelijkingen hebben, kunnen we wel weer een eenvoudige faseruimte bestuderen in Grind:\n\n\nCode\n# source the grind script\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\n# define the model-function so grind can use it\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dV &lt;- -V*(V-a)*(V-1) - W  # dV/dt\n    dW &lt;- e*(V- b*W)         # dW/dt \n    return(list(c(dV,dW)))  \n  }) \n}\n\n# initial values of V and W (a bit above rest potential)\ns &lt;- c(V=0.2,W=0)         \np &lt;- c(e=0.001,b=1,a=0.2)\nplane(xmin=-0.3,ymin=-0.05,ymax=0.13,xmax=1.05,portrait=F,vector=T,grid=3)\nnewton(plot=T)\n\n\n\n\n\n\n\n\nFiguur 18.4: Faseruimte van het Fitzhugh-Nagumo model\n\n\n\n\n\nZo zien we dat er twee nullclines zijn, en dat er een evenwichtspunt is waar de nullclines snijden. Zoals je ziet wijst het vectorveld vlak rechts van dit evenwicht terug naar links. Vlak boven het evenwicht wijst het terug naar beneden. Zoals we geleerd hebben is dit dus een stabiel evenwicht. Dit is de rustpotentiaal.\nMaar het vectorveld dichtbij dit evenwicht is vrij complex. Wat gebeurt er bijvoorbeeld als we het voltage verhogen met kleine of grote prikkels? Dit komt neer op respectievelijk een klein stapje of een grote stap naar rechts zetten vanaf dit evenwicht. Als de stap groot genoeg is, zitten we niet meer in het vectorveld dat terug naar links wijst, maar wijst het vectorveld naar rechts! Met andere woorden: voor een groot genoege prikkel worden we van dit evenwicht weggeduwd. Om dit verschil in actie te kunnen zien, rekenen we twee numerieke oplossingen door met Grind.R, één met een kleine prikkel (Figuur 18.5 (a)), en één met een grote prikkel (Figuur 18.5 (b)).\n\nCode\n# source the grind script\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\n# define the model-function so grind can use it\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dV &lt;- -V*(V-a)*(V-1) - W  # dV/dt\n    dW &lt;- e*(V- b*W)         # dW/dt \n    return(list(c(dV,dW)))  \n  }) \n}\n\n# initial values of V and W (a bit above rest potential)\ns &lt;- c(V=0.15,W=0)         \np &lt;- c(e=0.003,b=1,a=0.2)\npar(mfrow=c(1,2),mar=c(2,2,2,2))\nplane(xmin=-0.3,ymin=-0.05,ymax=0.16,xmax=1.1,portrait=F,vector=T,grid=3)\n#newton(plot=T)\nrun(traject=T,tmax=2000)\nrun(traject=F,tmax=300,ymin=-0.3,ymax=1)\n\ns &lt;- c(V=0.25,W=0)         \np &lt;- c(e=0.003,b=1,a=0.2)\npar(mfrow=c(1,2))\nplane(xmin=-0.3,ymin=-0.05,ymax=0.16,xmax=1.1,portrait=F,vector=T,grid=3)\n#newton(plot=T)\nrun(traject=T,tmax=2000)\nrun(traject=F,tmax=300,ymin=-0.3,ymax=1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n(a) Dynamica na een kleine prikkel\n\n\n\n\n\n\n\n\n\n\n\n(b) Dynamica na een grote prikkel\n\n\n\n\n\n\n\n\nFiguur 18.5: Faseruimten en oplossingen voor het Fitzhugh-Nagumo model\n\n\n\nMet de hulp van bovenstaande figuur kunnen we conceptualiseren wat een actiepotentiaal nou eigenlijk is, en waarom er eigenlijk een refractaire periode is (d.w.z. de periode waarin het neuron ongevoelig is voor prikkels). Een actiepotentiaal is te versimpelen tot een grote omweg door deze faseruimte. Deze omweg wordt alleen gestart als er een toename van \\(V\\) is die voorbij het stijgende deel van rode curve gaat (de \\(V\\)-nullcline). Aan de oplossing zien we dat we vrij snel (na ongeveer 70 tijdstappen) alweer een negatief geladen neuron hebben, maar dat \\(W\\) nog vrij hoog is. We zitten dan dus linksboven in de faseruimte. Heel langzaam herstelt het systeem zich naar de rustpotentiaal. Tot die tijd is “een stapje naar rechts” zeer waarschijnlijk niet groot genoeg om een nieuwe actiepotentiaal te starten (wederom: het moet voorbij het stijgende deel van de rode \\(V\\)-nullcline). De refractaire periode ontstaat dus doordat de remmende werking van \\(W\\) heel langzaam afneemt.\nSamengevat laat dit simpele 2D vectorveld alle hierboven genoemde eigenschappen zien: i) het voltage kan sterk toenemen en weer herstellen, ii) dit gebeurt alleen bij een sterke prikkel, iii) vlak na een actiepotentiaal is geen onmiddelijke reactivatie mogelijk, en iv) er is sprake van hyperpolarisatie.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#actiepotentialen-als-pde",
    "href": "Modellen/exciteerbaremedia.html#actiepotentialen-als-pde",
    "title": "18  Exciteerbare media",
    "section": "18.4 Actiepotentialen als PDE",
    "text": "18.4 Actiepotentialen als PDE\nIn het vorige hoofdstuk hebben we diffusie toegevoegd aan ODEs zodat deze PDEs worden (of platter uitgedrukt hebben we “differentiaalvergelijkingen in hokjes gestopt”). Nogmaals, met PDEs kunnen we naast veranderingen over de tijd, ook veranderingen door de ruimte bestuderen. We zagen dat dit mooie patronen op kan leveren. Wat gebeurt er als we de ODEs van het Fitzhugh-Nagumo nemen, en deze in een PDE bestuderen?\nDit zou een soort simulatie kunnen zijn van een axon, of van hartweefsel waarbij het actiepotentiaal zorgt voor samentrekking van de hartspier. Om dit te laten zien, geeft de onderstaande simulatie aan wat er gebeurt in een “weefsel” van 60 hoog en 150 lang. In het begin is de linker kolom sterk geprikkeld (\\(V=1\\)), en de rest van het weefsel in rust (\\(V=0,W=0\\)).\n\n\n\n\n\n\nZoals je ziet vormt er zich een golf van \\(V\\) (rood), die van links naar rechts doorgegeven wordt door het weefsel. Daarachter volgt bredere band van \\(W\\), dat er voor zorgt dat het actiepotentiaal niet meteen opnieuw geactiveerd kan worden. Dit kan je zelf testen: met de muis kun je prikkels geven aan het medium. Als je vóór een golf een prikkel geeft ontstaat er een nieuwe golf voor de bestaande golf. Deze golf gaat twee kanten op en annihileert de oorspronkelijke golf! Als je echter vlak ná een bestaande golf probeert het weefsel een prikkel te geven, dooft deze meteen uit!",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#sec-spiral",
    "href": "Modellen/exciteerbaremedia.html#sec-spiral",
    "title": "18  Exciteerbare media",
    "section": "18.5 Ophopingen, blokkades, en spiralen",
    "text": "18.5 Ophopingen, blokkades, en spiralen\nMet de bovenstaande simulatie kunnen we vrij “virtueel” experimenteren. Zo weten we bijvoorbeeld dat littekenweefsel (bijv. op het hart) actiepotentialen kan verstoren, omdat deze het signaal niet (meer) geleiden. Laten we een dergelijke blokkade inbouwen door een deel van het weefsel altijd op refractair (\\(W=1\\)) te veronderstellen:\n\n\n\n\n\nZoals je ziet krult de golf om de blokkade heen. Ook zie je dat de golf zichzelf uiteindelijk weer recht trekt. Dit komt omdat weefsel vooraan in de golf minder activatie krijgt van omliggend weefsel. Zo herstelt de rechte staande golf eigenlijk vanzelf. Als dit dus een hart-weefsel is – waar een golf als deze verantwoordelijk is voor het sequentieel samentrekken van de hartkamers – heeft dit litteken nog geen rampzalige gevolgen. Misschien kunnen we ons ook voorstellen dat er een stuk littekenweefsel is dat het signaal veel slechter doorlaat, maar nog wel een beetje:\n\n\n\n\n\nOok hier kan de actiepotentiaal gelukkig nog doorheen breken. Wel kun je zien dat deze golf (onderin) nu een klein beetje achterloopt op een golf die geen hinder heef ondervonden (bovenin).\nAls we echter aannemen dat de blokkade slechts tijdelijk is, gebeurt er iets vreemds:\n\n\n\n\n\nWat je hier ziet, is een actiepotentiaal golf die om zichzelf is heen gekruld. Als dit een stuk hartweefsel is, hebben we dus te maken met een hartritmestoornis! Inderdaad zijn deze spiraalvormen een belangrijke oorzaak van hartritmestoornissen (zie Figuur 18.6). Met de muis kun je het hartweefsel lokaal proberen te herstellen, maar naar alle waarschijnlijkheid maak je er alleen maar meer spiralen bij (probeer het maar eens!). In het werkcollege gaan we kijken we we moeten doen om dit “hart” weer normaal te laten kloppen.\n\n\n\n\n\n\nFiguur 18.6: Simulaties van spiralen op het hart door Sato et al.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip 18.2: Het denken van het ondenkbare\n\n\n\nDe simulaties van hartritmestoornissen lijken wellicht een beetje oversimplistisch, en wellicht vooral leuk om mee te spelen. Echter hebben ze zeer belangrijke bijdragen geleverd aan medisch onderzoek. Door inzicht te geven in hoe golven ontstaan en om zichzelf heen krullen, konden nieuwe ingrepen worden ontwikkeld die anderszijds “ondenkbaar” zouden zijn. Bijvoorbeeld: door het strategisch plaatsen van littekenweefsel (meestal met behulp van hoge temperaturen en/of lasers), kan een normaal hartritme hersteld worden. Dit is een goed voorbeeld van hoe modellen ons toestaan om de meest ondenkbare “virtuele experimenten” uit te voeren, en zo belangrijke toepassingen te ontwikkelen!",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#exciteerbare-media-en-andere-type-golven",
    "href": "Modellen/exciteerbaremedia.html#exciteerbare-media-en-andere-type-golven",
    "title": "18  Exciteerbare media",
    "section": "18.6 Exciteerbare media en andere type golven",
    "text": "18.6 Exciteerbare media en andere type golven\nHet bovenstaande systeem van actie-potentialen in een weefsel is deel van een klasse systemen genaamd exciteerbare media (excitable media). Exciteerbare media hebben devolgende kenmerken:\n\nEr is een drempelwaarde,\nDoor een positieve feedback, is er een all-or-nothing respons als de drempelwaarde wordt bereikt\nDe activatie kan propageren door de ruimte\nNa een respons kan er kort geen activatie zijn, waardoor golven een richting krijgen (ze kunnen niet onmiddelijk terug!)\n\nAndere biologische systemen die aan deze voorwaarden voldoen zijn epidemische processen (virus breekt uit, resistentie ontwikkelt, resistentie verzwakt), bosbranden (brand breekt uit, bos ligt in as, bos herstelt), en er zijn bovendien talloze voorbeelden uit de moleculaire/microbiële wereld:\n\n\n\n\n\n\n\n\n\n\n\n\nFiguur 18.7: Calciumspiralen op het membraan van een pas bevruchte eicel (https://news.mit.edu/2020/growth-organism-waves-0323)\n\n\n\n\n\n\n\n\n\n\n\nFiguur 18.8: Voorbeelden van spiralen in biologische systemen\n\n\n\n\n\n\nOok buiten de biologie zien we dergelijke systemen terug, zoals in simpele chemische reacties of vlammen op het oppervlak van een brandstof. Dit voorbeeld, en vele andere voorbeelden van excitable media vind je in deze video:",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#opgaven",
    "href": "Modellen/exciteerbaremedia.html#opgaven",
    "title": "18  Exciteerbare media",
    "section": "18.7 Opgaven",
    "text": "18.7 Opgaven\n\nOefening 18.1 (Drempelwaarde van FitzHugh-Nagumo) \nIn Vergelijking 18.1 heb je gezien dat de activerende term van het FitzHugh-Nagumo model een zogeheten derdegraads polynoom vormt. Complexe polynomen (derdegraags, vierdegraads, etc.) veranderen vaak meerdere keren van richting. In Figuur 18.3 zie je dat ook: eerst daalt de lijn, dan stijgt de lijn, en uiteindelijk daalt de lijn weer. Deze zogeheten non-lineairiteit resulteert er in dat er alleen toename van het voltage kan zijn als er eerst een bepaalde drempel-waarde is bereikt.\n\nIn welk andere model (veel eerder in de cursus) heb je deze vorm ook gezien?\nDe grafiek in Figuur 18.3 is geschetst met \\(a=0.2\\). Neem de onderstaande R-code over, en pas \\(a\\) aan naar -0.2. Pas de assen aan zodat je de gehele curve kan zien. Bij welke drempelwaarde verwacht je nu dat er activatie is van een actiepotentiaal?\n\n\na=0.2\n\nfunc &lt;- function(V){\n return(-V * (V-a) * (V-1))\n}\ncurve(func,0,1.15,lwd=2,ylim=c(-0.1,0.12), \n     ylab=\"\",xlab=\"V\",col=\"seagreen\")\naxis(1, labels = FALSE,lwd=2) # x-axis\naxis(2, labels = FALSE,lwd=2) # x-axis\nabline(h=0,lty=1,col=\"black\")\nabline(v=1,lty=3,col=\"grey\")\nabline(v=a,lty=3,col=\"grey\")\n\n\nDeze curve hadden we getekend door alleen naar de activerende term (\\(-V(V-a)(V-1)\\)) te kijken. We gaan nu bepalen waar de nullcline van \\(V\\) ligt door \\(dt{V}\\) op 0 te stellen. Neem aan dat we \\(W\\) op de y-as zetten in de faseruimte, dus los op voor \\(W\\).\nVergelijk je nullcline met de activatie-term die we eerder hebben geschetst. Wat valt je op?\nBepaal ook de nullcline voor \\(W\\), door \\(dt{W}\\) op 0 te stellen. Schets beide nullclines in één faseruimte.\nVergelijk je faseruimte (met \\(a=-0.2\\) met de faseruimte uit het hoofdstuk (waar \\(a=0.2\\)). Wat is er verandert aan het evenwichtspunt? Heeft je faseruimte een rustpotentiaal? Een drempelwaarde?\nWelk type weefsel in het menselijk lichaam gedraagt zich zoals dit nieuwe systeem?\n\n\n\nOefening 18.2 (Clear!) \nZoals gezegd kunnen er spiralen vormen op het hartweefsel, wat een hartritmestoornis veroorzaakt. Bekijk de volgende simulatie, waarbij er door het hokje linksbovenin elke 250 tijdstappen een nieuwe golf start:\n\n\n\n\n\n\nLaat de simulatie een tijdje lopen, en bepaal de frequentie van het hart (de tijdseenheden zijn arbitrair, dus het antwoord is in de vorm “een hartslag elke X-de tijdstap”).\nGebruik de knop ‘Boe’ om dit virtuele persoon “te laten schrikken” (de knop voegt aan alle hokjes een willekeurige hoeveelheid \\(V\\) toe2). Zie je een effect op de hartslag? Is dit effect blijvend?\nTeken met de muis (deze zet \\(V\\) op 0) een lijn door een golf heen. Kun je nu een blijvend effect op de hartslag creeeren?\nProbeer het hart te herstellen met de muis. Gebruik ook eens de ‘Clear!’ knop. Wat werkt het beste, en waarom?\n\n\n\nOefening 18.3 (Epidemie) \nOp een groot (hypothetisch) eiland breekt al decenia, keer op keer, een vervelende infectieziekte opnieuw uit. De ziekte verspreidt zich van dorp tot dorp, en de immuniteit voor de ziekte duurt helaas slechts enkele maanden. Deze observaties suggeren dat de ziekte zich verspreidt als een golf door een exciteerbaar medium.\n\nWat gebeurt er als de ziektegolf een dorp binnenkomt, nadat dit dorp recent al is geïnfecteerd (door dezelfde ziekte!)?\nIemand stelt voor om de ziekte te stoppen door alle vatbare individuen tegelijkertijd te infecteren. Zou dit werken? Is dit ook ethisch verantwoord?\n\nEr wordt een vaccinatie campagne opgezet, maar een groot deel van de populatie komt niet opdagen. Bestudeer de volgende simulatie, van een golf die een matig gevaccineerd dorp binnenrolt.\n\n\n\n\nKan een golf (links) de ongevaccineerde mensen (rechts) bereiken? Wanneer wel/niet?3\nWat kan er gebeuren als een toerist van een niet-gevaccineerd land met het vliegtuig binnenkomt (rechts verschijnt)?\nDe minimale vaccinatiegraad om in deze simulatie de ziekte te stoppen is vrij laag. Waarom is in echte menselijke populatie de benodigde vaccinatiegraag hoger, denk je?\n\n\n\nOefening 18.4 (Bosbranden) \nHoewel we tot nu toe voorbeelden hebben gezien van exciteerbare media in PDEs, bestaan ze ook in individual-based modellen. Laten we bijvoorbeeld eens aannemen dat een groot bos in hokjes opgedeeld is, met in elk hokje een boom of een stuk lege grond. Een bosbrand begint in het midden van het bos, en verspreidt zich via de bomen.\n\n\n\n\nBegin de simulatie een paar keer met een bomen-dichtheid van 0.4. Schat ruwweg in welke fractie van het bos afbrandt. Zie je veel variatie tussen de experimenten?\nHerhaal je experiment ook met dichtheden 0.2, 0.3, 0.5, en 0.6. Bepaal opnieuw welke fractie afbrandt, en hoeveel variatie er is.\nTeken de hoeveelheid afgebrand bos als functie van de boom-dichtheid. Leg de vorm van deze functie uit in biologische termen.\nWat zou je aanraden om ernstige bosbranden te voorkomen?\nBomen planten zich ook voort. Wat denk je dat er kan gebeuren als de afgebrande bomen na een tijdje weer vruchtbare grond voor nieuwe bomen vormt?\n\nBrand is meestal een heel snel proces ten opzichte van de voortplanting van bomen. Bestudeerd devolgende simulatie:\n\n\n\n\nIs brand een groter of een kleine probleem als planten zich snel voort kunnen planten?",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#terminologie",
    "href": "Modellen/exciteerbaremedia.html#terminologie",
    "title": "18  Exciteerbare media",
    "section": "18.8 Terminologie",
    "text": "18.8 Terminologie\n\n\n\n\n\n\n\n\nNederlands\nEngels\nBeschrijving\n\n\n\n\nExciteerbare media\nExctiable media\nSystemen waarin een stimulus een lokale reactie verzaken die zich vervolgens kan verspreiden, zoals in zenuwcellen of chemische reacties. Een belangrijke eigenschap is een refractaire periode waardoor de golven in één richting propageren.\n\n\nVirtueel experimenteren\nVirtual experimentation\nExperimenten uitvoeren a.d.h.v. computersimulaties in plaats van in echte (biologische) systemen.",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/exciteerbaremedia.html#footnotes",
    "href": "Modellen/exciteerbaremedia.html#footnotes",
    "title": "18  Exciteerbare media",
    "section": "",
    "text": "Kennelijk hebben biologen en andere theoretici er een handje van om modellen een dubbele naam te geven: Lotka-Volterra, Hodgkin-Huxley, Fitzhugh-Nagumo, Michaelis-Menten…↩︎\nLet op: dit is niet echt wat er met je hart gebeurt als iemand je laat schrikken, maar dit is slechts een virtueel experiment.↩︎\ngebruik de muis in het linker scherm om nieuwe golven te starten↩︎",
    "crumbs": [
      "Biologische modellen",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>Exciteerbare media</span>"
    ]
  },
  {
    "objectID": "Modellen/project.html",
    "href": "Modellen/project.html",
    "title": "Mini-project",
    "section": "",
    "text": "Toxine-producerende bacteriën\nVerschillende bacteriën die in eenzelfde omgeving groeien ondergaan vele interacties met elkaar. Naast het concurreren om voedsel, kunnen sommige bacteriën ook giftige stoffen (toxines) uitscheiden om hun concurrenten te onderdrukken. Sommige bacteriën scheiden deze toxines uit in het medium, terwijl andere de toxines direct in hun buurcellen kunnen injecteren. Hoewel dit deze bacteriën kan bevoordelen, dragen ze ook de metabolische kosten voor het produceren van de toxines (en de resistentie daartegen!). Om de ecologie van toxineproducenten te bestuderen, hebben we een systeem van ODEs opgesteld dat twee stammen beschrijft – een toxineproducerende stam die resistent is tegen het toxine en een gevoelige die dood gaat naar mate er meer toxine-producenten aanwezig zijn:\n\\[\\begin{align}\n\n\\mathchoice{\\frac{\\mathrm{d}X}\n{\\mathrm{d}t}}{\\mathrm{d}X/\\mathrm{d}t}\n{\\mathrm{d}X/\\mathrm{d}t}\n{\\mathrm{d}X/\\mathrm{d}t}\n&= a_{1}X(1-\\frac{X+Y}{K}) - dX \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}Y}\n{\\mathrm{d}t}}{\\mathrm{d}Y/\\mathrm{d}t}\n{\\mathrm{d}Y/\\mathrm{d}t}\n{\\mathrm{d}Y/\\mathrm{d}t}\n&= a_{2}Y(1-\\frac{X+Y}{K}) - dY - cXY\n\\end{align}\\]\nIn dit cursusonderdeel schrijven jullie een kort verslag over het bovenstaande ODE model, en een computersimulatie die deze interacties in de ruimte simuleert. Dit verslag dient de volgende vorm te hebben:\nPer onderdeel (a, b, c, etc.), word jullie verslag volgens de volgende standaard beoordeeld:\nOmdat er 12 subvragen zijn, levert dit 24 punten op. De overige 6 punten verdien je met een passende inleiding (3 pt) en onderbouwde conclusie (3 pt).\nSucces met de opdracht!",
    "crumbs": [
      "Biologische modellen",
      "Mini-project"
    ]
  },
  {
    "objectID": "Modellen/project.html#toxine-producerende-bacteriën",
    "href": "Modellen/project.html#toxine-producerende-bacteriën",
    "title": "Mini-project",
    "section": "",
    "text": "Een korte introductie (~200 woorden), waarin het onderwerp het het vraagstuk geïntroduceerd wordt.\n\nStapsgewijs antwoorden op de vragen (a=…, b=…, etc.).\nEen korte conclusie (1-2 zinnen)\n\n\n\n1 pt. Antwoorden/figuren zijn correct (of er wordt een juiste beredenering gegeven voor een alternatief antwoord)\n1 pt. Uit het antwoord is goed af te lezen wat de vraag was (dit geldt ook voor vragen waar alleen een figuur wordt gevraagd!). Voorbeelden zijn “Het model laat zien dat het verhogen van de carrying capacity van de konijnen geen invloed heeft op de hoeveelheid konijnen in evenwicht…” of “In Figuur X tonen we de mogelijke faseruimtes voor Vergelijking Y, waar de blauwe lijnen…”.\n\n\n\n\n\n\n\n\n\nComputerpracticum over toxine-productie\n\n\n\nVerschillende bacteriën die in eenzelfde omgeving groeien ondergaan vele interacties met elkaar. Naast het concurreren om voedsel, kunnen sommige bacteriën ook giftige stoffen (toxines) uitscheiden om hun concurrenten te onderdrukken. Sommige bacteriën scheiden deze toxines uit in het medium, terwijl andere de toxines direct in hun buurcellen kunnen injecteren. Hoewel dit deze bacteriën kan bevoordelen, dragen ze ook de metabolische kosten voor het produceren van de toxines (en de resistentie daartegen!). Om de ecologie van toxineproducenten te bestuderen, hebben we een systeem van ODEs opgesteld dat twee stammen beschrijft – een toxineproducerende stam die resistent is tegen het toxine en een gevoelige die dood gaat naar mate er meer toxine-producenten aanwezig zijn:\n\\[\\begin{align}\n\n\\mathchoice{\\frac{\\mathrm{d}X}\n{\\mathrm{d}t}}{\\mathrm{d}X/\\mathrm{d}t}\n{\\mathrm{d}X/\\mathrm{d}t}\n{\\mathrm{d}X/\\mathrm{d}t}\n&= a_{1}X(1-\\frac{X+Y}{K}) - dX \\\\\n\n\\mathchoice{\\frac{\\mathrm{d}Y}\n{\\mathrm{d}t}}{\\mathrm{d}Y/\\mathrm{d}t}\n{\\mathrm{d}Y/\\mathrm{d}t}\n{\\mathrm{d}Y/\\mathrm{d}t}\n&= a_{2}Y(1-\\frac{X+Y}{K}) - dY - cXY\n\\end{align}\\]\n\nOmschrijf waar de termen in de vergelijkingen voor staan, en welke ODE (dX of dY) de toxine-producerende stam voorstelt, en welke de sensitieve stam.\nGegeven de biologische context, waar staan de parameters \\(a1\\), \\(a2\\), \\(K\\), \\(d\\) en \\(c\\) voor?\nWe gaan ervan uit dat er metabolische kosten zijn voor de productie van toxines, maar dat sensitieven behoorlijk gevoelig zijn voor deze toxines. Verwachten we dan dat een toxine-producerende mutant kan invaderen?\nBereken de nullclines van dit systeem.\nSchets de nullclines die je hebt gevonden in d. Beschrijf en schets wat er met de nullclines gebeurt naar mate de kosten voor het produceren van het toxine hoger en hoger zijn.\nBeschrijf de evenwichten in de verschillende faseruimtes uit e in biologische begrippen. Kan een toxine-producerende mutant (met lage metabolische kosten) invaderen in een populatie van sensitieven?\n\nNeem het volgende Grind-script over:\n\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\nmodel &lt;- function(t, state, parms){\n  with(as.list(c(state,parms)),{\n    dX &lt;- a1*X*(1-(X+Y)/K) - d*X\n    dY &lt;- a2*Y*(1-(X+Y)/K) - d*Y - c*X*Y\n    return(list(c(dX,dY)))\n  })\n}  \n\ncolors[1] = \"navy\"\ncolors[2] = \"red\"\n\np &lt;- c(a1=0.6,a2=1.0,d=0.1,c=0.5,K=1)\ns &lt;- c(X=0.0001,Y=0.9)\npar(mfrow=c(1,3))\nplane(vector=T,grid=3,ymax=1.1,xmax=1.1,tstep=0.1, portrait=T, main=\"Totale faseruimte\")\nplane(vector=T,grid=6,ymax=0.85,ymin=0.6,xmax=0.25, xmin=0.05, portrait=F, main=\"(ingezoomed)\")\nnewton(state=c(X=0.15,Y=0.7),plot=T)\n\nrun(tmax=400,traject=F, main=\"Invasie van X\")\n\n\nBestudeer met de parameters gegeven in het R-script of een toxine-producerende mutant zich kan verspreiden in een populatie van sensitieve cellen.\nVerandert je antwoord in f als je de toxines 2 keer zo sterk maakt? En als je de toxines 10 keer zo sterk maakt?\nGa terug naar de reguliere kosten voor de productie van toxinen (c=0.5). Bestudeer nu ook of een sensitieve cell zich kan verspreiden in een populatie van toxine-producerende cellen.\nTrek uit de bovenstaande analyses een biologische conclusie.\n\nDe ODEs nemen aan dat het systeem goed gemengd is, zoals in een Erlenmeyer die goed wordt geschud. Laten we ons virtuele experiment ook herhalen op het equivalent van een agar-plaat, waar zowel reproductie als de effecten van de toxines lokaal zijn.\nDe parameters in de simulatie hebben vergelijkbare interpretaties als in de ODEs. In de simulatie is er echter geen sprake van snelheden van geboorte en sterfte, maar kansen van geboorte en sterfte.\n\n\n\n\n\nJe vindt de simulatie hier: https://tbb.bio.uu.nl/bvd/bms/simulations/toxins/\n\nBestudeer met de standaard parameters of de toxine-producent kan invaderen, en vorm een hypothese over wat er gebeurt\nTest en bespreek je hypothese met de opties die beschikbaar zijn in de simulatie.",
    "crumbs": [
      "Biologische modellen",
      "Mini-project"
    ]
  },
  {
    "objectID": "Statistiek/wat_is_statistiek.html",
    "href": "Statistiek/wat_is_statistiek.html",
    "title": "19  Wat is statistiek?",
    "section": "",
    "text": "Aan dit onderdeel wordt momenteel nog gewerkt.",
    "crumbs": [
      "Statistiek",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>Wat is statistiek?</span>"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_R.html",
    "href": "Appendices/antwoorden_R.html",
    "title": "Antwoorden R",
    "section": "",
    "text": "1  Introductie en installatie\nOefening 1.1\na.\na &lt;- 2\na^3\nb.\nb &lt;- 9.5\nb^19\nc.\nOm de laatste afstand te berekenen, gebruiken we de stelling van Pythagoras (\\(a^2+b^2=c^2\\), dus \\(c=\\sqrt{a^2+b^2}\\)). Om te zorgen dat de berekening niet in de environment opgeslagen wordt, moeten we de berekening niet aan een variabele toekennen (we gebruiken dus geen &lt;-). We typen dus simpelweg \\(a+b+c\\) om de totaalafstand te laten zien.\na &lt;- 3\nb &lt;- 4\nc &lt;- sqrt(a^2+b^2) # stelling van Pythagoras\na+b+c # geen pijltje betekent dat de uitkomst alleen wordt weergegeven\nd.\nOmdat we een script hadden gemaakt met variabelen voor \\(a\\), \\(b\\) en \\(c\\), is het nu makkelijk om deze aanpassing te maken (\\(a\\) wordt 5 en \\(b\\) wordt 6). Om de uitkomst in de environment op te slaan gebruiken we &lt;- om deze in een variabele op te slaan die afstand heet. Het totaalscript is dan:\na &lt;- 5\nb &lt;- 6\nc &lt;- sqrt(a^2+b^2) # stelling van Pythagoras\nafstand &lt;- a+b+c # sla de uitkomst op in een variabele met &lt;-\n\nprint(paste('Je hebt', afstand, 'stappen gelopen'))\nOefening 1.2\na.\nOmdat \\(a\\) van de vorige opgave nog op 5 stond, is de uitkomst 15. Echter hebben we in de vorige opgave geen \\(d\\) gedefinieerd, dus krijg je deze uitkomst:\nb.\nOm \\(d\\) op 0 te zetten typen we d &lt;- 0 in de console, en drukken we op enter. De breuk \\(a \\over d\\) geeft de volgende uikomst:\nInf staat voor ‘infinity’, wat komt doordat we door \\(0\\) delen!\nc.\nEerst voeren we d &lt;- 0.001 uit. Dan berekenen we de breuken:\nEerst delen we door 0.001, waardoor \\(a\\) 1000 keer zo groot wordt. Dan delen we door \\(0.001^2\\), wat ‘1 miljoenste’ is. Hierdoor wordt \\(a\\) een miljoen keer zo groot. Om dergelijk grote getallen weer te geven wordt de wetenschappelijke notatie gebruik (5e+06). Het antwoord uit vraag b (delen door 0) kunnen we nu begrijpen. Als we door een steeds kleiner getal delen, wordt de uitkomst groter en groter. Dus als we door 0 delen (een oneindig klein getal!), krijgen we als resultaat oneindig.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden R"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_R.html#sec-introductier",
    "href": "Appendices/antwoorden_R.html#sec-introductier",
    "title": "Antwoorden R",
    "section": "",
    "text": "&gt; d+10\nError: object 'd' not found\n\n\n&gt; a/d\n[1] Inf\n\n\n\n&gt; a/d\n[1] 5000\n&gt; a/d^2\n[1] 5e+06",
    "crumbs": [
      "Bijlagen",
      "Antwoorden R"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_R.html#sec-rprogrammeren",
    "href": "Appendices/antwoorden_R.html#sec-rprogrammeren",
    "title": "Antwoorden R",
    "section": "2  Programmeren in R",
    "text": "2  Programmeren in R\nOefening 2.1\na.\nHet resultaat is:\nError in rtree(10) : could not find function \"rtree\" \nDe functie rtree bestaat dus helemaal niet in R!\nb.\nDit print iets in de console:\nPhylogenetic tree with 10 tips and 9 internal nodes.\n\nTip labels:\n  t2, t3, t6, t9, t4, t7, ...\n\nRooted; includes branch lengths.\nKennelijk doet dit package iets met fylogenetische bomen.\nc.\nDe boom ziet er elke keer anders uit. De ‘r’ in de functie zal dus wel voor random (willekeurig) staan.\nd.\nDeze past het aantal soorten in de willekeurige boom aan.\ne.\nIn de tekst van dit hoofdstuk heb je geleerd dat dit kan met ?rtree, wat een venster opent in Rstudio met uitleg over je functie. Zo kan je bijvoorbeeld alle tip-levels veranderen:\n\nlabels &lt;- paste(\"Soort \",1:5)\nplot(rtree(5,tip.label=labels))\n\nOefening 2.2\na. Er zijn drie soorten penguins. Er zijn veel manieren om dit te zien. Ten eerste, als je View(penguins) gebruikt, kun je de verschillende soorten zelf tellen in de eerste kolom. Een andere manier is om de species-kolom uit de dataframe te pakken:\n\npenguins$species\n\nDeze code print de hele eerste kolom, en vat aan het einde samen hoevel verschillende ‘levels’ de data heeft:\nLevels: Adelie Chinstrap Gentoo\nHier zie je dus ook dat er drie soorten zijn. Een derde manier is om de functie summary toe te passen op de kolom, zodat je een tabel te zien krijgt met het aantal soorten, en hoe vaak ze voor komen:\n&gt; summary(penguins$species)\nAdelie Chinstrap    Gentoo \n152        68       124\nb. Hieronder staat hoe je deze functies kan gebruiken. Je kan ook de functie summary gebruiken, die geeft in 1 klap een heleboel van deze getallen:\n\nmin(penguins$flipper_length_mm,na.rm=T) # T is kort voor TRUE\nmax(penguins$flipper_length_mm,na.rm=T)\nmean(penguins$flipper_length_mm,na.rm=T)\n\n# Je kan ook summary gebruiken, die geeft van alles:\nsummary(penguins$flipper_length_mm) \n\nc.\n\nx &lt;- summary(penguins$sex) # geeft 3 waarden: female, male, en NA\nfractie &lt;- x[3]/(nrow(penguins)) # aantal NAs gedeeld door aantal rijen\npercentage &lt;- 100*fractie # omzetten naar percentages\nprint(percentage)\n\nOefening 2.3\na. Hiervoor kunnen we dezelfde structuur gebruiken als voor ‘biologen’ in het hoofdstuk:\n\nbacterien &lt;- data.frame(temperatuur=c(20, 25, 30, 35, 40),\n                       groeisnelheid=c(2.0, 2.25, 2.65, 2.35, 2.2))\n\nAlternatief kun je eerst twee vectoren definieren, als je dat overzichtelijker vindt:\n\ntemperatuur &lt;- c(20, 25, 30, 35, 40)\ngroeisnelheid &lt;- c(2.0, 2.25, 2.65, 2.35, 2.2)\nbacterien &lt;- data.frame(temperatuur,groeisnelheid)\n\nb. Hoewel je dit zelf ook nog wel kan lezen, zijn biologische datasets hier vaak te groot voor. Zoals de tip zegt, geeft which.max() de index met de hoogste waarde terug. Deze index kun je dan gebruiken om de corresponderende temperatuur te vinden:\n\n# Vind de index van de maximale groeisnelheid\nmaxgroei_index &lt;- which.max(bacterien$groeisnelheid) #  geeft index-waarde '3'\n# Toon de corresponderende temperatuur\nbacterien$temperatuur[maxgroei_index] # geeft '30', namelijk de temperatuur op positie 3\n\nc. Om dit te doen moeten we de kolom ‘groeisnelheid’ tot de macht 10 verheffen:\n\ntotaalgroei &lt;- bacterien$groeisnelheid^10\nbacterien$totaalgroei &lt;- totaalgroei\n\nd.\n\nbacterien$totaalgroei[1] == 1024 # TRUE, het is dus goed gegaan\n\ne.\n\nplot(bacterien$temperatuur, bacterien$groeisnelheid, \n     type = \"b\", col='seagreen', lwd=2,\n     xlab = \"Temperatuur (Celcius)\", ylab = \"Groeisnelheid (per uur)\",\n     main = \"Groeisnelheid vs Temperatuur\")\n\nOefening 2.4\na. In R geeft lengtes&gt;=15 een vector van TRUE en FALSE terug. Deze kun je meteen doorgeven aan sum, en deze geeft dan het totaal aantal:\n\nlengtes &lt;- c(12, 18, 7, 21, 15, 16, 14, 10, 20, 17)\ngrootgenoeg &lt;- sum(lengtes&gt;=15) # groot genoeg\nprint(paste(\"Aantal vissen groter of gelijk aan 15 cm:\", grootgenoeg))\n\nb. Vergelijkbaar met de vorige vraag, maar we moeten nog het percentage uitrekenen.\n\nlengtes &lt;- c(12, 18, 7, 21, 15, 16, 14, 10, 20, 17)\ntotaal_vissen &lt;- length(lengtes)  # Totaal aantal vissen\nvissen_te_klein &lt;- sum(lengtes &lt; 15)  # Aantal vissen kleiner dan 15 cm\npercentage_te_klein &lt;- (vissen_te_klein / totaal_vissen) * 100\nprint(paste(\"Percentage vissen kleiner dan 15 cm:\", percentage_te_klein, \"%\"))\n\nc. Indexing doen we met vierkante haken, maar in dit geval gebruiken we niet de specifieke posities (1,2,5), maar de conditie (TRUE, FALSE, FALSE, etc.):\n\nlengtes_vissen_vrijlaten &lt;- lengtes[lengtes &gt;= 15]\nprint(lengtes_vissen_vrijlaten)\n\nd. Om dit te doen ‘loopen’ we over de vector van lengtes, en testen of elke vis aan de voorwaarde voldoet:\n\nfor (l in lengtes) {\n  if (l &gt;= 15) {\n    print(paste(\"Vis van\", l, \"cm is groot genoeg om vrij te laten.\"))\n  } else {\n    print(paste(\"Vis van\", l, \"cm is te klein.\"))\n  }\n}",
    "crumbs": [
      "Bijlagen",
      "Antwoorden R"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_R.html#extra-r-oefeningen-en-oefentoets",
    "href": "Appendices/antwoorden_R.html#extra-r-oefeningen-en-oefentoets",
    "title": "Antwoorden R",
    "section": "Extra R oefeningen en oefentoets",
    "text": "Extra R oefeningen en oefentoets\nOefening 1\na.\n\n# waarden instellen\na &lt;- 2.5\nb &lt;- 11\nc &lt;- 0.01\n\n# bereken de uitkomst\nuitkomst &lt;- a/b+a*(c+a)\n\na &lt;- 5\n\nb. Bij het berekenen van uitkomst worden de parameters a, b, en c\ngebruikt om iets te berekenen. Dit komt neer op pasta, groente en pesto combineren in een gerecht. Dat je daarna de pesto aanpast verandert niet je gerecht: die was al klaar.\nOefening 2\nNa het maken van deze vraag, zou je script er ongeveer zo uit kunnen zien:\na.\n\nx &lt;- 14\nx &lt;- x + 2.3\n\nb.\n\nx &lt;- 14\n\nfor(i in 1:100){\n  x &lt;- x + 2.3\n}\n\nc.\n\nx &lt;- 14\nn &lt;- 50\n\nfor(i in 1:n){\n  x &lt;- x + 2.3\n}\n\nd.\n\nx &lt;- 14\nn &lt;- 50\n\nfor(i in 1:n){\n  x &lt;- x + 2.3\n  x &lt;- x / 1.5\n}\nprint(x)\n\n[1] 4.6\n\n\nAan het einde van de loop is x gelijk aan 4.6.\ne\n\nx &lt;- 14\nn &lt;- 100\n\nfor(i in 1:n){\n  x &lt;- x + 2.3\n  x &lt;- x / 1.5\n}\nprint(x)\n\n[1] 4.6\n\n\nAan het einde van deze loop is x ook gelijk aan 4.6!\nf. Als we de waarde van x elke stap printen, zien we daarom d en e hetzelfde antwoord geven:\n\nx &lt;- 14\nn &lt;- 100\n\nfor(i in 1:n){\n  x &lt;- x + 2.3\n  x &lt;- x / 1.5\n  cat('In stap', i, 'is de waarde van x', x, '\\n')\n}\n\nIn stap 1 is de waarde van x 10.86667 \nIn stap 2 is de waarde van x 8.777778 \nIn stap 3 is de waarde van x 7.385185 \nIn stap 4 is de waarde van x 6.45679 \nIn stap 5 is de waarde van x 5.83786 \nIn stap 6 is de waarde van x 5.42524 \nIn stap 7 is de waarde van x 5.15016 \nIn stap 8 is de waarde van x 4.966773 \nIn stap 9 is de waarde van x 4.844516 \nIn stap 10 is de waarde van x 4.76301 \nIn stap 11 is de waarde van x 4.708674 \nIn stap 12 is de waarde van x 4.672449 \nIn stap 13 is de waarde van x 4.648299 \nIn stap 14 is de waarde van x 4.6322 \nIn stap 15 is de waarde van x 4.621466 \nIn stap 16 is de waarde van x 4.614311 \nIn stap 17 is de waarde van x 4.609541 \nIn stap 18 is de waarde van x 4.60636 \nIn stap 19 is de waarde van x 4.60424 \nIn stap 20 is de waarde van x 4.602827 \nIn stap 21 is de waarde van x 4.601885 \nIn stap 22 is de waarde van x 4.601256 \nIn stap 23 is de waarde van x 4.600838 \nIn stap 24 is de waarde van x 4.600558 \nIn stap 25 is de waarde van x 4.600372 \nIn stap 26 is de waarde van x 4.600248 \nIn stap 27 is de waarde van x 4.600165 \nIn stap 28 is de waarde van x 4.60011 \nIn stap 29 is de waarde van x 4.600074 \nIn stap 30 is de waarde van x 4.600049 \nIn stap 31 is de waarde van x 4.600033 \nIn stap 32 is de waarde van x 4.600022 \nIn stap 33 is de waarde van x 4.600015 \nIn stap 34 is de waarde van x 4.60001 \nIn stap 35 is de waarde van x 4.600006 \nIn stap 36 is de waarde van x 4.600004 \nIn stap 37 is de waarde van x 4.600003 \nIn stap 38 is de waarde van x 4.600002 \nIn stap 39 is de waarde van x 4.600001 \nIn stap 40 is de waarde van x 4.600001 \nIn stap 41 is de waarde van x 4.600001 \nIn stap 42 is de waarde van x 4.6 \nIn stap 43 is de waarde van x 4.6 \nIn stap 44 is de waarde van x 4.6 \nIn stap 45 is de waarde van x 4.6 \nIn stap 46 is de waarde van x 4.6 \nIn stap 47 is de waarde van x 4.6 \nIn stap 48 is de waarde van x 4.6 \nIn stap 49 is de waarde van x 4.6 \nIn stap 50 is de waarde van x 4.6 \nIn stap 51 is de waarde van x 4.6 \nIn stap 52 is de waarde van x 4.6 \nIn stap 53 is de waarde van x 4.6 \nIn stap 54 is de waarde van x 4.6 \nIn stap 55 is de waarde van x 4.6 \nIn stap 56 is de waarde van x 4.6 \nIn stap 57 is de waarde van x 4.6 \nIn stap 58 is de waarde van x 4.6 \nIn stap 59 is de waarde van x 4.6 \nIn stap 60 is de waarde van x 4.6 \nIn stap 61 is de waarde van x 4.6 \nIn stap 62 is de waarde van x 4.6 \nIn stap 63 is de waarde van x 4.6 \nIn stap 64 is de waarde van x 4.6 \nIn stap 65 is de waarde van x 4.6 \nIn stap 66 is de waarde van x 4.6 \nIn stap 67 is de waarde van x 4.6 \nIn stap 68 is de waarde van x 4.6 \nIn stap 69 is de waarde van x 4.6 \nIn stap 70 is de waarde van x 4.6 \nIn stap 71 is de waarde van x 4.6 \nIn stap 72 is de waarde van x 4.6 \nIn stap 73 is de waarde van x 4.6 \nIn stap 74 is de waarde van x 4.6 \nIn stap 75 is de waarde van x 4.6 \nIn stap 76 is de waarde van x 4.6 \nIn stap 77 is de waarde van x 4.6 \nIn stap 78 is de waarde van x 4.6 \nIn stap 79 is de waarde van x 4.6 \nIn stap 80 is de waarde van x 4.6 \nIn stap 81 is de waarde van x 4.6 \nIn stap 82 is de waarde van x 4.6 \nIn stap 83 is de waarde van x 4.6 \nIn stap 84 is de waarde van x 4.6 \nIn stap 85 is de waarde van x 4.6 \nIn stap 86 is de waarde van x 4.6 \nIn stap 87 is de waarde van x 4.6 \nIn stap 88 is de waarde van x 4.6 \nIn stap 89 is de waarde van x 4.6 \nIn stap 90 is de waarde van x 4.6 \nIn stap 91 is de waarde van x 4.6 \nIn stap 92 is de waarde van x 4.6 \nIn stap 93 is de waarde van x 4.6 \nIn stap 94 is de waarde van x 4.6 \nIn stap 95 is de waarde van x 4.6 \nIn stap 96 is de waarde van x 4.6 \nIn stap 97 is de waarde van x 4.6 \nIn stap 98 is de waarde van x 4.6 \nIn stap 99 is de waarde van x 4.6 \nIn stap 100 is de waarde van x 4.6 \n\n\nDe waarde van x in deze berekening geconvergeerd in 41 stappen al naar 4.6. Daarom is na zowel 50 als na 100 stappen het antwoord 4.6. Echter zijn dit wel afrondingen, want als je het aantaal decimalen in R op 20 zet met options(digits=20), dan zie je dat de waarden eigenlijk 4.6000000147422879238 en 4.6000000000000005329 zijn.\nOefening 3\na. Vijf kolommen. Dit is geen CSV (comma-separated-values) bestand, want de kolommen zijn gescheiden door spaties, niet komma’s.\nb.\n\nnrow(covid) # 52, dus dat klopt\nncol(covid) # 1, dit is fout! Alle data wordt als 1 kolom ingelezen.\n\nc.\n\nncol(covid) # 5, precies goed!\nnrow(covid) # 53, dat is 1 te veel... \nView(covid) # Aha... de kolomnamen worden als \"eerste rij\" ingelezen...\n\nd.\n\nmean(covid$positieve_testen) # gemiddeld 1563.5 positieve testen per week\n\ne.\n\nhead(covid,n=12)\n\nf.\n\n# Lees het bestand covid.txt op de website in met 'read.table'\ncovid &lt;- read.table(\"http://tbb.bio.uu.nl/bvd/bms/data/covid.txt\",header=T)\nstr(covid) \n# 5 rijen (observaties) en \n# 5 kolommen (variables), \n# allemaal van type 'int' (integer: gehele getallen)\n\n# deze zelfde informatie kan je ook op andere manieren verkrijgen\nnrow(covid) # 52\nncol(covid) # 5\ntypeof(covid$week) # integer (geheel getal)\n\ng.\n\n# Lees het bestand covid.txt op de website in met 'read.table'\ncovid &lt;- read.table(\"http://tbb.bio.uu.nl/bvd/bms/data/covid.txt\",header=T)\ncovid_subset &lt;- covid[14:19,] # selecteer rij 14:19\n\nx &lt;- covid_subset$datapunt # alle x-punten in een vector\ny &lt;- covid_subset$positieve_testen # alle y-punten in een vector\n\nplot(x,y, type='b',lwd=2, log=\"y\",\n     xlab=\"Datapunt\", ylab=\"Aantal positieve testen (log-schaal)\",\n     col=\"darkblue\", main=\"Aantal positieve Covid-19 testen in Utrecht\") \n\nh.\n\ncovid &lt;- read.table(\"http://tbb.bio.uu.nl/bvd/bms/data/covid.txt\",header=T)\nx &lt;- covid$datapunt # alle x-punten in een vector\ny &lt;- covid$positieve_testen # alle y-punten in een vector\n\nplot(x,y, type='b',lwd=2, log=\"y\",\n     xlab=\"Datapunt\", ylab=\"Aantal positieve testen (log-schaal)\",\n     col=\"darkblue\", main=\"Aantal positieve Covid-19 testen in Utrecht\\nDikkere punten geven pieken weer\") \n\n\ncovid_subset &lt;- covid[covid$positieve_testen &gt; 1000,]\nx &lt;- covid_subset$datapunt # alle x-punten in een vector\ny &lt;- covid_subset$positieve_testen # alle y-punten in een vector\n\npoints(x,y, lwd=5, log=\"y\", col=\"darkblue\") \n\nOefening 4\na.\n\nfor(i in 1:12){\n  dobbelsteen &lt;- sample(1:6,1) # getal van 1 t/m 6 (dobbelsteen worp)\n  if(dobbelsteen&gt;=4) cat(paste(\"Worp nummer\",i,\"is\",dobbelsteen,\"\\n\"))\n}\n\nb.\n\naantal_keren_hoera &lt;- 0\nfor(e in 1:100){\n  aantal_keren_6 &lt;- 0\n  for(i in 1:12){\n    dobbelsteen &lt;- sample(1:6,1) # getal van 1 t/m 6 (dobbelsteen worp)\n    if(dobbelsteen ==6) aantal_keren_6 &lt;- aantal_keren_6 + 1\n  }\n  if(aantal_keren_6==1) {\n    cat(\"Hoera!\\n\")\n    aantal_keren_hoera &lt;- aantal_keren_hoera + 1\n  }\n  else{\n    cat(\"Niet hoera :(\\n\")\n  }\n}\ncat(\"Er is in totaal\", aantal_keren_hoera, \"keer 'Hoera!' geprint\\n\")",
    "crumbs": [
      "Bijlagen",
      "Antwoorden R"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_R.html#oefentoetsje-r",
    "href": "Appendices/antwoorden_R.html#oefentoetsje-r",
    "title": "Antwoorden R",
    "section": "Oefentoetsje R",
    "text": "Oefentoetsje R\nOefening 5\na. Een matrix is een tabel met allemaal dezelfde type waarden, terwijl een dataframe voor elke kolom een ander type data kan bevatten.\nb. Hoewel er een nummer staat, is x van het type ‘character’ omdat het tussen aanhalingstekens staat.\nc. De tweede waarde van de vector x is 1.5.\n\nx &lt;- seq(1,10,by=0.5)\nx[2]\n\nd. De vector x bevat nu alle gehele getallen van 10 tot en met 1. De eerste waarde van deze vector is 10.\n\nx &lt;- 10:1\nx[1] \n\ne. x[1] weet je niet, want runif geeft willekeurig getallen. Je weet wél dat het getal tussen 0 en 1 zal liggen. x[11] bestaat niet, want er zijn maar 10 getallen gegenereerd R geeft in dit geval ‘NA’ (not available).\nf. Om voor ieder persoon de score “per minuut” te berekenen, moeten we de score door het aantal minuten delen (“per” kun je eigenlijk altijd lezen als “gedeeld door”). Dit kunnen we doen door met het dollar-teken de kolommen te pakken, en deze door elkaar te delen. Deze nieuwe vector (hieronder ‘spm’) kan je dan ook als nieuwe kolom aan de dataframe toevoegen:\n\nspm &lt;- df$score/df$minuten\ndf$score_per_minuut &lt;- spm\n\ng. dieren[2,3:4] geeft rij 2, kolom 3 en 4 terug. Let op: de eerste regel zijn de kolomnamen, dus de 2e rij is niet Joey, maar Roos! Daarom geeft dieren[2,3:4] de waarden “wit” en “energiek”.\nh. De waarde begint op 1, en dan loopt de for-loop over de waarden 1, 2 en 3. Deze waarden worden steeds aan a toegevoegd. Dus er wordt eerst 1, dan 2, en dan nog een keer 3 bij a opgeteld. Aan het einde is a dus 1+1+2+3 = 7.\ni.\na -&gt; C\nb -&gt; B\nc -&gt; E\nd -&gt; A\ne -&gt; D\nf -&gt; F\nj. Optie d geeft geen serie van 1 t/m 10, maar een vector met daarin alleen 1 en 10.\nk. Optie b. In R gebruik je vierkante haken om te ‘indexeren’. Omdat het een vector is heb je geen komma’s nodig om onderscheid te maken tussen rijen en kolommen.\nl. Optie b. Drie is niet groter dan vijf, dus zal R ‘FALSE’ teruggeven.\nm. Optie d. Vanaf de tweede waarde (20) zijn alle getallen groter dan óf gelijk aan 20. Let op: hier worden deze waarden (nog) niet geselecteerd!\nn. Optie h. Vanaf de tweede waarde (20) zijn alle getallen groter dan óf gelijk aan 20. Anders dan de vorige vraag, selecteren we hier deze opties, en krijgen we 20, 30, 40 terug.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden R"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_wiskunde.html",
    "href": "Appendices/antwoorden_wiskunde.html",
    "title": "Antwoorden wiskunde",
    "section": "",
    "text": "Antwoorden 4  Algebra\nOefening 4.1\na.\nb.\nc.\nOefening 4.2\nOefening 4.3\na.\nb.\nEr staat een x onder de breuk, dus eerst werken we die weg: | \\(x + {4 \\over x} = 4\\) | \\(x^2+4=4x\\) en \\(x\\neq0\\) | \\(x^2-4x+4=0\\) Nu hebben we een kwadratische vergelijking gelijk gesteld aan 0. Deze kunnen we op twee manieren verder oplossen. Je kan het bijvoorbeeld uitwerken met de ABC-formule:\nOf je zou kunnen zien dat je de kwadratische vergelijking kan ontbinden in factoren:\nWaardoor je kan zien dat \\(x\\) = 2 het enige antwoord is: alleen dan is de vergelijking gelijk aan 0.\nc.\nd.\ne.\nOefening 4.4\na. \\[{x_{11}} + {x_{12}} + {x_{13}} = \\sum_{i=11}^{13}(x_i)\\]\nb. \\[{x_1}^3 + {x_2}^3 + {x_3}^3 + {x_4}^3 = \\sum_{i=1}^{4}({x_i}^3)\\]\nc. \\[1^2 + 2^3 + 3^4 + 4^5 = \\sum_{i=1}^{4}(i^{i+1})\\]",
    "crumbs": [
      "Bijlagen",
      "Antwoorden wiskunde"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-algebra",
    "href": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-algebra",
    "title": "Antwoorden wiskunde",
    "section": "",
    "text": "\\(3x + 5 = 11\\)\n\\(3x = 6\\)\n\\(x = 6/3 = 2\\)\n\n\\(x^2 + 2x - 8 = 0\\)\n\\((x + 4)(x - 2) = 0\\)\n\\(x = -4\\) of \\(x = 2\\)\n\nAlternatieve methode: \\(abc\\)-formule:\n\\(a=1\\), \\(b=2\\), \\(c=-8\\)\n\\(x_{1,2} = \\frac{-2 \\pm \\sqrt{2^2 - 4\\cdot-8}}{2}\\)\n\\(x_{1,2} = \\frac{-2 \\pm \\sqrt{4 -- 32}}{2}\\)\n\\(x_{1,2} = \\frac{-2 \\pm \\sqrt{36}}{2}\\)\n\\(x_{1,2} = \\frac{-2 \\pm 6}{2}\\)\n\\(x_{1} = \\frac{-2 + 6}{2} = \\frac{4}{2} = 2\\)\n\\(x_{2} = \\frac{-2 - 6}{2} = \\frac{-8}{2} = -4\\)\n\n\\(x^2 - 9 = 0\\)\n\\(x^2 = 9\\)\n\\(x = \\pm \\sqrt{9} = \\pm 3\\)\n\n\\((ax-2by)(3y-4bx)+2b(2ax^2+3y^2)-8xyb^2 =\\)\n\\(ax\\cdot3y - ax\\cdot4bx - 2by\\cdot3y + 2by\\cdot4bx + 2b\\cdot2ax^2 + 2b\\cdot3y^2 -8xyb^2 =\\)\n\\(3axy - 4abx^2 - 6by^2 + 8xyb^2 + 4abx^2 + 6by^2 - 8xyb^2 =\\)\n\\(3axy\\)\n\n\n\\(3r + 2 -5r-5 = 6r+4\\)\n\\(-2r-3=6r+4\\)\n\\(-7=8r\\)\n\\(r=-{7 \\over 8}\\)\n\n\n\\(x_{1,2}={4 \\pm \\sqrt{4^2-4*1*4} \\over 2}\\)\n\\(x_{1,2}=2 \\pm \\sqrt{0}=2\\)\n\n\\(x^2-4x+4=0\\)\n\\((x-2)^2=0\\)\n\n\n\\((b-{N \\over k})N=0\\)\n\\(N=0\\), of \\(b - {N \\over k} =0\\)\n\\(N=bk\\)\n\n\\(N=0\\), of \\(b-d(1+{N \\over k})=0\\)\n\\(d(1+{N \\over k})=b\\)\n\\((1+{N \\over k})={b\\over d}\\)\n\\({N \\over k}={b \\over d}-1\\)\n\\(N=k({b\\over d} -1)\\)\n\n\\(N=0\\), of \\({b \\over 1+N/h}-d=0\\)\n\\({b \\over 1+N/h}=d\\)\n\\(b=d(1+N/h)\\)\n\\(b=d+(d/h)N\\)\n\\(b-d=(d/h)N\\)\n\\(N={(b-d)h \\over d}\\)\n\\(N=h{b-d \\over d}\\)\n\\(N=h({b \\over d}-1)\\)",
    "crumbs": [
      "Bijlagen",
      "Antwoorden wiskunde"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-breuken",
    "href": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-breuken",
    "title": "Antwoorden wiskunde",
    "section": "Antwoorden 5  Breuken",
    "text": "Antwoorden 5  Breuken\nOefening 5.1\na. \\(\\frac{1}{7}\\cdot\\frac{2}{4} = \\frac{2}{28} = \\frac{1}{14}\\)\nb. \\(\\frac{1}{6}-\\frac{2}{3}=\\frac{3}{18}-\\frac{12}{18}=-\\frac{9}{18}=-\\frac{1}{2}\\)\nc. \\(\\frac{2}{3}:\\frac{4}{5}=\\frac{2}{3}\\cdot\\frac{5}{4}=\\frac{10}{12}=\\frac{5}{6}\\)\nd. \\(\\frac{4}{12}+\\frac{5}{36}=\\frac{12}{36}+\\frac{5}{36}=\\frac{17}{36}\\)\nOefening 5.2\n\\(2400-(\\frac{1}{3}+\\frac{1}{7}+\\frac{1}{4})2400+\\frac{1}{3}\\cdot\\frac{1}{3}\\cdot2400=\\)\n\\(2400-(\\frac{1\\cdot7\\cdot4}{3\\cdot7\\cdot4}+\\frac{1\\cdot3\\cdot4}{7\\cdot3\\cdot4}+\\frac{1\\cdot3\\cdot7}{4\\cdot3\\cdot7})2400+\\frac{1}{9}\\cdot2400=\\)\n\\(2400-(\\frac{28}{84}+\\frac{12}{84}+\\frac{21}{84})2400+\\frac{1}{9}\\cdot2400=\\)\n\\(2400-\\frac{61}{84}\\cdot2400+\\frac{2400}{9}=\\)\n\\(2400-\\frac{146400}{84}+\\frac{2400}{9}=\\)\n\\(2400-1742,85+266,67=\\)\n\\(2400-1476,18=923,81\\)\nOefening 5.3\n\\(\\frac{6}{r} - \\frac{5r}{30r+5} =\\)\n\\(\\frac{6(30r + 5)}{r(30r + 5)} - \\frac{5r\\cdot r}{r(30r+5)} =\\)\n\\(\\frac{180r + 30}{30r^2 + 5r} - \\frac{5r^2}{30r^2+5r} =\\)\n\\(\\frac{-5r^2 + 180r + 30}{30r^2 + 5r} =\\)\n\\(\\frac{-r^2 + 36r + 6}{6r^2 + r}\\)\nOefening 5.4\n\\(\\frac{a}{b}x - \\frac{c}{d} = \\frac{e}{f}\\)\n\\(\\frac{a}{b}x=\\frac{e}{f}+\\frac{c}{d}\\)\n\\(\\frac{a}{b}x=\\frac{ed+cf}{df}\\)\n\\(x=\\frac{(ed+cf)b}{afd}\\)\nOefening 5.5\n\\(25A\\div\\frac{3}{7} = 12 - \\frac{1}{3}A\\)\n\\(25 A \\cdot\\frac{7}{3}=12-\\frac{1}{3}A\\)\n\\(\\frac{175}{3}A=12-\\frac{1}{3}A\\)\n\\(\\frac{176}{3}A=12\\)\n\\(A=12\\frac{3}{176}=\\frac{36}{176}=\\frac{18}{88}=\\frac{9}{44}\\)",
    "crumbs": [
      "Bijlagen",
      "Antwoorden wiskunde"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-exponenten",
    "href": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-exponenten",
    "title": "Antwoorden wiskunde",
    "section": "Antwoorden 6  Exponenten & Logaritmen",
    "text": "Antwoorden 6  Exponenten & Logaritmen\nOefening 6.1\na. \\(7^{345} \\cdot 7^5 = 7^{345 + 5} = 7^{350}\\)\nb. \\(32^{20} \\cdot 32^{18} = 32^{20 + 18} = 32^{38}\\)\nc. \\(2^5 \\cdot 2^2 \\cdot 2^3 = 2^{5 + 2 + 3} = 2^{10}\\)\nd. \\(3^{25} \\cdot 3^{25} \\cdot 3^{25} = (3^{25})^3 = 3^{3 \\cdot 25} = 3^{75}\\)\nOf: \\(3^{25} \\cdot 3^{25} \\cdot 3^{25} = 3^{25+25+25} = 3^{75}\\)\nOefening 6.2\na. \\(\\log{100} = 2\\), want \\(10^2 = 100\\)\nb. \\(^2\\log{64} = 6\\), want \\(2^6 = 64\\)\nc. \\(^8\\log{512} = 3\\), want \\(8^3 = 512\\)\nd. \\(^5\\log{125} = 3\\), want \\(5^3 = 125\\)\nOefening 6.3\nHet aantal bacteriën na \\(n\\) generaties wordt beschreven in Vergelijking 6.1 .\nIn 3 uur deelt Bacillus cereus \\(3 / 0,5 = 6\\) keer. Dus, \\(n=6\\).\nHet aantal bacteriën waarmee we starten, \\(s\\), is gelijk aan 100.\nInvullen in de formule geeft:\n\\(B = 100 \\cdot 2^6 = 100 \\cdot 64 = 6400\\) bacteriën na 3 uur.\nOefening 6.4\nEerst bepalen we de delingssnelheid van de kolonie:\nIn twee uur tijd (\\(5 - 3 = 2\\)) is het aantal bacteriën gegroeid van 10.000 naar 40.000. Het aantal bacteriën is dus verviervoudigd (\\(40.000/10.000=4\\)). Dit betekent dat elke bacterie \\(^2\\log{4} = 2\\) delingen heeft gedaan in 2 uur tijd. Gemiddeld is dat dus één deling per uur.\n\nNu kunnen we Vergelijking 6.1 gebruiken om te berekenen hoeveel bacteriën er waren op tijdstip 0:\n\\(B = s\\cdot2^n\\)\nHet aantal bacteriën \\(B\\) weten we, net als het aantal delingen \\(n\\).\nNa 3 uur geldt \\(B = 10.000\\) en \\(n = 3\\).\n\\(10.000 = s\\cdot2^3\\)\n\\(10.000 = s\\cdot8\\)\n\\(s = 10.000 / 8 = 1250\\) bacteriën op tijdstip 0.\nOefening 6.5\na.\nals \\(\\log (2x) = 3\\) dan \\(10^3 = 2x\\)\n\\(2x = 1000\\)\n\\(x = 1000/2 = 500\\)\nb.\n\\(5e^x=11\\)\n\\(e^x=11/5\\)\n\\(x = \\ln{11 \\over 5} = 0.788\\)\nc.\nals \\(\\log_2(64^x)=36\\) dan \\(2^{36} = 64^x\\)\naangezien \\(64=2^6\\) kunnen we dit ook schrijven als \\(2^{36} = (2^6)^x\\)\n\\(2^{36} = 2^{6x}\\)\n\\(36 = 6x\\)\n\\(x = 36/6 = 6\\)\nOefening 6.6\n\\(\\frac{(n^{-3})^4}{(n^{4}p^{-3})^{-3}}=\\frac{n^{-3\\cdot4}}{n^{4\\cdot-3}p^{-3\\cdot-3}}=\\frac{n^{-12}}{n^{-12}p^{9}}= \\frac{1}{p^9} = p^{-9}\\)",
    "crumbs": [
      "Bijlagen",
      "Antwoorden wiskunde"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-limieten",
    "href": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-limieten",
    "title": "Antwoorden wiskunde",
    "section": "Antwoorden 7  Asymptoten & Limieten",
    "text": "Antwoorden 7  Asymptoten & Limieten\nOefening 7.1\na. Focus op de hoogste macht van \\(x\\) in de functie: \\(3x^2\\). Dit is een positieve term, dus de hele functie gaat naar \\(+ \\infty\\) als \\(x\\to\\infty\\).\nb. We benaderen de asymptoot \\(x=0\\) vanaf de positieve kant. \\(1\\over x\\) voor een hele kleine \\(x\\)-waarde resulteert in een grote positieve waarde, dus de functie gaat naar \\(+ \\infty\\).\nc. We benaderen de asymptoot \\(x=0\\) vanaf de negatieve kant. \\(1\\over x\\) voor een hele kleine negatieve \\(x\\)-waarde resulteert in een grote negatieve waarde, dus de functie gaat naar \\(- \\infty\\).\nd. In de limiet van \\(x\\) naar oneindig, staat hier dus eigenlijk “oneindig” gedeeld door “oneindig+2”. Die “+2” is dan niet zo belangrijk meer (deze wordt verwaarloosbaar). In de limiet staat hier dus \\(x\\) gedeeld door \\(x\\), wat gelijk is aan 1. De functie gaat dus naar 1.\ne. In de limiet van \\(x\\) naar oneindig, staat hier dus eigenlijk “1” gedeeld door “oneindig+a”. Die \\(a\\) is een constante waarde (dus is deze is net als de waarde 2 in vraag d, verwaarloosbaar). Als je 1 deelt door 1000 krijg je een duizendste. Als je 1 deelt door 1,000,000 krijg je een miljoenste. Als we zo door redeneren: als je 1 deelt door oneindig dan naderen we 0. De functie gaat dus naar 0. (let op dat je wiskundig helemaal niet door 0 “mag” delen, want daar krijg je rare stellingen van zoals de in het college besproken stelling dat 1 gelijk is aan 2) \n\n\n\n\n\n\n\nf. Dit is een rationale functie, dus we kunnen het stappenplan zoals omschreven in het boek gebruiken:\n1. De grootste macht van \\(x\\) is \\(x^3\\).\n2. Delen door \\(x^3\\) geeft \\({{ax^2 \\over x^3}+{b \\over x^3} \\over {cx^3 \\over x^3}}+d = {{a \\over x}+{b \\over x^3} \\over c}+d\\).\n\n\n\n\n\n\nOpgelet\n\n\n\n\\(d\\) wordt niet gedeeld door \\(x^3\\), omdat deze niet in de breuk staat. | We mogen elke term in de breuk delen door dezelfde waarde, omdat we daarmee niet de uitkomst van de breuk veranderen. Als we echter een enkele waarde delen door een factor, dan krijgen we een hele andere uitkomst.\n\n\n3. De limiet wordt dan: \\({0+0 \\over c}+d = d\\)\nOefening 7.2\na.\nHorizontale asymptoot: \\(y=2\\)\n\\(\\lim_{x\\to\\pm\\infty} \\frac{x}{x-2}+1=2\\), want\n1. De grootste macht van \\(x\\) is \\(x\\).\n2. Delen door \\(x\\) geeft \\({{x \\over x} \\over {x \\over x}-{2 \\over x}} + 1 = {1 \\over 1-{2 \\over x}} + 1\\)\n3. De limiet wordt dan: \\({1 \\over 1 - 0} + 1 = 2\\)\nVerticale asymptoot: \\(x=2\\)\nWe hebben een verticale asymptoot als er een waarde voor \\(x\\) is waarbij we door 0 moeten delen (de noemer is gelijk aan 0). Dit is het geval als \\(x-2=0\\) dus voor \\(x=2\\).\nb.\nHorizontale asymptoot: \\(y={a \\over b+0} - d\\)\n1. De grootste macht van \\(x\\) is \\(x\\).\n2. Delen door \\(x\\) geeft \\({{ax \\over x} \\over {bx \\over x}+{c \\over x}} - d = {a \\over b+{c \\over x}} - d\\)\n3. De limiet wordt dan: \\({a \\over b+0} - d\\)\nOmdat \\(d &gt; a/b\\), bevindt de asymptoot zich in het negatieve domein.\nVerticale asymptoot: \\(x=-{c \\over b}\\)\nWe hebben een verticale asymptoot als er een waarde voor \\(x\\) is waarbij we door 0 moeten delen (de noemer is gelijk aan 0). Dit is het geval als \\(bx+c=0\\) dus voor \\(x=-{c \\over b}\\).",
    "crumbs": [
      "Bijlagen",
      "Antwoorden wiskunde"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-afgeleiden",
    "href": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-afgeleiden",
    "title": "Antwoorden wiskunde",
    "section": "Antwoorden 8  Afgeleiden",
    "text": "Antwoorden 8  Afgeleiden\nOefening 8.1\na. \\(f'(x)=2x+15\\)\nb. \\(f'(x)=5\\cdot12x^4=60x^4\\)\nc. \\(f'(x)=-4\\cdot7x^{-5}=-\\frac{28}{x^5}\\)\nd. \\(f'(x)=3\\cdot ax^2-5\\cdot bx^4\\)\nOefening 8.2\nZoals je in de tabel kunt zien, is de afgeleide van \\(f(x)=e^x\\) gelijk aan \\(f'(x)=e^x\\). Het is nuttig om exponentiële groei op te schrijven met het grondtal \\(e\\) (het getal van Euler, ongeveer gelijk aan 2,718), omdat dit het berekenen en differentiëren van exponentiële functies aanzienlijk vereenvoudigt, vooral in natuurwetenschappen, economie en wiskunde.\nWanneer we een exponentiële functie hebben van de vorm \\(f(x)=ae^{bx}\\), dan is de afgeleide van deze functie simpelweg \\(f'(x)=b \\cdot ae^{bx}\\). Dit komt doordat de afgeleide van \\(f(x)=ae^{bx}\\) direct een vermenigvuldiging van de originele functie met de constante \\(b\\) oplevert. Dit maakt het rekenen met groeifactoren veel eenvoudiger en overzichtelijker dan wanneer een ander grondtal zou worden gebruikt.\nDaarnaast wordt \\(e\\) vaak beschouwd als de natuurlijke groeifactor, omdat processen in de natuur, zoals populatiegroei en radioactief verval, vaak op een manier groeien of afnemen die goed beschreven kan worden door een functie met grondtal \\(e\\). Hierdoor wordt het gebruik van \\(e\\) niet alleen wiskundig handig, maar ook intuïtief passend bij de manier waarop veel natuurlijke processen zich gedragen.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden wiskunde"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-schetsen",
    "href": "Appendices/antwoorden_wiskunde.html#antwoorden-sec-schetsen",
    "title": "Antwoorden wiskunde",
    "section": "Antwoorden 9  Functies schetsen",
    "text": "Antwoorden 9  Functies schetsen\nOefening 9.1\na. \\(y=3-6x\\)\n1. Snijpunten met de x-as:\n\\(y = 0 \\quad \\Rightarrow \\quad 3 - 6x = 0 \\quad \\Rightarrow \\quad x = \\frac{1}{2}\\)\n2. Snijpunten met de y-as:\n\\(y = 3 - 6 \\cdot 0 = 3\\)\n3. Horizontale asymptoten:\nGeen.\n4. Verticale asymptoten:\nGeen.\n5: Minima en maxima:\nGeen.\n\n\n\n\n\n\n\n\nFiguur 1: Oefening 1a\n\n\n\n\n\nb. \\(y=px+q\\)\n1. Snijpunten met de x-as:\n\\(y = 0 \\quad \\Rightarrow \\quad px + q = 0 \\quad \\Rightarrow \\quad x = -\\frac{q}{p}\\)\n2. Snijpunten met de y-as:\n\\(y = f(0) = p \\cdot 0 + q = q\\)\n3. Horizontale asymptoten:\nGeen.\n4. Verticale asymptoten:\nGeen.\n5: Minima en maxima:\nGeen.\n\n\n\n\n\n\n\nFiguur 2: Oefening 1b\n\n\n\nc. \\(y=x-3x^2\\)\n1. Snijpunten met de x-as:\n\\(y = 0 \\quad \\Rightarrow \\quad x(1 - 3x) = 0 \\quad \\Rightarrow \\quad x = 0 \\text{ of } x = \\frac{1}{3}\\)\n2. Snijpunten met de y-as:\n\\(y = f(0) = 0 - 2\\cdot 0^2 = 0\\)\n3. Horizontale asymptoten:\nGeen.\n4. Verticale asymptoten:\nGeen.\n5: Minima en maxima:\nDe afgeleide is \\(f'(x) = 1 - 6x\\).\nGelijkstellen aan 0 om de minima en maxima te bepalen:\n\\(f'(x) = 1 - 6x = 0\\)\n\\(x = 1/6\\)\nDe y-waarde op \\(x = 1/6\\) is:\n\\(f(1/6) = \\frac{1}{6} - 3 \\left( \\frac{1}{6} \\right)^2 = \\frac{1}{6} - \\frac{1}{12} = \\frac{1}{12}\\)\n\n\n\n\n\n\n\n\nFiguur 3: Oefening 1c\n\n\n\n\n\nd. \\(y=(a-x) \\cdot (b-x) \\cdot (c-x)\\)\n1. Snijpunten met de x-as:\n\\(y = 0 \\quad \\Rightarrow \\quad (a - x)(b - x)(c - x) = 0\\)\nSnijpunten op de x-as op: \\(x=a\\), \\(x=b\\) en \\(x=c\\). Omdat we aannamen dat a kleiner is dan b, en b kleiner is dan c, zitten de snijpunten met de x-as dus in omgekeerde volgorode: eerst c, dan b, en dan a.\n2. Snijpunten met de y-as:\n\\(y = f(0) = (a-0) \\cdot (b-0 \\cdot (c-0) = abc\\)\n3. Horizontale asymptoten:\nGeen.\n4. Verticale asymptoten:\nGeen.\n5: Minima en maxima:\nTussen de snijpunten met de x-as, afhankelijk van de waarden van \\(a\\), \\(b\\) en \\(c\\). We kunnen nu twee curves tekenen die door deze drie snijpunten gaat: eentje die dalend begint, dan omhoog gaat, en dan weer naar beneden, en eentje die stijgend begint, dan naar beneden gaat, en dan weer omhoog. Als we willen weten welke van deze het goede antwoord is, kunnen we kijken wat er gebeurt als \\(x&gt;c\\), dus als we rechts van alle snijpunten zitten. Hier zijn alle drie de termen tussen de haakjes negatief, dus krijgen we een negatief getal keer een negatief getal (positief), keer een negatief getal (weer negatief). Rechts van \\(c\\) zal de functie dus negatief zijn. Met deze invormatie kun je een vloeiende lijn schetsen die al deze punten raakt. Je kan je schets zelf controlleren om de juiste waarden in te vullen op Desmos:\n\n\n\n\n\n\n\nFiguur 4: Oefening 1d\n\n\n\ne. \\(y=x^3-5x^2\\)\n1. Snijpunten met de x-as:\n\\(y = 0 \\quad \\Rightarrow \\quad x^2(x - 5) = 0 \\quad \\Rightarrow \\quad x = 0 \\text{ of } x = 5\\)\n2. Snijpunten met de y-as:\n\\(y = f(0) = 0^3 - 5 \\cdot 0^2 = 0\\)\n3. Horizontale asymptoten:\nGeen horizontale asymptoten, want:\nVoor \\(y = \\lim x \\to + \\infty\\) geldt dat \\(y \\to + \\infty\\).\nVoor \\(y = \\lim x \\to - \\infty\\) geldt dat \\(y \\to - \\infty\\).\nOmdat dit geen constante waarde nadert, is er geen horizontale asymptoot.\n4. Verticale asymptoten:\nGeen.\n5: Minima en maxima:\nDe afgeleide is \\(f'(x) = 3x^2 - 10x\\).\nGelijkstellen aan 0 om de minima en maxima te bepalen:\n\\(f'(x) = 3x^2 - 10x = 0\\)\n\\(x(3x - 10) = 0\\)\n\\(x = 0\\) of \\(3x = 10 \\quad \\Rightarrow \\quad x = 10/3\\)\nDe y-waarde op \\(x = 0\\) is:\n\\(f(0) = 0\\)\nDe y-waarde op \\(x = 10/3\\) is:\n\\(f(\\frac{10}{3}) = (\\frac{10}{3})^3-5\\cdot(\\frac{10}{3})^2 = - \\frac{500}{27}\\)\n\n\n\n\n\n\n\n\nFiguur 5: Oefening 1e\n\n\n\n\n\nf. \\(y=\\frac{4x}{x+2}+4\\)\n1. Snijpunten met de x-as:\n\\(y = 0 \\quad \\Rightarrow \\quad \\frac{4x}{x+2} + 4 = 0 \\quad \\Rightarrow \\quad \\frac{4x}{x+2} = -4 \\Rightarrow\\)\n\\(4x = -4(x+2) \\Rightarrow 4x = -4x - 8 \\Rightarrow 8x = -8 \\Rightarrow\\)\n\\(x = -1\\)\n2. Snijpunten met de y-as:\n\\(y = f(0) = \\frac{4\\cdot0}{0+2}+4 = 4\\)\n3. Horizontale asymptoten:\nDit is een rationale functie, dus we kunnen het stappenplan daarvoor gebruiken:\n  i) De hoogste macht van \\(x\\) is \\(x\\).\n  ii) Delen door \\(x\\) geeft \\(\\frac{\\frac{4x}{x}}{\\frac{x}{x}+\\frac{2}{x}}+4 = \\frac{4}{1+\\frac{2}{x}}+4\\).\n  iii) De limiet wordt dan: \\(\\frac{4}{1+0} + 4 = 8\\)\n4. Verticale asymptoten:\nEr is sprake van een verticale asymptoot als er een waarde voor \\(x\\) is waarbij de noemer 0 is, dus \\(x+2 = 0 \\Rightarrow x = -2\\)\n5: Minima en maxima:\nDe afgeleide is \\(f'(x) = \\frac{8}{(x+2)^2}\\). Dit kan nooit gelijk zijn aan 0, dus deze functie heeft geen minima of maxima.\n\n\nWarning: Removed 91 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\nWarning: Removed 38 rows containing missing values or values outside the scale range\n(`geom_line()`).\n\n\n\n\n\n\n\n\nFiguur 6: Oefening 1f\n\n\n\n\n\nOefening 9.2\na.\nAls er geen vossen zijn, geldt \\(V=0\\), dus:\n\\(K=a-b\\cdot0\\)\n\\(K=a\\)\nHet aantal konijnen \\(K\\) is dan gelijk aan \\(a\\). Als er wel vossen zouden zijn, wordt de negatieve term \\(b\\cdot V\\) groter. Het aantal konijnen neemt dan af en zal in aanwezigheid van vossen dus altijd kleiner zijn dan \\(a\\).\nb.\n\n\n\n\n\n\n\n\nFiguur 7: Oefening 2b\n\n\n\n\n\nc.\n\\(K = a - b\\cdot V\\)\n\\(K + b\\cdot V =a\\)\n\\(b\\cdot V = a - K\\)\n\\(V = \\frac{a-K}{b}\\)\nHet schetsen van deze functie geeft precies dezelfde grafiek als in b.\nd.\nHet maakt niet uit of je de functie herschrijft, de grafiek ziet er precies hetzelfde uit als de assen hetzelfde bijven. Vaak is het echter wel het makkelijkste om de grafiek te tekenen als je de variabele die je op de y-as wilt zetten (dus de vossen in dit geval) aan de linkerkant in de formule hebt staan, zoals het geval is in opdracht c. Het kan daarom nuttig zijn om een functie te herschrijven, maar het verandert niks aan de uitkomst.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden wiskunde"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_wiskunde.html#antwoorden-oefenvragen-oefen-tentamen",
    "href": "Appendices/antwoorden_wiskunde.html#antwoorden-oefenvragen-oefen-tentamen",
    "title": "Antwoorden wiskunde",
    "section": "Antwoorden oefenvragen (“oefen-tentamen”)",
    "text": "Antwoorden oefenvragen (“oefen-tentamen”)\nMeerkeuzevragen:\n\nE\nC\nB\nB\nB\nC\nB\nA\nA\nD\n\nOpen vragen:\n\nHier moet je de functie voor afleiden. De afgeleide van \\(3x^2\\)is \\(6x\\), dus bij \\(x=2\\) is de hellingshoek \\(12\\). Het antwoord dat je zou moeten invullen is dus 12.\nElke exponent kun je opschrijven als een logaritme. Je kunt hier dus schrijven \\(x+1 = {^2log{(16)}} = 4\\). Als \\(x+1\\) gelijk is aan 4, is x gelijk aan 3. Het antwoord dat je zou moeten invullen is dus 3.\nBoven de breuk staat een vermenigvuldiging met \\(x\\), dus als \\(x\\) naar 0 gaat, gaat de teller naar 0. De noemer gaat naar 2, dus er staat dan \\(0 \\over 2\\), wat 0 is. Het antwoord dat je zou moeten invullen is dus 0.\n\nGrafiek matchen:\nHet goede antwoord is A, omdat de functie sowieso een verticale asymptoot moet hebben bij \\(x=a\\), want als \\(x\\) en \\(a\\) aan elkaar gelijk zijn delen we door \\(0\\). Omdat alleen grafiek A deze asymptoot heeft, zijn we al klaar. Het antwoord is A, en al het andere is afleiding ;)",
    "crumbs": [
      "Bijlagen",
      "Antwoorden wiskunde"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html",
    "href": "Appendices/antwoorden_modellen.html",
    "title": "Antwoorden modellen",
    "section": "",
    "text": "Antwoorden introductie\nOefening 1\na. De dingen die veranderen (bijvoorbeeld over de tijd) noemen we variabelen. De dingen die veranderen zijn hier je bloedsuikerspiegel (a) en de hoeveelheid eiwit (c), dus dit zijn de variabelen.\nb. De snelheden (b en d) waarmee de variabelen veranderen, staan volgens de omschrijving vast, en zijn dus parameters.\nOefening 2\na. Eén van de aannames van een ODE-model is dat het systeem goed gemengd is (Figuur 2B). Naast de groeisnelheid is de ruimtelijke structuur bij een biofilm ook relevant, we voldoen dus niet aan de aanname van een goed gemengd systeem. Daarom is het beter om een ruimtelijk model te gebruiken voor het modelleren van een biofilm.\nb. Door goed te mengen zijn posities niet belangrijk, dus het modelleren van posities is dus niet inzichtelijk, en gaat hooguit veel tijd kosten (voor jou of voor de computer). Het is beter om dit systeem met bijvoorbeeld een ODE te beschrijven.\nc. De vorming van korstmossen is een proces waarbij ruimte belangrijk is, het is geen goed gemengd systeem. Een ruimtelijk model is dus het meest geschikt.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-exp",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-exp",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 10  Exponentiële groei",
    "text": "Antwoorden 10  Exponentiële groei\nOefening 10.1\na. Ja, het percentage is klein maar de groei is alsnog exponentieel! Dit kun je zien doordat de hoeveelheid rijst per vakje met een rechte lijn toeneemt op een log-lineaire schaal. Daarnaast hebben we aan de vorm van de formule niks veranderd, we hebben alleen de groeisnelheid kleiner gemaakt.\n\n# beginaantal rijst\nR &lt;- 1\n\n# herhaal iets 63 keer met een for-loop\nfor (i in 1:63) {\n  R[i+1] &lt;- R[i]*1.05 # R in het volgende hokje is 1.05*R in deze stap\n}\n\nplot(R , type='l', col=\"seagreen\", log=\"y\", lwd=2) \n\n\n\n\n\n\n\nFiguur 1\n\n\n\n\n\nb. Door de rijstkorrels in elke vakje bij elkaar op te tellen kunnen we uitrekenen hoeveel rijstkorrels je in totaal hebt:\n\nsum(R)\n\n[1] 434.0933\n\n\nZoals je ziet hebben we nu een stuk minder rijstkorrels dan bij het voorbeeld met verdubbeling. We hebben er nu (naar beneden afgerond) 434.\nOefening 10.2\na.\n\n# Stap 1: Stel begin-aantal konijnen en de groeisnelheid in\nN &lt;- 24\nr &lt;- 2\n# verdubbel het aantal konijnen 20 keer\nfor (i in 1:20){ \n  N &lt;- r*N\n}\n\n# er zijn verschillende opties om \"Het aantal konijnen na 20 tijdstappen is gelijk aan 25165824” te printen:\n# met cat:\ncat(\"Het aantal konijnen na 20 tijdstappen is gelijk aan \", N)\n\nHet aantal konijnen na 20 tijdstappen is gelijk aan  25165824\n\n# met paste:\npaste(\"Het aantal konijnen na 20 tijdstappen is gelijk aan \", N)\n\n[1] \"Het aantal konijnen na 20 tijdstappen is gelijk aan  25165824\"\n\n\nb.\n\n# Stap 1: Stel begin-aantal konijnen in\nN &lt;- 24\n\n# Stap 2: Verdubbel het aantal konijnen 30 keer\nfor (t in 1:30){\n  N[t+1] &lt;- 2*N[t]\n}\n\n# Stap 3: Plot het resultaat\nplot(N, type='l', col=\"seagreen\", lwd=2)\n\n\n\n\n\n\n\n\nDe toename van het aantal konijnen lijkt exponentieel te zijn. Door de y-as log-lineair te maken kunnen we dit zeker weten:\n\n# Stap 1: Stel begin -aantal konijnen in\nN &lt;- 24\n# Stap 2: Verdubbel het aantal konijnen 30 keer\nfor (t in 1:30){\nN[t+1] &lt;- 2*N[t]\n}\n# Stap 3: Plot het resultaat met een logaritmische y as, net zoals in de code van figuur 3\nplot(N , type='l', col=\"seagreen\", lwd=2, log=\"y\")\n\n\n\n\n\n\n\n\nMet een logaritmische schaal op de y-as krijgen we een rechte lijn en weten we nu zeker dat we met exponentiële groei te maken hebben.\nWanneer \\(r&lt;1\\) (bijvoorbeeld \\(r=0.9\\)) zien we juist exponentiële afname van de konijnen populatie.\nc.\n\n# Stap 1: Stel begin-aantal konijnen in, en een birth en death rate\nN &lt;- 24\nb &lt;- 2\nd &lt;- 0.1\n\n# Stap 2: Verdubbel het aantal konijnen 30 keer\nfor (t in 1:30){\n  N[t+1] &lt;- b*N[t] - d*N[t]\n}\n\n# Stap 3: Plot het resultaat\nplot(N, type='l', log=\"y\", col=\"seagreen\", lwd=2)\n\n\n\n\n\n\n\n\nWe zien dat er nog steeds sprake is van exponentiële groei, omdat we met een logaritmische y-as een rechte lijn krijgen.\nd.\n\n# Stap 1: Stel begin-aantal konijnen in, en een birth en death rate\nN &lt;- 24\nb &lt;- 2\nd &lt;- 1.1\n\n# Stap 2: Verdubbel het aantal konijnen 30 keer\nfor (t in 1:30){\n  N[t+1] &lt;- b*N[t] - d*N[t]\n}\n\n# Stap 3: Plot het resultaat\nplot(N, type='l', col=\"seagreen\", lwd=2)\n\nDit is hetzelfde resultaat als bij vraag b met \\(r&lt;1\\)! Nu kunnen we dit echter uitdrukken in termen van geboorte en sterfte. Hoewel er elke tijdstap een toenname is van 100%, is er ook een afname van 110%! De konijnen gaan dus sneller dood dan ze zich voort kunnen planten, dus is er exponentiële afname.\ne. Invullen van \\(N(t)=24\\), \\(b=2\\) en \\(d=0.001\\) geeft:\n\\[\\begin{align*}\nN(t+1) &= b \\cdot N(t) - d \\cdot N(t)^2 \\\\\nN(t+1) &= 2 \\cdot 24 - 0.001 \\cdot 24^2 \\\\\nN(t+1) &= 48 - 0.001 \\cdot 576 \\\\\nN(t+1) &= 48 - 0.576 \\\\\nN(t+1) &= 47.424\n\\end{align*}\\]\nDe geboorteterm is dus 48, en de sterfteterm slechts 0.576. Er worden dus wel veel nieuwe konijnen geboren, maar er gaan er maar weinig (een half konijn) dood. De volledige vergelijking (de hoeveelheid konijnen in de volgende tijdstap) is dus 47.424. De populatie zal dus – beginnende met 24 konijnen – groeien. Later in de cursus komen we terug op het feit dat er natuurlijk geen “halve konijnen” dood kunnen gaan.\nf. Invullen van \\(N(t)=1000\\), \\(b=2\\) en \\(d=0.001\\) geeft:\n\\[\\begin{align*}\nN(t+1) &= b \\cdot N(t) - d \\cdot N(t)^2 \\\\\nN(t+1) &= 2 \\cdot 1000 - 0.001 \\cdot 1000^2 \\\\\nN(t+1) &= 2000 - 0.001 \\cdot 10^6\\\\\nN(t+1) &= 2000 - 1000 \\\\\nN(t+1) &= 1000\n\\end{align*}\\]\nOok nu worden er veel nieuwe konijnen geboren (2000), maar er gaan ook veel konijnen dood (1000). In totaal is de populatie in de volgende tijdstap dus 1000 geworden, en dat was al zo! Bij 1000 konijnen verwachten we dus een evenwichtshoeveelheid konijnen.\ng.\n\\[\\begin{align*}\nN = bN - dN^2 \\\\\n1 = b - dN \\\\\ndN = b - 1 \\\\\nN = {(b - 1) \\over d} \\\\\n\\end{align*}\\]\nMet de parameters \\(b=2\\) en \\(d=0.001\\) geeft dit \\(\\bar{N} (\\text{N in evenwicht})=\\frac{2-1}{d} = \\frac{1}{d}\\). Het systeem is dus in evenwicht als er 1000 konijnen zijn.\nh.\n\n# Stap 1: Stel begin-aantal konijnen in\nN &lt;- 24\nb &lt;- 2\nd &lt;- 2e-9\n\n# Stap 2: Verdubbel het aantal konijnen 30 keer\nfor (t in 1:30){\n  N[t+1] &lt;- b*N[t] - d*N[t]^2\n}\n\n# Stap 3: Plot het resultaat\nplot(N, type='l', log=\"y\", col=\"seagreen\", lwd=2)\n\n\n\n\n\n\n\n\nIn de eerste jaren neemt het aantal konijnen in een rechte lijn toe: de populatie groeit dus (bij benadering) exponentiëel. Later vlakt de groei af.\ni. Doordat N[1] het aantal konijnen van tijdstap 0 bevat, moeten we dus kijken naar het 11e element uit de vector om het aantal konijnen na 10 jaar te weten.\n\nN[11]\n\n[1] 24575.4\n\n\nHet is vreemd dat het aantal konijnen geen geheel getal is. Blijkbaar bestaan er in dit wiskundige model ook halve konijnen. Later in de cursus gaan we hier dieper op in.\nj.\n\n# Stap 1: Stel begin-aantal konijnen in\nN &lt;- 24\nb &lt;- 3 # de birthrate is nu verhoogd naar 3\nd &lt;- 2e-9\n\n# Stap 2: Verdubbel het aantal konijnen 30 keer\nfor (t in 1:30){\n  N[t+1] &lt;- b*N[t] - d*N[t]^2\n}\n\n# Stap 3: Plot het resultaat\nplot(N, type='l', col=\"seagreen\", lwd=2)\n\n\n\n\n\n\n\n\nWe zien dat de konijnenpopulatie naar een ander evenwicht gaat, die ongeveer rond 1 miljard (1e+09) lijkt te liggen. Dit klopt met onze eerdere bepaling van de evenwichtwaarde: \\(N_{evenwicht}=\\frac{b-1}{d}=\\frac{2}{2e-9} = 1e9\\). Opvallend is dat de populatie een beetje rond deze waarde blijft schommelen.\nk. Het lijkt erop dat we nog steeds geen 100 miljoen konijnen hebben na 10 jaar:\n\nN[11]\n\n[1] 1416507\n\n\nDe groeisnelheid zal dus nog verder omhoog moeten.\nl.\n\n# Stap 1: Stel begin-aantal konijnen in\nN &lt;- 24\nb &lt;- 3.7 # de birthrate is nu verhoogd naar 3.7\nd &lt;- 2e-9\n\n# Stap 2: Verdubbel het aantal konijnen 30 keer\nfor (t in 1:30){\n  N[t+1] &lt;- b*N[t] - d*N[t]^2\n}\n\nN[11]\n\n[1] 11513965\n\n\nHet aantal konijnen komt dichter in de buurt: na 10 jaar hebben we 11.5 miljoen konijnen. Maar er lijkt wel iets vreemds te gebeuren met de populatie…\n\nplot(N, type='l', col=\"seagreen\", lwd=2)\n\n\n\n\n\n\n\n\nMet \\(b=3.7\\) zien we dat de populatiegrootte blijft schommelen zo gauw hij in de buurt komt van de evenwichtswaarde. Het lukt niet meer om exact op de evenwichtswaarde te blijven, zoals wel het geval was in vraag h. Het lijkt wel of de populatiegrootte continu een beetje boven of onder de evenwichtswaarde uitkomt (hierover leer je in 11  Modelleren met ODEs meer!).\nOefening 10.3\na. Er kunnen meerdere antwoorden goed zijn, want het gaat om je verwachting. Het belangrijkste van deze opdracht is dat je erover nadenkt wat je verwacht en waarom. Gebaseerd op de waarden van de parameters zou je verwachting kunnen zijn dat er wel exponentiële groei zal zijn, want b &gt; d.\nb. Er kunnen meerdere antwoorden goed zijn, want het gaat om je verwachting. Het belangrijkste van deze opdracht is dat je erover nadenkt wat je verwacht en waarom. De kans op een geboorte is voor elk individu 80%, en deze verandert niet met de populatiegrootte, dus je verwachting zou kunnen zijn dat er geen draagvermogen is. Een ander antwoord kan zijn dat je wel verwacht dat er een draagvermogen is, omdat er een eindig aantal vakjes is in het model.\nc. In de simulatie kun je zien dat de populatie eerst erg snel groeit, en vervolgens stabiliseert. Er is dus wel een draagvermogen in dit model, ondanks dat we dit niet expliciet hebben gespecificeerd. Dat komt (zoals hierboven ook staat) doordat er in het model een beperkt aantal vakjes is waar konijnen in kunnen repliceren. Er kan in elk vakje maar één konijn zitten, dus als (bijna) alle vakjes al een konijn bevatten, kunnen er niet meer bij komen.\nd. De toename is niet exponentieel. Dit kan je gemakkelijk zien op een log-lineaire schaal (soms in het kort ‘log-schaal’ genoemd):\n\nplot(c(13,100,292,619,1081,1695,2458,3191), log=\"y\", type = \"b\", lwd=2)\n\n\n\n\n\n\n\n\nBij een exponentiële toename zouden we een rechte lijn moeten zien wanneer we de y-as op logaritmische schaal plotten. Dat is hier duidelijk niet het geval.\ne. Als één hokje een populatie konijnen voorstelt, zouden \\(b\\) en \\(d\\) geen geboorte en sterfte van individuen kunnen zijn. In plaats daarvan zou het over het uitbreiding of uitsterven van lokale konijnenpopulaties kunnen gaan.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-odes",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-odes",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 11  Modelleren met ODEs",
    "text": "Antwoorden 11  Modelleren met ODEs\nOefening 11.1\na. De term \\(k\\) beschrijft het dumpen van plastic in de oceaan. \\(k\\) is een positieve term, het geeft dus een toename van de hoeveelheid plastic in de oceaan aan. Ook is het niet afhankelijk van de hoeveelheid plastic dat zich al in de oceaan bevindt. De term \\(\\delta P\\) beschrijft de afbraak van plastic in de oceaan. Dit is een negatieve term, dus hierdoor neemt de hoeveelheid plastic in de oceaan af.\nb. De eenheid van \\(k\\) is “kilo’s plastic per jaar”, want dit is ook de eenheid van \\(\n\\mathchoice{\\frac{\\mathrm{d}P}\n{\\mathrm{d}t}}{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n\\).\nc. De eenheid van \\(\\delta\\) is “per jaar”, want de term \\(\\delta P\\) heeft de eenheid \\(P \\over t\\) en \\(\\delta P = P \\over t\\) geeft \\(\\delta = {1 \\over t}\\).\nd. De afbraak van plastic gaat erg langzaam, dus (met het huidige gedrag van mensen) is \\(k\\) veel groter dan \\(\\delta P\\).\nOefening 11.2\na. Bij \\(P = {k \\over \\delta}\\). Bij een evenwichtssituatie is \\(\n\\mathchoice{\\frac{\\mathrm{d}P}\n{\\mathrm{d}t}}{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n\\) gelijk aan nul. Dus:\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}P}\n{\\mathrm{d}t}}{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n= k - \\delta P = 0 \\quad \\text{ als...}\\\\\n    \\delta P &= k & \\\\\n    P &= \\frac{k}{\\delta} &\n\\end{align*}\\]\nb. Nee, want als er 0 plastic is (\\(P = 0\\)), is \\(\n\\mathchoice{\\frac{\\mathrm{d}P}\n{\\mathrm{d}t}}{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n\\) niet gelijk aan \\(0\\).\nc. Zelfs als er geen plastic meer in de oceaan is, komt er altijd plastic bij (\\(k\\)), ook als \\(P\\) gelijk is aan nul. De hoeveelheid plastic in de oceaan zal dus gewoon weer toenemen. In het begin zal deze toename lineair zijn, want als er nog geen plastic in de oceaan is kan er ook niks afgebroken worden.\n\n\n\nSchets van de hoeveelheid plastic in de oceaan\n\n\nOefening 11.3\na. \\[\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n= p - dB\\]\nb. De productiesnelheid \\(p\\) is al in de eenheid cellen per dag (net als \\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n\\)) en hangt niet af van het aantal rode bloedcellen. Het aantal rode bloedcellen dat doodgaat hangt wel af van het aantal rode bloedcellen, dus dit is \\(dB\\). Dus \\(d\\) is heeft niet de eenheid “aantal cellen per dag”, maar de eenheid “per dag”.\nc. Bij een evenwichtssituatie is \\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n\\) gelijk aan nul. Dus:\n\\[\\begin{align*}\n    \n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n= p - d B = 0 \\quad \\text{ als...}\\\\\n    \\delta B &= p & \\\\\n    B &= \\frac{p}{d} &\n\\end{align*}\\]\nd.\nEen goede schets ziet er ongeveer zo uit:\n\n\n\nSchets van de hoeveelheid rode bloedcellen na het doneren van bloed\n\n\ne.\nEen goede schets ziet er ongeveer zo uit:\n\n\n\nSchets van de hoeveelheid rode bloedcellen na het ontvangen van een bloedtransfusie\n\n\nf. Het gaat hier om een intuitieve verwachting, dus er zijn ook andere verwachtingen mogelijk. Intuïtief zou je kunnen verwachten dat \\(p\\) bepaalt hoe snel je herstelt, omdat dit aangeeft hoeveel rode bloedcellen erbij komen.\nUitleg script In dit script kiezen we eerst waarden voor de parameters \\(p\\) en \\(d\\), en een beginwaarde voor \\(B\\). Daarna maken we een functie die \\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n\\) uit kan rekenen voor verschillende waarden van \\(B\\), \\(p\\) en \\(d\\). Vervolgens maken we in stap 5 een vector \\(B\\) met de gewenste beginwaarde voor \\(B\\). In stap 6 rekenen we 500 keer uit wat de volgende waarde van \\(B\\) is. Dit is gelijk aan de vorige waarde van \\(B\\) plus de verandering \\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n\\) voor die waarde van \\(B\\). Tot slot plotten we al deze waarden van \\(B\\) over de tijd, net zoals we in opdracht d en e deden. Let op dat minimale waarde op de y-as hier niet nul is, waardoor de plot er net iets anders uit ziet dan in d en e.\ng.\nDoordat \\(B\\) hier gelijk is aan de evenwichtswaarde is er geen verandering (\\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n= 0\\)).\nh. Te grote tijdstappen kunnen soms problemen geven, zoals we eerder in dit hoofdstuk al hebben gelezen. Dat komt doordat je de verandering per tijdstap uitrekent op basis van de huidige populatiegrootte. Dus als je net bloed hebt gedoneerd en op basis van het aantal rode bloedcellen nu wilt uitrekenen hoeveel rode bloedcellen je over één jaar hebt, dan zal dat veel te hoog uitvallen. Dat komt doordat het aantal rode bloedcellen meteen na een bloedtransfusie stijgt. Zoals je in de grafieken hierboven hebt gezien vlakt deze stijging na een tijdje echter af. Bij een te grote tijdstap kan het zo zijn dat je de aanvankelijke stijging “overschat”. Hierdoor kan je een situatie krijgen zoals in 10  Exponentiële groei waarbij er chaos ontstaat, doordat de populatiegrootte na één tijdstip boven of onder het evenwicht uitkomt.\n\n\n\nSchets van de hoeveelheid rode bloedcellen na het doneren van bloed. In rood de verandering van het aantal rode bloedcellen over tijd als we hele kleine tijdstapjes nemen. In blauw zie je het effect van “te grote” tijdstappen.\n\n\ni. Als je de code van g runt krijg je een grafiek te zien die helpt bij het beantwoorden van deze vraag.\n\n# Stap 1: stel parameters in\np &lt;- 2e11    \nd &lt;- 1/120   \n\n# Stap 2: stel het beginaantal B in\nB &lt;- p/d\n\n# Stap 3: maak functie die B, p, en d gebruikt om de verandering uit te rekenen\nverandering &lt;- function (B, p, d){\n  delta &lt;- p - d*B\n  return(delta)\n}\n\n# Stap 4: een test of de functie werkt\n# verandering(B=p/d, p=p, d=d) \n\n# Stap 5: maak een lege lijst met begin-aantal erin\nB &lt;- c(0.9*p/d)\n\n# Stap 6: reken 500 keer de volgende hoeveelheid B uit\nfor (t in 1:500) {\n  B[t+1] &lt;- B[t] + verandering(B=B[t], p=p, d=d)\n}\n\n# Stap 7: plot de tijdserie\nplot(B, xlab=\"Tijd in dagen\", ylab=\"Aantal rode bloedcellen\", type=\"l\", col=\"seagreen\", lwd=2)\n\n\n\n\n\n\n\n\nHieruit kunnen we aflezen dat de helft van het bloedverlies na ongeveer 100 dagen weer hersteld is. Hierom moet je tussen donaties altijd 3 tot 4 maanden wachten.\nj.\nDit is een kleine aanpassing in de code:\n\n# Stap 1: stel parameters in\np &lt;- 2e11    \nd &lt;- 1/120   \n\n# Stap 2: stel het beginaantal B in\nB &lt;- p/d\n\n# Stap 3: maak functie die B, p, en d gebruikt om de verandering uit te rekenen\nverandering &lt;- function (B, p, d){\n  delta &lt;- p - d*B\n  return(delta)\n}\n\n# Stap 4: een test of de functie werkt\n# verandering(B=p/d, p=p, d=d) \n\n# Stap 5: maak een lege lijst met begin-aantal erin, waarbij we slechts 0.1% bloed doneren\nB &lt;- c(0.999*p/d)\n\n# Stap 6: reken 500 keer de volgende hoeveelheid B uit\nfor (t in 1:500) {\n  B[t+1] &lt;- B[t] + verandering(B=B[t], p=p, d=d)\n}\n\n# Stap 7: plot de tijdserie\nplot(B, xlab=\"Tijd in dagen\", ylab=\"Aantal rode bloedcellen\", type=\"l\", \n     col=\"seagreen\", lwd=2)\n\n\n\n\n\n\n\n\nHet duurt nog steeds even lang om van de helft van het bloedverlies te herstellen! De helft is nu wel veel minder (dus er is in totaal minder te herstellen), maar het herstel gaat nog steeds even snel.\nk. Het gaat hier wederom om een verwachting, dus er zijn geen foute antwoorden! Intuïtief zou je kunnen verwachten dat \\(p\\) bepaalt hoe snel je herstelt, omdat dit aangeeft hoeveel rode bloedcellen erbij komen.\nl. Je kunt het script uit de opdracht gebruiken en de waarden voor \\(p\\) en \\(d\\) aanpassen om te kijken hoe dit de snelheid van het herstel beïnvloedt.\n# Originele parameterwaarden\n\n# Stap 1: stel parameters in\np &lt;- 2e11    \nd &lt;- 1/120   \n\n# Stap 2: stel het beginaantal B in\nB &lt;- p/d\n\n# Stap 3: maak functie die B, p, en d gebruikt om de verandering uit te rekenen\nverandering &lt;- function (B, p, d){\n  delta &lt;- p - d*B\n  return(delta)\n}\n\n# Stap 4: een test of de functie werkt\n# verandering(B=p/d, p=p, d=d) \n\n# Stap 5: maak een lege lijst met begin-aantal erin\nB &lt;- c(0.9*p/d)\n\n# Stap 6: reken 500 keer de volgende hoeveelheid B uit\nfor (t in 1:500) {\n  B[t+1] &lt;- B[t] + verandering(B=B[t], p=p, d=d)\n}\n\n# Stap 7: plot de tijdserie\nplot(B, xlab=\"Tijd in dagen\", ylab=\"Aantal rode bloedcellen\", type=\"l\", \n     col=\"seagreen\", lwd=2, cex.lab=1.5, cex.axis=1.2)\n\n# Grotere waarde voor p (snellere productie)\n\n# Stap 1: stel parameters in\np &lt;- 2e12    # verhoog p\nd &lt;- 1/120   # houdt d op de oude waarde\n\n# Stap 2-4 blijft hetzelfde en kunnen we overslaan\n\n# Stap 5: maak een lege lijst met begin-aantal erin\nB &lt;- c(0.9*p/d)\n\n# Stap 6: reken 500 keer de volgende hoeveelheid B uit\nfor (t in 1:500) {\n  B[t+1] &lt;- B[t] + verandering(B=B[t], p=p, d=d)\n}\n\n# Stap 7: plot de tijdserie\nplot(B, xlab=\"Tijd in dagen\", ylab=\"Aantal rode bloedcellen\", type=\"l\", \n     col=\"seagreen\", lwd=2, cex.lab=1.5, cex.axis=1.2)\n\n\n# Kleinere waarde voor d (minder sterfte)\n\n# Stap 1: stel parameters in\np &lt;- 2e11 # zet p terug naar de oude waarde    \nd &lt;- 1/240   # verlaag d\n\n# Stap 2-4 blijft hetzelfde en kunnen we overslaan\n\n# Stap 5: maak een lege lijst met begin-aantal erin\nB &lt;- c(0.9*p/d)\n\n# Stap 6: reken 500 keer de volgende hoeveelheid B uit\nfor (t in 1:500) {\n  B[t+1] &lt;- B[t] + verandering(B=B[t], p=p, d=d)\n}\n\n# Stap 7: plot de tijdserie\nplot(B, xlab=\"Tijd in dagen\", ylab=\"Aantal rode bloedcellen\", type=\"l\", \n     col=\"seagreen\", lwd=2, cex.lab=1.5, cex.axis=1.2)\n\n\n\n\n\n\n\n\n\n\n\n(a) Originele parameterwaarden.\n\n\n\n\n\n\n\n\n\n\n\n(b) Grotere waarde voor p (snellere productie).\n\n\n\n\n\n\n\n\n\n\n\n(c) Kleinere waarde voor d (minder sterfte).\n\n\n\n\n\n\n\nFiguur 2: Snelheid van herstel voor verschillende parameters.\n\n\n\nDe snelheid van het herstel verandert niet als we \\(p\\) veranderen. Deze verandert echter wel als we \\(d\\) veranderen. Wellicht tegen je biologische intuïtie in, bepaalt \\(d\\) dus de snelheid van het herstel!\nOefening 11.4\na. Met \\(r &lt; 1\\) gaat de populatie uiteindelijk altijd naar nul.\nVanaf \\(r &gt; 3\\) ontstaan er fluctuaties rondom het evenwicht.\nMet \\(r &gt; 3.7\\) ontstaat er chaos.\n\nCode\n# R = 0.8\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24    # aantal konijnen\nr &lt;- 0.8     # intrinsieke groeisnelheid\nK &lt;- 10^9  # schaalt de dichtheidsafhankelijkheid\n\n# Stap 2: bereken het aantal konijnen in [t+1] 40 keer\nfor (t in 1:40){\n  N[t+1] &lt;- r*N[t]*(1-(N[t]/K))\n}\n\n# Stap 3: bekijk resultaten\nplot(N,type=\"o\",xlab=\"Tijd (jaren)\", ylab=\"Aantal konijnen\", \n     cex.lab=1.5, cex.axis=1.2)\n\n# R = 2\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24    # aantal konijnen\nr &lt;- 2     # intrinsieke groeisnelheid\nK &lt;- 10^9  # schaalt de dichtheidsafhankelijkheid\n\n# Stap 2: bereken het aantal konijnen in [t+1] 40 keer\nfor (t in 1:40){\n  N[t+1] &lt;- r*N[t]*(1-(N[t]/K))\n}\n\n# Stap 3: bekijk resultaten\nplot(N,type=\"o\",xlab=\"Tijd (jaren)\", ylab=\"Aantal konijnen\", \n     cex.lab=1.5, cex.axis=1.2)\n\n# R = 3\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24    # aantal konijnen\nr &lt;- 3     # intrinsieke groeisnelheid\nK &lt;- 10^9  # schaalt de dichtheidsafhankelijkheid\n\n# Stap 2: bereken het aantal konijnen in [t+1] 40 keer\nfor (t in 1:40){\n  N[t+1] &lt;- r*N[t]*(1-(N[t]/K))\n}\n\n# Stap 3: bekijk resultaten\nplot(N,type=\"o\",xlab=\"Tijd (jaren)\", ylab=\"Aantal konijnen\", \n     cex.lab=1.5, cex.axis=1.2)\n\n# R = 4\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24    # aantal konijnen\nr &lt;- 4     # intrinsieke groeisnelheid\nK &lt;- 10^9  # schaalt de dichtheidsafhankelijkheid\n\n# Stap 2: bereken het aantal konijnen in [t+1] 40 keer\nfor (t in 1:40){\n  N[t+1] &lt;- r*N[t]*(1-(N[t]/K))\n}\n\n# Stap 3: bekijk resultaten\nplot(N,type=\"o\",xlab=\"Tijd (jaren)\", ylab=\"Aantal konijnen\", \n     cex.lab=1.5, cex.axis=1.2)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) r = 0.8\n\n\n\n\n\n\n\n\n\n\n\n(b) r = 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) r = 3\n\n\n\n\n\n\n\n\n\n\n\n(d) r = 4\n\n\n\n\n\n\n\nFiguur 3: Differentievergelijking\n\n\n\nb. In tegenstelling tot de differentievergelijking, geeft de differentiaalvergelijking ook groei wanneer \\(r &lt; 1\\). Daarnaast geeft \\(r &gt; 3.7\\) geen chaos, waar dat bij de differentievergelijking wel was. Om chaos te krijgen in dit model moet je \\(r\\) heel erg groot maken, bijvoorbeeld bij \\(r = 250\\) krijg je wel fluctuaties.\n\nCode\n# r = 0.8\n# SIMPEL SCRIPT VOOR DIFFERENTIAALVERGELIJKING\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24 \nr &lt;- 0.8\nK &lt;- 10^9\n\n# Stap 2, definieer tijdstappen en maak een dataframe aan\ndelta_t &lt;- 0.01 # grootte van de tijdstap\ntijdstapjes &lt;- seq(0,20,by=delta_t)\ntijdserie &lt;- data.frame(t=tijdstapjes,konijnen=N)\n\n# Stap 3: Reken in kleine stapjes de volgende N uit\nfor (t in 1:length(tijdstapjes)-1){\n  groeiN &lt;- delta_t * r*N*(1-N/K)  \n  N &lt;- N + groeiN \n  tijdserie[t+1,\"konijnen\"] &lt;- N\n}\n\n# Stap 3: bekijk resultaten\nplot(tijdserie$t, tijdserie$konijnen, type=\"l\",xlab=\"Tijd (jaren)\", \n     ylab=\"Aantal konijnen\", cex.lab=1.5, cex.axis=1.2)\n\n# r = 2\n# SIMPEL SCRIPT VOOR DIFFERENTIAALVERGELIJKING\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24 \nr &lt;- 2\nK &lt;- 10^9\n\n# Stap 2, definieer tijdstappen en maak een dataframe aan\ndelta_t &lt;- 0.01 # grootte van de tijdstap\ntijdstapjes &lt;- seq(0,20,by=delta_t)\ntijdserie &lt;- data.frame(t=tijdstapjes,konijnen=N)\n\n# Stap 3: Reken in kleine stapjes de volgende N uit\nfor (t in 1:length(tijdstapjes)-1){\n  groeiN &lt;- delta_t * r*N*(1-N/K)  \n  N &lt;- N + groeiN \n  tijdserie[t+1,\"konijnen\"] &lt;- N\n}\n\n# Stap 3: bekijk resultaten\nplot(tijdserie$t, tijdserie$konijnen, type=\"l\",xlab=\"Tijd (jaren)\", \n     ylab=\"Aantal konijnen\", cex.lab=1.5, cex.axis=1.2)\n\n# r = 4\n# SIMPEL SCRIPT VOOR DIFFERENTIAALVERGELIJKING\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24 \nr &lt;- 4\nK &lt;- 10^9\n\n# Stap 2, definieer tijdstappen en maak een dataframe aan\ndelta_t &lt;- 0.01 # grootte van de tijdstap\ntijdstapjes &lt;- seq(0,20,by=delta_t)\ntijdserie &lt;- data.frame(t=tijdstapjes,konijnen=N)\n\n# Stap 3: Reken in kleine stapjes de volgende N uit\nfor (t in 1:length(tijdstapjes)-1){\n  groeiN &lt;- delta_t * r*N*(1-N/K)  \n  N &lt;- N + groeiN \n  tijdserie[t+1,\"konijnen\"] &lt;- N\n}\n\n# Stap 3: bekijk resultaten\nplot(tijdserie$t, tijdserie$konijnen, type=\"l\",xlab=\"Tijd (jaren)\", \n     ylab=\"Aantal konijnen\", cex.lab=1.5, cex.axis=1.2)\n\n# r = 250\n# SIMPEL SCRIPT VOOR DIFFERENTIAALVERGELIJKING\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24 \nr &lt;- 250\nK &lt;- 10^9\n\n# Stap 2, definieer tijdstappen en maak een dataframe aan\ndelta_t &lt;- 0.01 # grootte van de tijdstap\ntijdstapjes &lt;- seq(0,0.7,by=delta_t)\ntijdserie &lt;- data.frame(t=tijdstapjes,konijnen=N)\n\n# Stap 3: Reken in kleine stapjes de volgende N uit\nfor (t in 1:length(tijdstapjes)-1){\n  groeiN &lt;- delta_t * r*N*(1-N/K)  \n  N &lt;- N + groeiN \n  tijdserie[t+1,\"konijnen\"] &lt;- N\n}\n\n# Stap 3: bekijk resultaten\nplot(tijdserie$t, tijdserie$konijnen, type=\"l\",xlab=\"Tijd (jaren)\", \n     ylab=\"Aantal konijnen\", cex.lab=1.5, cex.axis=1.2)\n\n\n\n\n\n\n\n\n\n\n\n\n(a) r = 0.8\n\n\n\n\n\n\n\n\n\n\n\n(b) r = 2\n\n\n\n\n\n\n\n\n\n\n\n\n\n(c) r = 4\n\n\n\n\n\n\n\n\n\n\n\n(d) r = 250\n\n\n\n\n\n\n\nFiguur 4: Differentiaalvergelijking.\n\n\n\nc. Het script wordt dan heel erg langzaam. ODEs zijn dus precieser, maar dat wordt ook steeds moeilijker voor je computer. Dit is waarom je meestal betere tools gebruikt om ODEs te integreren, zoals Grind (dit R-script zul je later in de cursus zien).\n\n# SIMPEL SCRIPT VOOR DIFFERENTIAALVERGELIJKING\n# Stap 1, definieer beginaantal konijnen en parameters\nN &lt;- 24 \nr &lt;- 2\nK &lt;- 10^9\n\n# Stap 2, definieer tijdstappen en maak een dataframe aan\ndelta_t &lt;- 0.0001 # grootte van de tijdstap\ntijdstapjes &lt;- seq(0,20,by=delta_t)\ntijdserie &lt;- data.frame(t=tijdstapjes,konijnen=N)\n\n# Stap 3: Reken in kleine stapjes de volgende N uit\nfor (t in 1:length(tijdstapjes)-1){\n  groeiN &lt;- delta_t * r*N*(1-N/K)  \n  N &lt;- N + groeiN \n  tijdserie[t+1,\"konijnen\"] &lt;- N\n}\n\n# Stap 3: bekijk resultaten\ntijdserie[20,] # Aantal na 0.19 jaar\nplot(tijdserie$t, tijdserie$konijnen, type=\"l\",xlab=\"Tijd (jaren)\", ylab=\"Aantal konijnen\")",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-dichtheid",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-dichtheid",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 12  Dichtheidseffecten",
    "text": "Antwoorden 12  Dichtheidseffecten\nOefening 12.1\na. Als we de birth (\\(b\\)) vermenigvuldigen met de functionele respons \\(\\frac{N}{K} + 1\\), zal dit birth juist verhogen omdat \\(N\\) een positieve term is. Als de populatie (\\(N\\)) heel klein is, is de functie gelijk aan 1 en is de uiteindelijke (minimale) birth dus gelijk aan \\(b\\). Als \\(N\\) heel groot is, neemt de birth alsmaar toe! (biologisch gezien is dit natuurlijk vreemd!)\nb. Als we de birth (\\(b\\)) vermenigvuldigen met de functionele respons \\(1-cN\\), zal er een zeer vergelijkbaar effect zijn als met \\(f(N)=1-\\frac NK\\) (zoals gebruikt in het hoofdstuk). Het enige verschil is dat we het negatieve effect niet delen door \\(K\\), maar vermenigvuldigen met \\(c\\). Maar, als \\({1 \\over K}=c\\), dan staat er precies hetzelfde! We hebben dus wederom een maximale geboorte voor kleine populaties (kleine \\(N\\)).\nc. Als we de birth (\\(b\\)) vermenigvuldigen met de functionele respons \\(1-cN^2\\), zien we dat de birth rate zal afnemen met toenemende populatiegrootte. Echter is deze respons niet lineair, maar kwadratisch. De maximale birth rate is dus nogsteeds gelijk aan \\(b\\) (wanneer \\(N\\) klein is), voor kleine populaties zal de birth slechts langzaam afnemen (want kleine getallen kwadrateren geeft extra kleine getallen), maar voor grote populaties zal birth juist heel snel afnemen!\nOefening 12.2\na. Er is een evenwicht als: \\[\\begin{align*}\n  \n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n&= 0 \\\\\n  bN-d\\left(1+\\frac NK \\right)N &= 0 \\\\\n  N &= 0 \\quad \\text{(oplossing 1)} \\\\\n  b-d\\left(1+\\frac NK \\right) &= 0 \\\\\n  d\\left(1+\\frac NK \\right) &= b \\\\\n  \\left(1+\\frac NK \\right) &= b/d \\\\\n  \\frac{N}{K} &= b/d - 1\\\\\n  N &= K(b/d -1) \\quad \\text{(oplossing 2)} \\\\\n\\end{align*}\\]\nb. Net zoals in Figuur 12.2 hebben we weer een bergparabool vanwege de term \\(-d\\left(1+\\frac NK \\right)N = -dN - \\frac{d}{K} N^2\\)\nWe hebben de twee evenwichten berekend in vraag a: \\(N=0\\) en \\(N=K\\left( \\frac bd - 1 \\right)\\). Het triviale evenwicht \\(N=0\\) is geen attractor, het andere evenwicht wel.\n\n\n\nFaseportret dichtheidsafhankelijke sterfte\n\n\nOefening 12.3\na. De term \\(rB\\) is de exponentiële groei van de bacteriën. De term \\(kNB\\) beschrijft het aantal bacteriën dat door neutrofielen wordt doodgemaakt. De eenheden van beide termen zijn in bacteriën per uur.\nb. \\(rB\\) en \\(kNB\\) moeten allebei de eenheid aantal bacteriën per uur hebben, omdat we ze bij elkaar optellen om \\(\n\\mathchoice{\\frac{\\mathrm{d}N}\n{\\mathrm{d}t}}{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n{\\mathrm{d}N/\\mathrm{d}t}\n\\) te krijgen.\n\\(B\\) heeft de eenheid bacteriën, dus \\(r\\) moet de eenheid per uur (\\(uur^{-1}\\)) hebben, zodat de term \\(rB\\) als geheel de eenheid bacteriën per uur heeft.\n\\(N\\) heeft de eenheid hoeveelheid neutrofielen, dus k moet dit wegdelen. We hebben dus: \\[\\frac{aantal \\, \\, bacterien}{uur} = k \\cdot aantal \\, \\, neutrofielen \\cdot aantal \\, \\, bacterien\\] Dus \\[k=\\frac{1}{uur \\cdot aantal \\, \\, neutrofielen}\\]\nAls je dit nog lastig vindt kan je 11.8 Rekenen aan eenheden nog een keer doorlezen!\nc. \\[\\begin{align*}\n  \n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n&= 0 \\\\\n  rB-kNB &= 0 \\\\\n  B &= 0 \\quad \\text{(oplossing 1)} \\\\\n  r-kN &= 0 \\\\\n  kN &= r \\\\\n  N &= \\frac{r}{k} \\quad \\text{(oplossing 2)} \\\\\n\\end{align*}\\]\nEr is dus een evenwicht in het aantal bacteriën als het aantal neutrofielen in het bloed precies gelijk is aan \\(r/k\\). Als het aantal neutrofielen lager is dan \\(r/k\\), zal het aantal bacteriën in het bloed toenemen. Als het aantal neutrofielen hoger is dan \\(r/k\\) zal het aantal bacteriën afnemen. De precieze hoeveelheid bacteriën in dit evenwicht kunnen we met dit model niet bepalen.\nd.\nEen goede schets ziet er ongeveer zo uit:\n\n\n\n\n\n\nFiguur 5: De \\(rB\\) term is een horizontale lijn en de \\(kNB\\) term is neemt linear toe\n\n\n\ne. Om de groei van de bacteriën te stoppen moet \\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n\\) gelijk zijn aan nul. We hebben deze vergelijking al opgelost in vraag c. \\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n=0\\) als \\(N=r/k\\).\nJe hebt dus \\(r/k\\) neutrofielen nodig om de groei van de bacteriën te stoppen. Dit punt is ook het snijpunt tussen de lijnen van Figuur 5. Dit is logisch, omdat de positieve en negatieve term van de vergelijking dan even groot zijn.\nf. We moeten het aantal dode bacteriën delen door het aantal neutrofielen. Dus \\(kNB/N = kB\\). Per neutrofiel worden er dus \\(kB\\) bacteriën per uur opgeruimd.\ng. Als er 0 bacteriën zijn, worden er 0 bacteriën per neutrofiel opgeruimd (want iets vermenigvuldigen met 0 geeft altijd 0). Dit is een redelijke aanname.\nAls er oneindig veel bacteriën zijn, worden er oneindig veel bacteriën per neutrofiel doodgemaakt.\nOp het moment dat er enorm veel bacteriën zijn, werken de neutrofielen dus ook enorm snel. Dit is geen redelijke aanname, want elke neutrofiel kan per uur maar een gelimiteerd aantal bacteriën opruimen. Het zou dus logischer zijn als er een limiet zit op deze term: het aantal bacteriën dat een neutrofiel maximaal kan opruimen per uur.\nh. Als \\(B\\) heel groot is, dan maakt de kleine toevoeging van \\(h\\) onderin de breuk niet heel veel meer uit. \\(h\\) wordt dus voor grote waarden van \\(B\\) “verwaarloosbaar”.\ni. Laten we even kijken wat er gebeurt met de term \\(\\frac{kNB}{h+B}\\) als \\(B\\) heel groot is:\n\\[\\frac{kNB}{h+B}\\] \\[\\frac{kN}{h/B+B/B}\\] \\[\\frac{kN}{h/B+1}\\]\nDoordat \\(B\\) heel groot is geldt \\(h/B \\rightarrow 0\\). De term als geheel benadert dan \\(kN\\).\nIn andere woorden: als \\(B\\) heel groot is ten opzichte van \\(h\\), dan kan je de breuk vereenvoudigen tot \\(\\frac{kNB}{B}\\) en de \\(B\\)’s wegstrepen en houd je alleen \\(kN\\) over. Per neutrofiel worden er dus hoogstens \\(k\\) bacteriën doodgemaakt, zelfs als er oneindig veel bacteriën zijn. Doordat er een grens zit aan het aantal bacteriën dat een neutrofiel per uur kan verwijderen is dit model realistischer dan in de eerste versie.\nj. Om de groei te stoppen moet gelden: \\(\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n= 0\\). \\[\\begin{align*}\n  \n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n&= 0 \\\\\n  rB-\\frac{kNB}{h+B} &= 0 \\\\\n  B\\left(r-\\frac{kN}{h+B}\\right) &= 0 \\\\\n  B &= 0 \\quad \\text{(oplossing 1)} \\\\\n  r-\\frac{kN}{h+B} &= 0 \\\\\n  \\frac{kN}{h+B} &= r \\\\\n  kN &= r(h+B) \\\\\n  N &= \\frac{r(h+B)}{k} \\quad \\text{(oplossing 2)}\n\\end{align*}\\]\nWe hebben dus minimaal \\(\\frac{r(h+B)}{k}\\) neutrofielen nodig. Het valt je misschien op dat het aantal neutrofielen dat we nu nodig hebben om de groei van de bacteriën te stoppen nu wel afhankelijk is van het aantal bacteriën \\(B\\). Doordat elke neutrofiel nu een beperkt aantal bacteriën per uur kan opruimen, hebben we dus meer neutrofielen nodig als er meer bacteriën zijn!\nOefening 12.4\na. Als de geboorte- en sterftensnelheid aan elkaar gelijk zijn blijft de populatie in evenwicht, omdat er dan ongeveer net zoveel Heckrunderen geboren worden als er dood gaan. Uit de grafiek kun je aflezen dat dit het geval is bij een populatie van ongeveer 340 tot 350 runderen.\nb.\nOm deze vragen te beantwoorden moet je allereerst inzien dat lijnen in de figuur overeenkomen met de termen \\({\\color{#2a53f7}b}\\left(1-\\frac{N}{K_b}\\right)N\\) (de dalende geboortelijn), en \\({\\color{red}d}\\left(1+\\frac{N}{K_d}\\right)N\\) (de stijgende sterftelijn).\nDaarnaast kunnen we bepaalde dingen aflezen, bijvoorbeeld dat de maximale geboorte 40% (dus \\(b=0.4\\)) is. Ook weten we dat de runderen met een populatiegroote van 400 maar de helft van de deze maximale geboorte hebben. Zodoende kunnen we ook de laatste onbekende (\\(K_b\\)) bepalen:\n\\[\\frac{1}{2} \\cdot 0.4 = 0.4 \\cdot \\left(1-\\frac{400}{K_b}\\right)\\] \\[\\frac12= 1-\\frac{400}{K_b}\\] \\[-\\frac{1}{2} = -\\frac{400}{K_b}\\] \\[\\frac{2}{1}=\\frac{K_b}{400}\\] \\[K_b = 400\\cdot 2 = 800\\]\nc. Op dezelfde manier als bij b lezen we af aan de grafiek dat de minimale sterfte 3% is. Dus \\(d=0.03\\).\nDaarna kunnen we \\(K_d\\) uitrekenen: \\[0.33 = 0.03\\left(1+\\frac{500}{K_d}\\right)\\] \\[\\frac{0.33}{0.03} = 11 = 1+\\frac{500}{K_d}\\] \\[ 10 = \\frac{500}{K_d}\\] \\[\\frac{10}{500} = \\frac 1{K_d}\\] \\[K_d = \\frac{500}{10} = 50 \\]\nd. Als we al onze gevonden parameters invullen krijgen we de volgende ODE: \\[\\frac{dN}{dt} = 0.4\\left(1-\\frac{N}{800} \\right) N - 0.03 \\left(1+\\frac{N}{50}\\right)N\\] Deze stellen we gelijk aan 0 om het evenwicht te bepalen: \\[0= 0.4\\left(1-\\frac{N}{800} \\right) N - 0.03 \\left(1+\\frac{N}{50}\\right)N\\] \\[N=0 \\quad \\text{ (triviale oplossing), of...} \\] \\[0.4\\left(1-\\frac{N}{800} \\right)  = 0.03 \\left(1+\\frac{N}{50}\\right)\\] We negeren de triviale oplossing, en bepalen N uit de andere vergelijking: \\[0.4-\\frac{0.4N}{800} = 0.03+\\frac{0.03N}{50}\\] \\[0.4-0.03 = \\left(\\frac{0.4}{800}+\\frac{0.03}{50} \\right)N\\] \\[0.37 = 0.0011N\\] \\[N\\approx 336\\]\nDit is inderdaad de hoeveelheid die we uit de grafiek hebben afgelezen, dus we hebben waarschijnlijk de parameters juist bepaald!\ne. Het aantal dieren die elk jaar dood gaan is gelijk aan \\(d\\left(1-\\frac N{K_d}\\right)N\\) waarin we onze waardes in kunnen vullen: \\[0.03 \\cdot \\left(1+\\frac{336}{50}\\right) \\cdot 336\\approx 78\\] Er gaan dus 78 runderen per jaar dood.\nf. Na 300 tijdstappen wordt er begonnen met afschieten (if(t&gt;300) k &lt;- 0.05). Maar let op! Dit komt overeen met 30 jaar omdat de tijdstap 0.1 jaar is (delta_t &lt;- 0.1 # grootte van de tijdstap).\nEr wordt telkens 5% van de populatie afgeschoten omdat \\(k\\) gelijk gesteld wordt aan 0.05.\ng. De sterfte (inclusief afschieten!) neemt met minder dan 5% toe (ongeveer 2.3 procent), terwijl er wel 5% extra wordt afgeschoten. De lagere dichtheid lijkt dus deels te compenseren voor het afschieten, er gaat ~2.7% van de populatie minder dood dan je naïef zou verwachten. Deze dieren waren anders wellicht van de honger overleden.\nh. De dieren leven iets minder lang, maar gaan wel relatief minder vaak dood van de honger. Daarom zou het aangemoedigd kunnen worden.\ni. Vooral oude dieren afschieten. Hierdoor veranderd de deathrate eigenlijk nauwelijks, en gaan er ook minder jonge dieren dood omdat de oude dieren minder “voedsel verspillen”. Overigens is het ethische debat hier niet meteen mee opgelost, want oudere dieren hebben ook recht op leven. In ieder geval kunnen we met dit model de effecten van het afschieten beter kwantificeren, in plaats van deze discussie alleen op gevoelens te laten bazeren.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-ruimtelijk",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-ruimtelijk",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 13  Ruimtelijke groei",
    "text": "Antwoorden 13  Ruimtelijke groei\nOefening 13.1\na. Ja, met een lagere begin-dichtheid krijg je wel een mooie logistische groeicurve.\nb. Soms sterft iedereen uit omdat ze van elkaar gescheiden zijn en elkaar niet kunnen helpen.\nc. Je antwoord kan veel verschillen van dit antwoordenmodel, want het is een stochastisch process. Meestal lukt het de populaties ongeveer 5/20 keer om uit te groeien, maar soms lukt het ze helemaal nooit!\nd. Het lukt de populatie nu veel vaker (bijna altijd) om succesvol uit te groeien.\ne. Je zou duidelijk een verschil moeten zien. Maar het zou natuurlijk toeval kunnen zijn. In het onderdeel ‘Statistiek’ ga je leren hoe je toch uitspraken kan doen over deze onzekere data.\nOefening 13.2\na. \\[\\frac{dN}{dt}=0=bN^2-dN\\] \\[N(bN-d)=0\\] \\[N=0 \\quad \\text{ of } \\quad bN-d=0 \\rightarrow N=\\frac{d}{b}\\]\nb/c\nEen faseportret met oplossingen zal er voor dit model ongeveer zo uit zien:\n\n\n\nFaseportret simpele ODE\n\n\n\\(N=0\\) is stabiel, \\(\\frac db\\) is instabiel. Bij een kleine populatiegrootte zal er dus geen groei zijn, maar als de populatiegroote hoog genoeg is zal de populatie oneindig door kunnen groeien.\nd. In het individual-based model gingen we er van uit dat er maar 1 individu in een hokje past. Hierdoor kan de populatie niet exponentieel toe blijven nemen, want na een tijdje zitten alle hokjes vol en kunnen er pas weer nieuwe indviduen komen als er eerst weer een paar dood zijn gegaan.\nOefening 13.3\na.\nJe schets zou identiek moeten zijn aan de rechterzijde van Figuur 12.2:\n\nb+c.\nHet faseportret met oplossingen zal er ongeveer zo uit zien:\n\n\n\nFaseportret cooperatieve groeimodel\n\n\nEr zijn drie mogelijke opties voor de oplossingen:\n\nDe populatie begint te klein en neemt af tot 0.\nEr zijn genoeg individuen om te groeien, dus groeit de populatie tot een evenwicht.\nWe beginnen met een hele grote populatie, die exponentieel afneemt tot aan de stabliele evenwichtsstand.\n\nOefening 13.4\na. In dit systeem hebben alle drie de soorten er wat aan als er meer gemengd wordt. Ze hebben namelijk allemaal iemand anders nodig om zich voort te planten, en als er niet gemengd wordt zullen ze vooral bij hun eigen soort in de buurt zitten. Bovendien is hier ook geen mogelijkheid voor 1 soort om de anderen uit te roeien, omdat er altijd een andere is die deze groei weer tegen kan gaan.\nb. Er onstaan een soort golven die omzichzelf heen krullen, en zo spiralen vormen. Je ziet de populatiegroottes elkaar steeds opvolgen.\nc. Mengen+ zorgt voor te grote fluctuaties, waardoor 1 soort volledig uit kan sterven. Hierdoor valt de hele cyclus uit elkaar en gaat uiteindelijk iedereen dood. Mengen kan dus zowel goede als slechte effecten hebben op samenwerking, wat vooral afhangt van de specifieke tijdschalen.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-meerdere",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-meerdere",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 14  Predator-prooi interacties",
    "text": "Antwoorden 14  Predator-prooi interacties\nOefening 14.1\na. De parameter \\(\\beta\\) bepaalt hoe snel zeehonden via de term \\(\\beta ZI\\) in de zieke zeehonden populatie terecht komen (ze verdwijnen uit de gezonde populatie, en komen erbij in de zieke populatie). De term \\(\\beta ZI\\) is dus een infectieterm. De parameter \\(\\delta\\) bepaalt hoe vaak zieke zeehonden dood gaan.\nb. Ja, wel gegeven de modelomschrijving, want daar staat dat de zeehonden die ziek zijn snel dood gaan.\nc. Het is dan een 1D systeem: \\[\n\\mathchoice{\\frac{\\mathrm{d}Z}\n{\\mathrm{d}t}}{\\mathrm{d}Z/\\mathrm{d}t}\n{\\mathrm{d}Z/\\mathrm{d}t}\n{\\mathrm{d}Z/\\mathrm{d}t}\n= bZ\\left(1-\\frac{Z}{k}\\right)-dZ\\] Deze vergelijking gelijkstellen aan 0 geeft \\(Z = k\\left(1-\\frac{d}{b}\\right)\\). Dit is het evenwicht van de gezonde populatie in afwezigheid van de infectieziekte.\nd. Ja, de populatie wordt kleiner. De populatiegrootte zonder infectieziekte wordt bepaald door \\(k(1-d/b)\\). Met kleinere \\(b\\) wordt d/b groter, dus de evenwichtwaarde kleiner. De populatie zal dus afnemen door de PCB’s. Tip: als je het moeilijk vindt om dit voor te stellen vul dan waarden in voor d en b.\ne. Stel beide vergelijkingen gelijk aan 0.\nNullcline van Z: \\[\\begin{align*}\n    bZ\\left(1-\\frac Zk\\right) - dZ - \\beta ZI &= 0 \\\\\n    Z\\left(b\\left(1-\\frac Zk\\right) - d - \\beta I\\right) &= 0 \\\\\n    Z &= 0 \\quad \\text{(oplossing 1)} \\\\\n    b\\left(1-\\frac Zk\\right) - d - \\beta I &= 0 \\\\\n    \\beta I &= b\\left(1-\\frac Zk \\right) - d \\\\\n    I &= \\frac{b\\left(1-\\frac Zk \\right) - d}{\\beta} \\quad \\text{(oplossing 2)}\n\\end{align*}\\]\nNullcline van I: \\[\\begin{align*}\n    \\beta ZI - \\delta I &= 0 \\\\\n    I(\\beta Z - \\delta) &= 0 \\\\\n    I &= 0 \\quad \\text{(oplossing 1)} \\\\\n    \\beta Z - \\delta &= 0 \\\\\n    \\beta Z &= \\delta \\\\\n    Z &= \\frac \\delta\\beta  \\quad \\text{(oplossing 2)}\n\\end{align*}\\]\nEr zijn twee kwalitatief verschillende situaties: één waarbij de twee nullclines elkaar snijden, en één waarbij er geen snijpunt is.\n\n\nHier is de R code om deze lijnen te schetsen, maar een simpele schets voldoet ook.\nI &lt;- 1:100\nZ &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,2),mar=c(4,4,1,1.5))\nplot(I,Z,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"Z\", side=1, line=2, col=\"blue\", cex=1.5, at=90)\nmtext(\"I\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nabline(h=0, lwd=2, col=\"#f2790f\")\nabline(v=40, lwd=2, col=\"#f2790f\")\nabline(v=0, lwd=2, col=\"blue\",)\nabline(a=80,b=-1, lwd=2,col=\"blue\")\n\n\nplot(I,Z,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\n\nmtext(\"Z\", side=1, line=2, col=\"blue\", cex=1.5, at=90)\nmtext(\"I\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nabline(h=0, lwd=2, col=\"#f2790f\")\nabline(v=80, lwd=2, col=\"#f2790f\")\nabline(v=0, lwd=2, col=\"blue\",)\nabline(a=80,b=-1.25, lwd=2,col=\"blue\")\n\n\n\n\n\n\n\n\n\nf. Er is een evenwicht op een plek waar de oranje en blauwe lijn elkaar kruizen. Er zijn meerdere evenwichten. Evenwicht 1 is (0 ; 0): als er geen zeehonden zijn. De schuine nullcline (van \\(Z\\)) kan op twee punten de oranje lijnen snijden. We weten echter nog niet de precieze coördinaten van deze snijpunten, hier kunnen we achter komen door de waarde die we wel weten in te vullen in de formule van de \\(Z\\)-nullcline. Evenwicht 2: \\(I = 0\\) invullen in de \\(Z\\)-nullcline \\(I = -Z\\frac{b}{k\\beta} + \\frac{b - d}{\\beta}\\). \\[\\begin{align*}\n-Z\\frac{b}{k\\beta} + \\frac{b - d}{\\beta} &= 0 \\\\\nZ\\frac{b}{k\\beta} &= \\frac{b - d}{\\beta} \\\\\nZ &= \\frac{b - d}{\\beta} \\cdot \\frac{k\\beta}{b} \\\\\nZ &= \\frac{k\\beta(b - d)}{\\beta b} \\\\\nZ &= \\frac{k(b - d)}{b} \\\\\nZ &= \\frac{kb - kd}{b} \\\\\nZ &= k - \\frac{kd}{b}\n\\end{align*}\\] Dus hier is een evenwicht voor \\(I=0\\) en \\(Z = k - \\frac{kd}{b}\\). Evenwicht 3: \\(Z = \\delta / \\beta\\) invullen in de \\(Z\\)-nullcline \\(I = -Z\\frac{b}{k\\beta} + \\frac{b - d}{\\beta}\\). \\[\\begin{align*}\nI &= -Z\\frac{b}{k\\beta} + \\frac{b - d}{\\beta} \\\\\nI &= -\\frac{\\delta}{\\beta} \\cdot \\frac{b}{k\\beta} + \\frac{b - d}{\\beta} \\\\\nI &= -\\frac{\\delta b}{k \\beta^2} + \\frac{b - d}{\\beta}\n\\end{align*}\\]\nf.\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"blue\",lwd=2)\n}\n\nI &lt;- 1:100\nZ &lt;- 1:100\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\n\nplot(I,Z,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\n\nmtext(\"Z\", side=1, line=2, col=\"blue\", cex=1.5, at=90)\nmtext(\"I\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nabline(h=0, lwd=2, col=\"#f2790f\")\nabline(v=40, lwd=2, col=\"#f2790f\")\nabline(v=0, lwd=2, col=\"blue\",)\nabline(a=80,b=-1, lwd=2,col=\"blue\")\n\nvectorfield(15,95,-10,-10)\nvectorfield(95,12,-10,10)\nvectorfield(50,12,10,10)\nvectorfield(15,12,10,-10)\n\npoints(40,40,cex=1.3,pch=19)\ntext(55,40,\"Evenwicht 3\", cex=0.7)\npoints(0,0,cex=1.3)\ntext(12,5,\"Evenwicht 1\", cex=0.7)\npoints(80,0,cex=1.3)\ntext(90,5,\"Evenwicht 2\", cex=0.7)\n\n\n\n\n\n\n\n\n\nCode\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\n\nplot(I,Z,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\n\nmtext(\"Z\", side=1, line=2, col=\"blue\", cex=1.5, at=90)\nmtext(\"I\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nabline(h=0, lwd=2, col=\"#f2790f\")\nabline(v=80, lwd=2, col=\"#f2790f\")\nabline(v=0, lwd=2, col=\"blue\",)\nabline(a=80,b=-1.25, lwd=2,col=\"blue\")\n\nvectorfield(50,60,-10,-10)\nvectorfield(95,50,-10,10)\nvectorfield(20,30,10,-10)\n\npoints(0,0,cex=1.3)\ntext(12,5,\"Evenwicht 1\", cex=0.7)\npoints(64,0,cex=1.3,pch=19)\ntext(74,5,\"Evenwicht 2\", cex=0.7)\n\n\n\n\n\n\n\n\n\nHet aantal geïnfecteerde zeehonden \\(I\\) stijgt als we aan de rechterkant van de \\(I\\)-nullcline zitten. Er zijn dan genoeg zeehonden om te infecteren. Links van de \\(I\\)-nullcline daalt het aantal geïnfecteerde zeehonden. Het aantal zeehonden stijgt als we ons onder de \\(Z\\)-nullcline bevinden. In de figuur hierboven zijn deze vectoren getekend in beide situaties. Nu kunnen we bekijken welke van de evenwichten stabiel zijn. Evenwicht 1 is niet stabiel, want zo gauw er kleine populatie zeehondenn is, zal deze populatie gaan groeien. De stabiliteit van evenwicht 2 hangt af van de specifieke situatie. In het geval dat de \\(I\\)-nullcline zich rechts van dit evenwicht bevindt (tweede plot hierboven), is het een stabiel evenwicht. De infectieziekte verdwijnt dan uit de populatie, en er is een evenwicht met alleen gezonde zeehonden. Als de \\(I\\)-nullcline zich links van dit evenwicht bevindt, is dit evenwicht niet meer stabiel. De infectieziekte blijft dan wel aanwezig in de populatie. Dit geeft dan een derde evenwichtssituatie, die ook stabiel is. In dit evenwicht zijn er zowel gezonde als zieke zeehonden.\ng. De locatie van de \\(I\\)-nullcline wordt bepaald door \\(\\beta\\) en \\(\\delta\\). Als de ziekte niet infectieus genoeg is (\\(\\beta\\) is te klein) of als de geïnfecteerde zeehonden te snel dood gaan (\\(\\delta\\) is te groot) zal de ziekte te snel weer uit de populatie verdwijnen.\nh. Alleen de nullcline van de gezonde zeehonden wordt beïnvloed door de geboortesnelheid van gezonde zeehonden, want daar staat \\(b\\) in:\n\\[I = \\frac{b\\left(1-\\frac Zk \\right) - d}{\\beta}\\]\nAls b gehalveerd wordt krijgen we dus:\n\\[I = \\frac{0.5b\\left(1-\\frac Zk \\right) - d}{\\beta}\\]\nDeze lijn begint dus bij een lagere waarde, maar zal ook langzamer dalen. Het snijpunt ligt daardoor precies bij dezelfde waarde van Z:\n\n\nCode\nvectorfield &lt;- function(x,y,dx,dy){\n  arrows(x, y, x+0, y+dy, length = 0.07, angle = 20, col=\"#f2790f\",lwd=2)\n  arrows(x, y, x+dx, y+0, length = 0.07, angle = 20, col=\"blue\",lwd=2)\n}\n\nI &lt;- 1:140\nZ &lt;- 1:140\n\npar(pty=\"s\",mfrow=c(1,1),mar=c(4,4,1,1.5))\n\nplot(I,Z,  col.axis=\"#f2790f\",type='n',xaxt='n',xlab=\"\",ylab=\"\",axes=FALSE, frame.plot=TRUE)\n\nmtext(\"Z\", side=1, line=2, col=\"blue\", cex=1.5, at=90)\nmtext(\"I\", side=2, line=2, col=\"#f2790f\", cex=1.5,adj=1,las=2, at=90)\nmtext(\"0\", side=2, line=1, col=\"black\", cex=1,adj=1,las=2, at=0)\nmtext(\"0\", side=1, line=1, col=\"black\", cex=1,adj=0,las=1, at=-1)\n\nAxis(side=1, labels=FALSE)\nAxis(side=2, labels=FALSE)\n\nabline(h=0, lwd=2, col=\"#f2790f\")\nabline(v=25, lwd=2, col=\"#f2790f\")\nabline(v=0, lwd=2, col=\"blue\",)\nabline(a=100,b=-0.8, lwd=2,col=\"blue\")\nabline(a=50,b=-0.4, lwd=2,col=\"blue\", lty=2)\n# add a black arrow pointing down in the middle of the plot\narrows(25, 80, 25, 40, length = 0.1, angle = 20, col=\"black\",lwd=4)\n# add text saying \"alleen aantal geinfecteerde zeehonden neemt af\", met een stippellijn verbonden met het midden van de pijl, verdeeld over twee regels en met een witten achtergrondkleur zodat het leesbaar is\n\ntext(60, 70, \"alleen aantal *geinfecteerde* \\nzeehonden neemt af\", adj=0, cex=0.5, col=\"black\", font=2, bg=\"white\")\n\n\nlegend(\"topright\", legend=c(\"Normale b\", \"Gehalveerde b\"), col=c(\"blue\", \"blue\"), lty=1:2, cex=0.5)\n\n\n\n\n\n\n\n\n\ni.\nHet aantal gezonde zeehonden in evenwicht is helemaal niet kleiner geworden! De evenwichtswaarde van de hoeveelheid gezonde zeehonden is onafhankelijk van hun geboorte geworden, en wordt alleen bepaald door de ligging van de predatornullcline. Er zijn kennelijk vooral minder zieke zeehonden.\nMocht je het niet door hebben gehad: dit model is identiek aan het predator-prooi model dat we in dit hoofdstuk hebben besproken. Ook de conclusies komen overeen. Het feit dat de zieke zeehonden niet beïnvloed worden door hun geboorte, is hetzelfde fenomeen als de konijnen die een hogere birth rate hadden (bijvoorbeeld door meer te eten te hebben), maar toch niet in populatiegroote toenamen. Maar dit gaat alleen op als er ook daadwerkelijk een infectieziekte (of predator zoals bij de konijnen) aanwezig is. De mogelijke populatiegrootte (draagkracht) zonder ziekte is wel lager als we \\(b\\) halveren.\nOefening 14.2\na. De parameter \\(c\\) (zoals uitgelegd voor het Lotka-Volterra predator/prooi model) is gelijk aan 1. Dit betekent dat we aannemen dat de biomassaconversie perfect is. Als er één prooihokje wordt opgegeten leidt dit tot de geboorte van één predatorhokje.\nb. Ja, de resultaten van de simulatie lijken heel erg op Figuur 14.3. Eerst schommelen de populaties een beetje, maar de schommelingen worden steeds kleiner. Er zijn nog wel wat zeer kleine schommelingen. Dit is vooral doordat het model met kansen werkt.\nc. Het systeem stabiliseert bij ~2300 prooi en ~11000 predator (bij de default 0.04 death rate predators). Er zijn dus meer predatoren dan prooi. Het voorbeeld van konijnen en vossen is hierbij niet geschikt, want er zullen (bij een systeem in evenwicht) altijd meer konijnen dan vossen zijn. Een situatie waarbij dit wel zou kunnen is bijvoorbeeld bij parasieten of virussen en hun gastheren. Een ander voorbeeld is wolven of leeuwen die in groepen op groot wild jagen.\nd. Het systeem stabiliseert nu rond ~15000 predatoren en ~2000 prooi. Er zijn dus nóg meer predatoren, en iets minder prooi.\ne. Bij mengen nemen de predatoren een stuk meer toe dan de prooi. Een predator kan makkelijker prooi vangen, omdat bij mengen de prooi waarschijnlijk veelal omringd is door predatoren. Daarnaast kan prooi ook makkelijker geboren worden (grotere kans op een leeg vakje naast je, omdat er geen structuur ontstaat). Maar in de opdrachten hiervoor hebben we al gezien dat het verhogen van de geboortesnelheid van prooi juist zorgt voor een toename van de hoeveelheid predatoren, en niet van de prooi.\nf.\nHet aantal predatoren neemt niet per se toe, maar er zijn wel sterkere schommelingen in het aantal predatoren. Het aantal prooien lijkt wel af te nemen. Je ziet nu ook duidelijk dat er een soort golven van prooi ontstaan die worden opgegeten door predatoren.\ng. Met een hele lage death rate hebben de predatoren een hele kleine kans om dood te gaan. Je ziet eerst dat er daardoor bijna geen ruimte meer over is voor de prooi om zich te voort te planten. Hierdoor sterft de prooi na een tijdje uit. Als alle prooi dood is, sterven ook de predatoren langzaam uit (omdat ze geen eten meer hebben). Dit zou niet voor komen in een ODE, omdat daar niet met losse individuen gewerkt wordt. Er zou altijd nog 0.00001 prooi in leven kunnen zijn die daarna weer voort kan planten.\nOefening 14.3\na. Alleen susceptible individuen planten zich individueel voort. De andere populatie planten kunnen wel groeien, maar alleen dankzij de aanwezigheid van een ander.\nb. De eenheid van \\(\n\\mathchoice{\\frac{\\mathrm{d}I}\n{\\mathrm{d}t}}{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n{\\mathrm{d}I/\\mathrm{d}t}\n\\) is \\(I\\) per tijdseenheid. Dus: \\(\\delta I = \\frac It\\) en \\(\\delta = \\frac {1}{It} \\cdot I = \\frac 1t\\). Dit kunnen we interpreteren als ‘per tijdseenheid’. Dus het geeft een verhoogde kans aan om dood te gaan als je bent geïnfecteerd met het virus.\nc. De eerste piek van geïnfecteerden is het hoogst, omdat de er aan het begin erg veel varbare individuen (susceptibles) zijn. Daardoor is het relatief voor het virus om vatbare individuen te vinden die geïnfecteerd kunnen worden, en is er een enorme piek in het aantal infecties.\nd. Onder gemengde omstandigheden gedraagd het ruimtelijke model zich bij benadering vergelijkbaar met het ODE model, maar niet precies. Het aantal geïnfecteerde indivuden lijkt bijvoorbeeld wat lager uit te komen. Dit heeft wellicht te maken met het feit dat een geïnfecteerd individu, ondanks het mengen, in 1 tijdstap alleen nabij gelegen individuen kan aansteken. Zo zie je dat een gemengde simulatie niet altijd precies hetzelfde doet als een ODE, omdat er stiekem nog andere subtiele verschillen kunnen izjn.\ne. Het is meer vergelijkbaar met contactbeperkingen, want de pixels houden dezelfde afstand tot elkaar (er is dus geen “social distancing”). Echter heeft elke pixel alleen contact met de aangrenzende pixels, dus 1 individu kan per tijdstap hoogstends de 8 buren infecteren, en niet meer dan dat.\nf. In het ongemengde systeem zie je dat het virus uitsterft, omdat het zich te snel verspreidt en daardoor alle vatbare individuen uitroeit. Kleine populaties vatbare individuen blijven echter achter en groeien uiteindelijk weer terug; maar het virus is al weg! In het gemengde systeem daarentegen sterft de gehele populatie uit: het agressieve virus kan altijd een nieuw slachtoffer vinden, waardoor er geen overlevenden zijn.\nOefening 14.4\na. Dit betekent dat de biomassaconversie perfect is: elke A die opgegeten wordt levert 1 B op.\nDit geldt overigens ook voor conversie van B naar C.\nDit is een modelaanname, een mogelijk alternatief zou zijn om een extra term toe te voegen. Het eten van 1 A zou dan bijvoorbeeld kunnen zorgen voor een toename van 0.5 B. Met zo’n term nemen we dus aan dat conversie niet perfect is.\nb. Alle drie de populaties zijn in evenwicht, dus \\(\n\\mathchoice{\\frac{\\mathrm{d}A}\n{\\mathrm{d}t}}{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n{\\mathrm{d}A/\\mathrm{d}t}\n=\n\\mathchoice{\\frac{\\mathrm{d}B}\n{\\mathrm{d}t}}{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n{\\mathrm{d}B/\\mathrm{d}t}\n=\n\\mathchoice{\\frac{\\mathrm{d}C}\n{\\mathrm{d}t}}{\\mathrm{d}C/\\mathrm{d}t}\n{\\mathrm{d}C/\\mathrm{d}t}\n{\\mathrm{d}C/\\mathrm{d}t}\n= 0\\). Als we kijken naar de vergelijkingen zien we dat het gelijkstellen van \\(\n\\mathchoice{\\frac{\\mathrm{d}C}\n{\\mathrm{d}t}}{\\mathrm{d}C/\\mathrm{d}t}\n{\\mathrm{d}C/\\mathrm{d}t}\n{\\mathrm{d}C/\\mathrm{d}t}\n\\) aan nul meteen een oplossing geeft voor \\(B\\). Namelijk: \\[\\begin{align*}\neBC - fC &= 0 \\quad \\text{We weten dat $C \\neq 0$, dus mogen delen door $C$} \\\\\neB - f &= 0 \\\\\neB &= f \\\\\nB &= \\frac fe\n\\end{align*}\\] We zien dus dat we of een triviale oplossing hebben waarbij we niet meer 3 populaties hebben (C=0), die in dit geval niet van toepassing is, of een oplossing voor een populatie van \\(B\\) waarbij er een evenwicht is. De populatiegroote van \\(B\\) is dus \\(\\frac fe\\) als de populaties in evenwicht zijn.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-odes-modelleren-in-r",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-odes-modelleren-in-r",
    "title": "Antwoorden modellen",
    "section": "Antwoorden ODEs modelleren in R",
    "text": "Antwoorden ODEs modelleren in R\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOefening 1\n\na. We hebben nu deze functie die de verandering in de prooi populatie beschrijft:\n\\[\n\\mathchoice{\\frac{\\mathrm{d}\\textcolor{#2d43fc}{R}}\n{\\mathrm{d}t}}{\\mathrm{d}\\textcolor{#2d43fc}{R}/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{#2d43fc}{R}/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{#2d43fc}{R}/\\mathrm{d}t}\n= b\\left(1-\\frac{\\textcolor{#2d43fc}{R}}{K}\\right)\\textcolor{#2d43fc}{R} - d\\textcolor{#2d43fc}{R} - \\frac{a\\textcolor{#2d43fc}{R}\\textcolor{orange}{N}}{h+\\textcolor{#2d43fc}{R}}\\]\nDeze gaan we gelijk stellen aan 0 om de nullclines te bepalen:\n\\[0=b\\left(1-\\frac RK \\right) R - dR - \\frac{aRN}{h+R}\\]\n\\[R=0 \\quad \\text{oplossing 1}\\]\n\\[b\\left(1-\\frac RK \\right) - d - \\frac{aN}{h+R}=0\\] Alles vermedigvuldigen met \\(h+R\\): \\[b(h+R)\\left(1-\\frac RK \\right) - d(h+R) - aN=0\\]\nWe schrijven het op als \\(N=f(R)\\), omdat we \\(N\\) meestal op de y-as zetten en het hierdoor makkelijker te visualiseren is.\n\\[(h+R)\\left(b\\left(1-\\frac{R}{K}\\right)-d\\right)=aN\\] We kunnen nu al zien dat het een bergparabool zal vormen, omdat we een negatieve \\(R^2\\) term hebben. We delen nu nog door a en dan krijgen we:\n\\[\\frac 1a(h+R)\\left(b\\left(1-\\frac{R}{K}\\right)-d\\right)=N\\]\nb. K beinvloed de breedte van de parabool. De breedte van de parabool hangt af met de snijpunten met de R-as waar \\(N=0\\). Dit snijpunt komt overeen met de stabiele populatie prooidieren zonder roofdieren. Het eerste snijpunt heeft een negatieve R (\\(h+R=0\\Rightarrow R=-h\\)) dus daar kunnen we geen nuttige biologische informatie uit halen. Het andere snijpunt is: \\[b\\left(1-\\frac RK \\right) -d = 0\\] \\[1-\\frac RK = \\frac db\\] \\[1-\\frac db = \\frac RK\\] \\[K \\left(1-\\frac db\\right)=R\\] Zoals je kan zien heeft \\(K\\) een directe invloed op het snijpunt en dus op de stabiele populatie prooidieren, wat ook logisch is want K wordt meestal gebruikt als de carrying capacity.\nc.\n\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\ngrind.R (25-06-2024) was sourced\n\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dR &lt;- r*R*(1 - R/K) - a*R*N/(R+h)\n    dN &lt;- c*a*R*N/(R+h) - delta*N\n    return(list(c(dR, dN)))  \n  }) \n}  \n\n#Pas in de regel hieronder K aan: \np &lt;- c(r=1,K=4,a=1,c=1,delta=0.3,c=1,h=1)  #parameters\ns &lt;- c(R=1,N=0.01) #begin-dichtheden van R en N  \n\ncolors[1] = \"blue\" #optioneel, default = 'red'\ncolors[2] = \"#FF7F50\" #optioneel, default = 'blue'\npar(mfrow=c(1,2)) # optioneel, maakt 2 plotjes naast elkaar\n\nplane(xmax=3,ymax=2)\nrun(tstep=0.5, legend=F)\n\n\n\n\n\n\n\n\n          R           N \n0.002165465 0.366797215 \n\n\nZoals verwacht verschuift het snijpunt met de x as. Hiermee verschuift natuurlijk ook de top van de parabool.\nOok bereikt de populatie geen stabiele stand meer en blijft deze enorme schommelingen maken! De volgende paragraaf gaat hier dieper op in.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-comp",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-comp",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 15  Competitie en evolutie",
    "text": "Antwoorden 15  Competitie en evolutie\nOefening 15.1\na. \\(c_{21}\\) zal groter worden. Dit kan je hier terugzien:\n\\[\\begin{align*}\n  \n\\mathchoice{\\frac{\\mathrm{d}\\textcolor{#2d43fc}{N_1}}\n{\\mathrm{d}t}}{\\mathrm{d}\\textcolor{#2d43fc}{N_1}/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{#2d43fc}{N_1}/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{#2d43fc}{N_1}/\\mathrm{d}t}\n= r\\textcolor{#2d43fc}{N_1} (1 - c_{11}\\textcolor{#2d43fc}{N_1} - c_{12} \\textcolor{orange}{N_2})\n\\end{align*}\\]\n\\[\n\\mathchoice{\\frac{\\mathrm{d}\\textcolor{orange}{N_2}}\n{\\mathrm{d}t}}{\\mathrm{d}\\textcolor{orange}{N_2}/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{orange}{N_2}/\\mathrm{d}t}\n{\\mathrm{d}\\textcolor{orange}{N_2}/\\mathrm{d}t}\n= r\\textcolor{orange}{N_2}\\left(1 - c_{22}\\textcolor{orange}{N_2} - c_{21}\\textcolor{#2d43fc}{N_1}\\right)\\]\nAls er meer competitie is, dan zal \\(N_2\\) steeds meer “last krijgen” van \\(N_1\\), dus dan neemt de populatie van \\(N_2\\) sterker af als de populatie van \\(N_1\\) toeneemt. \\(c_{21}\\) bepaalt hoeveel de populatiegroei van \\(N_2\\) verminderd, en deze zal dus groter worden.\nb. De oranje lijn gaat verschuiven, omdat dit de nullcline van \\(N_2\\) is. De formule van deze nullcline is: \\[\\textcolor{orange}{N_2} = \\frac{1 - c_{21}\\textcolor{#2d43fc}{N_1}}{c_{22}}\\] Als \\(c_{21}\\) toeneemt, zal de lijn stijler afnemen en het snijpunt met de x-as dus naar links verschuiven.\nc. Let op: hoewel twee rechte lijnen elkaar altijd snijden als ze niet parallel lopen, zijn we als biologen alleen geïnteresseerd in snijpunten met positieve populatiegroottes. Omdat \\(c_{21}\\) groter wordt in dit scenario, verplaatst het snijpunt met de x-as naar links. Er komt een punt dat \\(c{21}\\) groter is dan \\({c11}\\), en de nullclines dus niet meer snijden in het positieve domein (maar nog wel ergens in een ander kwadrant).\nd. Voor grote \\(N_1\\) en \\(N_2\\) hebben we nog steeds afname voor beide populaties. Als we nu over de blauwe nullcline heen gaan begint de \\(N_1\\) populatie juist weer toe te nemen terwijl de \\(N_2\\) populatie blijft dalen. We komen dan op het evenwichtspunt uit waar de \\(N_2\\) populatie 0 is.\n\nOefening 15.2\na. Je kan zien dat er een evenwicht is in het midden, waar er geen pijltjes zijn (de populaties veranderen niet meer). Als er een evenwicht ontstaat met beide populaties hebben we sterkere intraspecifieke competie.\nb. Nee dat kan niet, want voor elke waarde van X en Y krijg je een specifieke hoeveelheid groei van X en Y. Je gaat dus altijd dezelfde kant op.\nc. Als twee lijnen elkaar snijden zou dit betekenen dat ze op het snijpunt daarna twee verschillende kanten op gaan. Maar in b zeiden we dat op elk punt maar 1 mogelijke richting is waarin de populatie zich kan bewegen.\nLET OP: je kan wel een aantal snijdende vectoren in het figuur zien, maar dit zijn niet snijpunten van de trajectories. De vectoren geven alleen aan hoe “snel” de populatie verandert in dat punt.\nd. Mogelijkheid 1: Er is geen ruis in het model, maar in werkelijkheid wel.\nMogelijkheid 2: Er zijn mogelijk nog meer processen die een rol spelen in de verandering van de populaties. Hierdoor kan het lijken alsof de populaties weer op hetzelfde punt zijn beland, maar eigenlijk is de situatie toch anders waardoor ze anders kunnen reageren. Twee populaties met allebei te weinig eten zullen waarschijnlijk afnemen, maar als er meer eten wordt toegevoegd kunnen ze met dezelfde populatiegroottes mogelijk toenemen. Hier kunnen we in ons 2D systeem nog geen rekening mee houden.\nMogelijkheid 3: De tijdstap is niet continu. Zoals we in 10  Exponentiële groei zagen zorgt een te grote tijdstap er voor dat er chaotisch gedrag kan ontstaan. Mogelijk schiet de populatie te verder over een nullcline heen dan verwacht. Dit kan bijvoorbeeld gebeuren in een populatie die niet continu voortplanten, maar bijvoorbeeld maar 1 keer per jaar. Hoewel dit een goed antwoord is, neem je hiermee dus wel aan dat het universum “in stapjes” gaat, terwijl we over het algemeen aannemen dat tijd continu is.\ne. Ze gaan altijd horizontaal door de nullcline van de verticale as en verticaal door de nullcline van de verticale as. Dit is zo omdat de verandering in de populatie op de verticale as 0 is als deze door de nullcline heen gaat. Hierdoor veranderd alleen de horizontale waarde en is de beweging dus horizontaal. En andersom natuurlijk voor de andere as.\nOefening 15.3\na. \nHet eerste evenwicht is stabiel, het tweede evenwicht is instabiel en het derde punt is een zadelpunt.\nb. \nOmdat het eerste punt stabiel is gaat de trajectorie direct righting het evenwicht. Punt 2 is instabiel en de trajectorie gaat naar de oorsprong. Punt 3 is een zadelpunt, dus de trajectorie gaat eerst richting het zadelpunt en daarna Y=2 en X=0, zoals getekend, of naar Y=0 en X=2.\nc. \nOefening 15.4\na. \\(C_2\\) is de cheater, omdat zijn populatie toeneemt als de populatie van \\(C_1\\) toeneemt. \\(C_2\\) heeft dus voordeel van de aanwezigheid van \\(C_1\\) terwijl \\(C_1\\) dat niet heeft met \\(C_2\\).\nb. Dit is de dichtheidsafhankelijkheid, hoe meer individuen hoe minder ze kunnen groeien. Dit is eigenlijk hoeveel individuen van beide populaites samen de omgeving kan ondersteunen. Omdat ze allebei even veel “voedsel eten” of “ruimte in beslag nemen” hebben ze allebei even veel invloed op deze factor.\nDeze term zorgt dus voor competitie tussen de twee soorten. Door ze een gedeelde carrying capacity te geven kunnen we onderzoeken wanneer ze kunnen samenleven.\nc.* Als we een grid van 100x100 hokjes hebben, dan zijn er in totaal 10,000 hokjes. Als deze allemaal gevuld zijn en \\(C_1+C_2\\) dus 10,000 is, dan moet \\(1-\\frac{C_1+C_2}{K}\\) gelijk zijn aan 0. Want op het moment dat alle hokjes gevuld zijn moet de populatiegroei volledig gestopt zijn: \\[1-\\frac{C_1+C_2}{K}=0\\] \\[1=\\frac{C_1+C_2}{K}\\] \\[K=C_1+C_2=10000\\] K is dus gelijk aan 10,000. (Dit is niet helemaal exact omdat we de death rate \\(d\\) nu niet hebben meegenomen)\nd. Het evenwicht met alleen cooperators is stabiel. Dit kan je zien doordat alle pijltjes er naartoe wijzen (als je ook de pijltjes in het negatieve deel wil zien zul je moeten inzoomen in de faseruimte, door plane(vector=T,grid=7,xmin=0.9,xmax=1,ymin=-0.05,ymax=0.05) te gebruiken).\nAls je het zeker wil weten, kun je zoals in de vraag wordt voorgesteld het commando newton(c(C1=1,C2=0),plot=T) gebruiken. Deze tekent een zwarte punt, en print ook een tekst waarin gezegd wordt dat het punt een ‘stable node’ is.\nHetzelfde zouden we kunnen doen voor het evenwicht bij geen van beide soorten (0,0).\ne. Als je met heel veel van beide soorten begint zullen beide soorten eerst afnemen en daarna zal weer alleen C1 overleven.\nf. Aan het vectorveld zie je dat de pijltjes terugwijzen. Als je met heel weinig van beide soorten begint zullen beide dus uitsterven.\ng. De nullclines zien er hetzelfde uit, maar zijn van plek gewisseld. Het evenwicht met alleen cooperators is nu instabiel.\nh. In alle gevallen zullen beide populaties uitsterven. De cheaters groeien namelijk sneller dan de cooperators, waardoor ze de cooperators tot uitsterven drijven. Echter hebben ze de cooperators wel nodig en zullen ze daarna dus ook zelf uitsterven.\ni. De enige mogelijkheid waarin beide populaties overleven is als hun groeisnelheden precies even groot zijn. Dan blijft de populatie ergens op de nullcline hangen. Dit is echter niet heel aannemelijk en een kleine verstoring zal dit “evenwicht” verbreken.\nj. In het geval van de ODEs bekijken we maar 1 systeem. Met het ruimtelijke model, zijn er eigenlijk meerdere sub-populaties verdeeld over de ruimte. Als je goed kijkt is er lokaal wel sprake van dezelfde successie: cheaters nemen de boel over waarna alles uitsterft. Maar hiermee ontstaat “lege ruimte” waar weer groei in kan plaatsvinden. Cheaters kunnen echter niet in hun eentje deze lege ruimte benutten! Deze wordt in plaats daarvan uitsluitend door cooperators benut, waarna er weer een golf cheaters komt, etc.\nWe zagen dat bij gemengde condities in het ruimtelijke model geen coexistentie, dus we kunnen concluderen dat ruimtelijke structuur nodig is voor bovengenoemde processen.\nOefening 15.5 a. Het experiment duurde maar 18 dagen zoals te zien is in Figuur 15.5\nb. De waardes die Gause (r=0.794 en K=64) had gevonden werken erg goed.\nc. Ook met weinig decimalen kom je al erg ver, maar je weet dan niet per se hoe goed de fit is.\nd. Dit zijn de parameters waarop R “trial and error” op uit gaat proberen, de vrije parameters. Deze zullen dus aangepast worden totdat de beste fit is gevonden.\ne. De resultaten zijn nagenoeg hetzelfde met slechts kleine verschillen als je in b. een beetje goede waardes had gevonden. Dit hoeft echter niet altijd zo te zijn, omdat het regelmatig voor komt dat meerdere zeer verschillende fits mogelijk zijn op dezelfde dataset.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-zwermen",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-zwermen",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 16  Zwermen en foerageren",
    "text": "Antwoorden 16  Zwermen en foerageren\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOefening 16.1\na. Na een tijdje is al het eten dichtbij de groep op en dan rennen de aapjes telkens terug naar het midden van de groep, waar geen eten meer is. Het wordt dan steeds moeilijker voor de appjes om eten te vinden. Als je lang genoeg wacht zie je vaak dat de aapjes toch wel weer nieuw eten vinden doordat de groep soms toevallig in de richting van het eten beweegt.\nb. Zorg dat je de uitkomsten met je groepje bespreekt en dat je begrijpt wat er gebeurt.\nc. Zorg dat je de uitkomsten met je groepje bespreekt en dat je begrijpt wat er gebeurt.\nd. Bij een maximale eetsnelheid maakt de groep een soort pulserende bewegingen. Het lijkt erop dat ze minder fruit vinden dan de aapjes uit de eerste simulatie. Bij een minimale eetsnelheid lijkt het erop dat de aapjes meer fruit vinden. Doordat de aapjes langer aan het eten zijn beweegt de groep zich meer in één richting (de kant waar de meeste aapjes aan het eten zijn). Hierdoor kan de groep verder bewegen over het veld, en wel in de richting waar kennelijk fruit te vinden is!\ne. Bewaar je antwoorden goed, deze ga je later in de cursus nog nodig hebben!",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-diffusie",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-diffusie",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 17  Reacties en diffusie",
    "text": "Antwoorden 17  Reacties en diffusie\nOefening 17.1\na. De reactieproducten zijn de variabelen, dat zijn dus \\(E\\), \\(S\\), \\(C_{ES}\\) en \\(P\\). Deze veranderen over de tijd. De parameters zijn de evenwichtsconstantes \\(k_1\\), \\(k_2\\) en \\(k_{cat}\\). Deze zijn constant.\nb. Er wijst maar één pijltje naar \\(c_{ES}\\), dus dit wordt alleen gemaakt door de combinatie van \\(E\\) en \\(S\\).\nEr zijn echter ook twee pijltjes die van \\(c_{ES}\\) afwijzen:\n\nHet complex valt uit elkaar en het substraat is omgezet naar product: \\(- c_{ES} \\cdot k_{cat}\\)\nHet complex valt uit elkaar zonder dat er product is gevormd: \\(- c_{ES} \\cdot k_2\\)\n\nc.\nZoals je in a/b hebt gezien komt dit neer op elk pijltje omzetten naar een wiskundige term. Bijvoorbeeld: omdat \\(P\\) (product) alleen een pijltje naar zich toe heeft, is er alleen een reactie waarmee deze ontstaat. De volledige ODEs zijn:\n\\[\n\\begin{align*}\n  \n\\mathchoice{\\frac{\\mathrm{d}C_{ES}}\n{\\mathrm{d}t}}{\\mathrm{d}C_{ES}/\\mathrm{d}t}\n{\\mathrm{d}C_{ES}/\\mathrm{d}t}\n{\\mathrm{d}C_{ES}/\\mathrm{d}t}\n&= E \\cdot S \\cdot k_1 - c_{ES} \\cdot k_2 - c_{ES} \\cdot k_{cat} \\\\\n  \n\\mathchoice{\\frac{\\mathrm{d}E}\n{\\mathrm{d}t}}{\\mathrm{d}E/\\mathrm{d}t}\n{\\mathrm{d}E/\\mathrm{d}t}\n{\\mathrm{d}E/\\mathrm{d}t}\n&= c_{ES} \\cdot k_2 + c_{ES} \\cdot k_{cat} - E \\cdot S \\cdot k_1 \\\\\n  \n\\mathchoice{\\frac{\\mathrm{d}S}\n{\\mathrm{d}t}}{\\mathrm{d}S/\\mathrm{d}t}\n{\\mathrm{d}S/\\mathrm{d}t}\n{\\mathrm{d}S/\\mathrm{d}t}\n&= c_{ES} \\cdot k_2 - E \\cdot S \\cdot k_1 \\\\\n  \n\\mathchoice{\\frac{\\mathrm{d}P}\n{\\mathrm{d}t}}{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n{\\mathrm{d}P/\\mathrm{d}t}\n&= c_{ES} \\cdot k_{cat}\n\\end{align*}\n\\]\nDe vermenigvuldigingstekens zou je natuurlijk weer weg kunnen laten.\nd. Als er meer substraat (\\(S\\)) is, kan er meer complex (\\(C_{ES}\\)) ontstaan, waardoor er uiteindelijk meer product gevormd wordt. Toch zijn er ook grenzen aan de hoeveelheid product die in één tijdstap gevormd kan worden. De hoeveelheid enzym verandert namelijk niet, en die is ook nodig om de vorming van het product te katalyseren. Als alle enzymen al “bezet” zijn, heeft het geen zin dat er meer substraat beschikbaar is. We verwachten dus dat de snelheid zal verzadigen. Inderdaad, als we de (initiële) reactie-snelheid voor heel veel hoeveelheden substraat berekenen, krijgen we een verzadigde curve:\n\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\ngrind.R (25-06-2024) was sourced\n\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), { \n    \n    dE &lt;- k2*C - k1*E*S + kcat*C\n    dS &lt;- k2*C - k1*E*S\n    dC &lt;- k1*E*S - kcat*C\n    dP &lt;- kcat*C\n    \n    return(list(c(dE, dS, dC, dP)))  \n  }) \n}\nprod &lt;- c()\n\nfor(conc in seq(100)){\n  p &lt;- c(k1=1,k2=0.2,kcat=1) #Parameters\n  s &lt;- c(E=1,S=conc,C=0,P=0) #Starting population sizes\n  stapje &lt;- run(tmax=1,ymax=3,tstep=1,timeplot=F) \n  prod[conc] &lt;- stapje[\"P\"]\n}\n\nplot(y = prod, x = seq(100), col = colors[4], xlab = \"Beginconcentratie substraat\", ylab = \"Product na 1 stap\")\n\n\n\n\nDe hoeveelheid product die in één tijdstap gevormd wordt, verzadigd met substraatconcentratie.\n\n\n\n\nOefening 17.2\na.\n\n\n\nEen diffusieconstante van 0.2. Hierbij bevatten alle vakjes rondom het midden na één tijdstap een gelijke concentratie.\n\n\n\n\n\nEen diffusieconstante van 0.3. Hierbij gaat het mis: er diffundeert meer dan 100% uit het midden, waardoor er een negatieve concentratie overblijft. Dit kan natuurlijk niet!\n\n\nb.\nZelfs met een hoge diffusiesnelheid kan een stofje per stap maar één hokje opschuiven. We zouden dit bereik kunnen vergroten zodat stofjes sneller diffunderen. Een andere (eenvoudige) oplossing is om meerdere diffusiestappen in één minuut te doen, zodat het stofje meer kan verspreiden. Dit betekent dus dat je kleinere tijdstapjes maakt.\nc. Dit probleem hebben we eerder gezien bij populatiegroei met differentievergelijkingen. Destijds zagen we dat de discrete tijdstappen van differentievergelijkingen soms voor problemen kunnen zorgen. Dit kon worden opgelost door het gebruiken van ODEs, met continue tijd (=oneindig kleine tijdstapjes).\nNu zien we eenzelfde soort probleem, maar dan in de ruimte in plaats van met tijd. Doordat we de de ruimte opdelen in hokjes kunnen we “voorbij het evenwicht schieten”, zoals je in vraag a hebt gezien. Dit probleem kan opgelost worden met behulp van PDEs. PDEs hebben niet alleen continue tijd, maar ook continue ruimte. Hierdoor kunnen ze nooit voorbij een evenwicht schieten, ook als we de diffusieconstante heel hoog maken.\nPDEs zijn dus voor diffusie in hokjes wat ODEs zijn voor differentievergelijkingen.\nOefening 17.3\na.\nDe bacteriën bevinden zich eerst in één enkele kolonie, waarna ze zich opsplitsen in kleinere groepen. De schadelijke metabolieten diffunderen rondom de bacteriën (afhankelijk van de gekozen radius). Het is ongunstig voor de bacteriën om in hele grote groepen te leven, omdat er dan heel veel bacteriën in de groep last hebben van de toxiciteit.\nDit lijkt erg op het systeem van Turing-patronen. De gekozen namen parameter-namen in de modelomschrijving (\\(a\\) en \\(i\\)) zijn dan ook geen toeval: deze staan voor ‘activator’ en ‘inhibitor’. Het activerende process is reproductie van bacteriën, die lokaal de ‘concentratie’ verhoogt. Het inhiberende process is de toxiciteit. Dit inhiberende process wordt bepaald binnen een grotere radius, zoals bij de Turing patronen de inhibitor meer diffundeerde (en zo een hogere ‘radius’ heeft!). Hierdoor krijg je een “vlekkenpatroon” van verschillende groepjes bacteriën.\nb.\nDe radii van birth/toxiciteit zijn vergelijkbaar met hogere/lagere diffusiesnelheid van de activator en inhibitor. Inderdaad, als je de radii gelijk maakt, ontstaat er geen patroon en blijft er alleen het (willekeurige) diffusieproces over.\nc. Doordat er meerdere groepjes bacteriën zijn ontstaan, kan een virus niet gemakkelijk overspringen naar de andere groepen. Hierdoor is het onwaarschijnlijk dat alle individuen besmet worden.\nd. De andere groepjes kunnen zich uitbreiden in de richting van weggehaalde groepjes. Vaak zie je daarbij dat ze zich “vanzelf” weer opsplitsen. Na een verstoring zullen er dus dankzij zelf-organistatie keer op keer ongeveer hetzelfde aantal groepjes ontstaan!\nOefening 17.4\na. Differentiaalvergelijkingen (ODEs): De grootte van de bacteriepopulaties kan prima als continu worden beschouwd, omdat er heel veel individuen zijn (het verschil tussen 1 miljoen en 1 miljoen en een half, is niet belangrijk). Er is ook geen ruimtelijk patroon omdat de Erlenmeyer gemengt is. De populaties delen alle voedselbronnen, dus groei kan goed met een gedeelde carrying capacity (\\(1-\\frac{N_1+N_2}{K}\\)) gemodelleerd worden.\nb.\nReactie-diffusie systeem (PDE): Er zijn ruimtelijke patronen, dus we moeten zeker voor een ruimtelijk model gaan. Omdat het hier om concentraties gaat (en niet discrete individuen met birth/death processen) is een reactie-diffusie systeem een goed modelformalisme.\nc.\nIndividual based model (IBM):\nEr is een ruimtelijk patroon met individuen (planten). Omdat er sprake is van “bezette” en “onbezette” plekjes, is een grid de meest eenvoudige manier om dit te bestuderen. Echter zou je ook kunnen kiezen voor een continue ruimte, waarbij je binnen een radius bekijkt of de ruimte ‘vol’ is.\nd. Differentiaalvergelijkingen (ODEs):\nHoewel in het hoofdstuk staat dat zelfs de oceaan niet altijd goed gemengd is, geeft deze modelomschrijving duidelijk aan dat dit hierbij wel het geval is. We hoeven dus eigenlijk geen ruimtelijk model te gebruiken. Zoöplankton deelt zich constant (en niet 1 keer per week/maand/jaar), dus is continue tijd geschikt. We gebruiken daarom niet een differentievergelijking, maar ODEs.\ne.\nReactie-diffusie systeem (PDE):\nWe willen hier een ruimtelijk patroon bestuderen. Als het gaat om individuele cellen zouden we een grof grid kunnen gebruiken. Als de stoffen echter ook door de extracellulaire matrix diffunderen, kunnen er misschien fijnere patronen ontstaan en moet een veel fijner grid (of een ‘echte’ PDE!) gebruikt worden.\nf.\nODE of individual based model:\nWe zouden een ODE kunnen gebruiken met verschillende vergelijkingen voor elke kleur konijnen. Er kan echter een probleem ontstaan op het moment dat de konijnen- en/of havikkenpopulatie(s) erg klein worden (zie ?nte-atto). Een individual based model is computationeel waarschijnlijk langzamer, maar kan wel voorkomen dat we hele gekke (en onwaarschijnlijke) resultaten krijgen als er hele kleine populaties zijn.\ng.\nIndividual based model:\nDe bacteriën groeien op een agarplaat, dus om het systeem goed weer te geven zou een ruimtelijk model het meest geschikt zijn. Gemuteerde bacteriën delen dan lokaal en kunnen zo zorgen voor een lokaal groepje gemuteerde bacteriën. Vaak worden deze systemen op een grid gemodelleerd, maar meer moderne simulaties gebruiken biofysische modellen met continue ruimte, waarbij cellen elkaar weg kunnen duwen (cell shoving).\nh.\nReactie-diffusie systeem (PDE):\nHet morfogen diffundeert, dus die zou het best met continue ruimte (of in ieder geval kleine hokjes) gemodelleerd kunnen worden. De individuele cellen zouden eventueel wel discreet gemodelleerd kunnen worden (al dan niet op een grid).\ni.\nODE:\nDe paracetamol bevindt zich in het bloed, waarvan we over het algemeen aannemen dat het goed gemengd wordt. Ook hoeven we ons bij moleculaire concentraties niet druk te maken over individuele verschillen en is het modelleren van de dichtheid paracetamol een goed genoege benadering.\nj.\nReactie-diffusie systemen (PDEs):\nWe hebben een ruimtelijk model nodig, en we hebben te maken met concentraties. Daarom zijn reactie-diffusie systemen het meest geschikt. De individuele calcium-atomen gaan we natuurlijk niet modelleren.\nk.\nIndividual based model (IBM):\nHet is belangrijk om de zeehonden en orca’s als individuen weer te geven, omdat ze elk een andere kant op zullen bewegen. Daarnaast is er een ruimtelijk patroon, doordat de zeehonden vanuit verschillende hoeken worden belaagd.",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/antwoorden_modellen.html#antwoorden-sec-excit",
    "href": "Appendices/antwoorden_modellen.html#antwoorden-sec-excit",
    "title": "Antwoorden modellen",
    "section": "Antwoorden 18  Exciteerbare media",
    "text": "Antwoorden 18  Exciteerbare media\nOefening 18.1\na. We hebben dit concept vaker terug zien komen, bijvoorbeeld in Oefening 13.3 over sexuele reproductie. Hier zagen we een vergelijkbaar faseportret waar met kleine dichtheden geen groei mogelijk is, met grotere dichtheden wel groei mogelijk is, en met nóg grotere dichtheden de groei weer daalt. Hierdoor zagen we logistische groei, maar dan met wat “opstartproblemen”. Hoewel het Fitzhugh-Nagumo model natuurlijk geen populatiegroei beschrijft, is het principe hetzelfde.\nb.\n\na=-0.2\n\nfunc &lt;- function(V){\n return(-V * (V-a) * (V-1))\n}\ncurve(func,-0.3,1.15,lwd=2,ylim=c(-0.1,0.2), \n     ylab=\"\",xlab=\"V\",col=\"seagreen\")\naxis(1, labels = FALSE,lwd=2) # x-axis\naxis(2, labels = FALSE,lwd=2) # x-axis\nabline(h=0,lty=1,col=\"black\")\nabline(v=1,lty=3,col=\"grey\")\nabline(v=a,lty=3,col=\"grey\")\n\n\n\n\n\n\n\n\nNu is de functie positief vanaf \\(V=0\\), dus vanaf die waarde verwachten we activatie van een actiepotentiaal.\nc.\nDeze is super makkelijk: je hoeft alleen de min in een =-teken te veranderen:\n\\[\\begin{align*}\n\n\\mathchoice{\\frac{\\mathrm{d}V}\n{\\mathrm{d}t}}{\\mathrm{d}V/\\mathrm{d}t}\n{\\mathrm{d}V/\\mathrm{d}t}\n{\\mathrm{d}V/\\mathrm{d}t}\n= -V(V-a)(V-1) - W &= 0 \\quad \\text{ als...}\\\\\nW &=  -V(V-a)(V-1)\\\\\n\\end{align*}\\]\nd.\nHet is dezelfde curve als in vraag b! (nogmaals, als we oplossen voor \\(W\\) hoeven we deze alleen maar aan de andere kant van het = teken te zetten)\n\na=-0.2\n\nfunc &lt;- function(V){\n return(-V * (V-a) * (V-1))\n}\ncurve(func,-0.3,1.15,lwd=2,ylim=c(-0.1,0.2), \n     ylab=\"W\",xlab=\"V\",col=\"seagreen\")\naxis(1, labels = FALSE,lwd=2) # x-axis\naxis(2, labels = FALSE,lwd=2) # x-axis\nabline(h=0,lty=1,col=\"black\")\nabline(v=1,lty=3,col=\"grey\")\nabline(v=a,lty=3,col=\"grey\")\n\n\n\n\n\n\n\n\ne.\n\\[\\begin{align*}\n\n\\mathchoice{\\frac{\\mathrm{d}W}\n{\\mathrm{d}t}}{\\mathrm{d}W/\\mathrm{d}t}\n{\\mathrm{d}W/\\mathrm{d}t}\n{\\mathrm{d}W/\\mathrm{d}t}\n= \\epsilon(V-bW) &= 0 \\quad \\text{ als...}\\\\\nV - bW &= 0\\\\\nbW &= V\\\\\nW &= \\frac{V}{b}\\\\\n\\end{align*}\\]\n\n# source the grind script\nsource(\"https://tbb.bio.uu.nl/rdb/grindR/grind.R\")\n\n# define the model-function so grind can use it\nmodel &lt;- function(t, state, parms) {\n  with(as.list(c(state,parms)), {\n    dV &lt;- -V*(V-a)*(V-1) - W  # dV/dt\n    dW &lt;- e*(V- b*W)         # dW/dt \n    return(list(c(dV,dW)))  \n  }) \n}\n\n# initial values of V and W (a bit above rest potential)\ns &lt;- c(V=0.2,W=0)         \np &lt;- c(e=0.001,b=1,a=-0.2)\npar(mfrow=c(1,2))\nplane(xmin=-0.3,ymin=-0.05,ymax=0.2,xmax=1.05,portrait=F,vector=T,grid=3)\nnewton(plot=T)\nrun(tmax=5000)\n\n\n\n\n\n\n\n\nf. Er is nu nog maar één evenwicht, en de pijlen wijzen er niet meer naar toe, dus het is een instabiel evenwicht (Grind.R bevestigd dit ook). Er is dus ook geen ‘drempelwaarde’ meer, omdat er geen stabiel evenwicht (rustpotentiaal) is. In plaats daarvan blijft dit systeem oscilleren.\ng. De sinusknoop van het hart zou een voorbeeld kunnen zijn. De sinusknoop genereert continu actiepotentialen.\nOefening 18.2\na. Elke 250 tijdstappen ontstaat er een nieuwe golf in de ‘sinusknoop’ (hokje linksboven). Er is dus elke 250e tijdstap een hartslag.\nb. Als we op de ‘boe-knop’ drukken zien we dat er ruis ontstaat: er vormt zich een actiepotentiaal tussen twee golven in. Hierdoor zijn er soms twee hartslagen kort na elkaar, of is de tijd tussen twee hartslagen juist wat langer. Er is echter geen blijvend effect: na een korte tijd is het hartritme weer stabiel.\nc. Het tekenen van een lijn door een golf heen zorgt ervoor dat de golf een spiraal vormt (zoals we in 18.5 Ophopingen, blokkades, en spiralen zagen). Hierdoor wordt het hartritme versneld, wat een blijvend effect is.\nd. Het herstellen van het ritme door delen van de golf weg te halen met de muis is erg moeilijk en zorgt voor alleen maar meer spiralen.\nDe ‘Clear!’ knop daarentegen werkt een stuk beter, omdat hiermee het hele hart in één keer geactiveerd wordt. Dit zorgt ervoor dat het hele hart refractair is (dat betekent dat er dus tijdelijk geen actiepotentiaal gevormd kan worden). Na deze refractaire periode kan het hart weer normaal gaan kloppen met het ritme van de sinusknoop (linksboven).\nOefening 18.3\na. Er gebeurt niks, omdat iedereen in het dorp nog immuun is. Ze zijn tenslotte kortgeleden nog geïnfecteerd!\nb. Als we alle vatbare individuen tegelijkertijd infecteren, zijn er hierna geen vatbare individuen meer over, waardoor de ziekte zich niet verder kan verspreiden. Het zou dus inderdaad een succesvolle methode kunnen zijn. Aan de andere kant is het natuurlijk niet heel ethisch verantwoord om allemaal mensen moedwillig te infecteren met dit virus.\nc. Als er genoeg mensen gevaccineerd zijn (30% of hoger) kan de infectie zich niet snel genoeg verspreiden om (veel) ongevaccineerde mensen te bereiken. Er zijn dan namelijk maar weinig vatbare individuen in de buurt.\nd. Als de vaccinatiegraad hoog genoeg is (30% of hoger) zal de ongevaccineerde toerist waarschijnlijk niet geïnfecteerd worden. Hoewel er kleine lokale uitbraken kunnen zijn, wordt dit nooit endemisch. Bij een lagere vaccinatiegraad is er echter wel een risico voor de ongevaccineerde toerist, want er kunnen constante golven in het dorp blijven rondgaan!\ne. Echt populatie mensen bewegen ook nog veel. Hierdoor krijgt een infectie meer kans om zich te verspreiden dan in deze enorm versimpelde simulatie!\nOefening 18.4\na. Er zit veel variatie in de fractie afgebrande bomen. Meestal is het ergens tussen de 1% en 20%. Als je de simulatie vaak genoeg afspeelt zul je ook gevallen tegenkomen waarbij een veel groter deel van de bomen afbrandt. Dit kan gebeuren doordat bomen rondom de brandhaard toevallig allemaal dicht bij elkaar staan.\nb. Bij een dichtheid van 0.2 en 0.3 brandt er telkens maar een hele kleine fractie van de bomen af. Er is weinig variatie. Bij een bomen-dichtheid van 0.5 branden bijna alle bomen af, al blijven er vaak een paar kleine eilandjes van bomen ongedeerd. Ook bij deze aantallen is er weinig variatie. Bij een bomen-dichtheid van 0.6 zie je dat eigenlijk alles altijd afbrand (met eventueel een heel klein eilandje van gelukkige bomen).\nc.\n\n\nCode\na=0.4\nn=8\n\nfunc &lt;- function(V){\n return(V^n / (a^n + V^n))\n}\ncurve(func,0,1,lwd=2,ylim=0:1,\n     ylab=\"afgebrande fractie\",xlab=\"V\",col=\"seagreen\")\n\n\n\n\n\n\n\n\n\nDe fractie afgebrand bos zou er per bomen-dichtheid ongeveer zo uit kunnen zien. Voor lage dichtheden brandt er bijna geen bos af, dan is er een punt (in dit geval rond de 0.4) waarbij de fractie afgebrand bos heel variabel is, en voor hogere dichtheden brandt bijna het gehele bos af.\nd. Het is een goed idee om de bomen-dichtheid niet te hoog te laten worden. Een klein verschil in dichtheid (0.4 en 0.5 bijvoorbeeld) kan al een heel groot verschil maken voor de fractie afgebrand bos. Daarnaast zou je bijvoorbeeld een strook met wat minder bomen kunnen gebruiken om het verspreiden van de bosbrand te voorkomen (waar in het hoofdstuk hebben we eerder zoiets gezien?).\ne. Dan kan er, nadat dit een tijdje onmogelijk was, in dat gebied weer een nieuwe ‘golf’ van bosbranden ontstaan. Met andere woorden: het bos wordt een exciteerbaar medium!\nf. Juist als bomen zich snel voortplanten, is brand een groter probleem. Er komen dan telkens nieuwe bomen bij, die weer in de brand kunnen vliegen doordat de brand nog niet weg is uit dat gebied. Als de bomen zich heel langzaam voortplanten is de brand al uit dat gebied verdwenen (er waren immers geen bomen meer over) voordat er nieuwe bomen ontstaan. Zo heeft de bosbrand niet genoeg ‘vatbaar’ weefsel meer om te ‘infecteren’ (lees: geen bomen om te verbranden). Op die manier kan de brand zelfs helemaal weg gaan als bomen zich langzaam genoeg voortplanten!",
    "crumbs": [
      "Bijlagen",
      "Antwoorden modellen"
    ]
  },
  {
    "objectID": "Appendices/spiekbriefjes.html",
    "href": "Appendices/spiekbriefjes.html",
    "title": "Spiekbriefjes",
    "section": "",
    "text": "Spiekbriefjes deeltoets 1 (R en basiswiskunde)\nSpiekbriefje R\nSpiekbriefje wiskunde",
    "crumbs": [
      "Bijlagen",
      "Spiekbriefjes"
    ]
  },
  {
    "objectID": "Appendices/dankwoord.html",
    "href": "Appendices/dankwoord.html",
    "title": "Dankwoord",
    "section": "",
    "text": "Dit cursusboek is voortgekomen met ondersteuning van het faculatir Utrechts Stimuleringsfonds Onderwijs (fUSO, 2e call 2024). Samen met Rutger Hermsen en twee student-assistenten, Madelon Zwerink en Yannick Pit, heb ik (Bram van Dijk) hard gewerkt om het cursusmateriaal op een nieuwe manier te presenteren. Kirsten ten Tusscher heeft daarnaast – met veel zorg voor detail – het materiaal doorgenomen en constructieve feedback gegeven. Mijn dank voor de bovengenoemde mensen is groot, want we weten allemaal dat het een hele kluif is geweest!\nDaarnaast wil ik graag mensen bedanken die hebben bijgedragen aan eerdere versies van deze cursus: Paulien Hogeweg, Rob de Boer, Alexander Panvilor, Levien van Zon, en (nogmaals) Kirsten ten Tusscher. Niet alleen heb ik veel van jullie materiaal kunnen gebruiken voor de vernieuwde versie, maar jullie waren ook de docenten toen ik zelf met dit vakgebied in aanraking kwam.\nMijn dank is groot.\nBram",
    "crumbs": [
      "Bijlagen",
      "Dankwoord"
    ]
  }
]